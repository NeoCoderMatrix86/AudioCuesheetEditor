<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@implements IDisposable

@inject SessionStateContainer _sessionStateContainer
@inject ITextLocalizer<RecordControl> _localizer
@inject ITextLocalizerService _localizationService
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider
@inject HotKeys _hotKeys

@if (_sessionStateContainer.Cuesheet.IsRecording == true)
{
    var backgroundCSS = _sessionStateContainer.Cuesheet.IsRecording ? "BackgroundBlink rounded" : "rounded";
    <div class="@backgroundCSS">
        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@_localizer["Record running!"]</Heading>
    </div>
}
@if ((startRecordTimer != null) && (startRecordTimer.Enabled))
{
    <div class="BackgroundBlink rounded">
        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">
            @_localizer["Record will start in {0} seconds!", ((startRecordTimer.Interval / 1000) - (DateTime.Now - recordTimerStarted).Seconds)]
        </Heading>
    </div>
    <Button Color="Color.Danger" Clicked="StopRecordCountdownTimer" Position="Position.Relative.Start.Is50.Translate.MiddleX">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-btn" viewBox="0 0 16 16">
            <path d="M6.5 5A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z" />
            <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z" />
        </svg>
        @_localizer["Abort countdown"]
    </Button>
}
<div style="display: flex; justify-content: space-between; align-items: center;">
    <div style="display: flex; align-items: center;">
        <Dropdown Direction="Direction.End" Disabled="_sessionStateContainer.Cuesheet.IsRecording || startRecordTimer?.Enabled == true">
            <Button Color="Color.Danger" Clicked="StartRecordingClicked" Disabled="_sessionStateContainer.Cuesheet.IsRecording || startRecordTimer?.Enabled == true">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-record2" viewBox="0 0 16 16">
                    <path d="M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 8 3a5 5 0 0 0 0 10z" />
                    <path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z" />
                </svg>
                @_localizer["Start recording"]
            </Button>
            <DropdownToggle Color="Color.Danger" Split Disabled="_sessionStateContainer.Cuesheet.IsRecording || startRecordTimer?.Enabled == true"></DropdownToggle>
            <DropdownMenu>
                <DropdownItem Clicked="OpenCountdownModal" Disabled="_sessionStateContainer.Cuesheet.IsRecording || startRecordTimer?.Enabled == true">@_localizer["Start record countdown timer"]</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </div>

    <div style="flex-grow: 1; display: flex; justify-content: center;">
        @if (_sessionStateContainer.Cuesheet.RecordingTime.HasValue == true)
        {
            <Heading Size="HeadingSize.Is4" style="margin: 0; align-self: center;">@GetTimespanAsString(_sessionStateContainer.Cuesheet.RecordingTime, true)</Heading>
        }
        else
        {
            <Heading Size="HeadingSize.Is4" style="margin: 0; align-self: center;">@String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)</Heading>
        }
    </div>
    <div style="display: flex; align-items: center;">
        <Button Color="Color.Warning" Clicked="StopRecordingClicked" Disabled="!_sessionStateContainer.Cuesheet.IsRecording">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-btn" viewBox="0 0 16 16">
                <path d="M6.5 5A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z" />
                <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z" />
            </svg>
            @_localizer["Stop recording"]
        </Button>
    </div>
</div>

<ModalDialog @ref="modalDialog" />

<Modal @ref="modalInputCountdownTime" VisibleChanged="(visible) => modalInputCountdownTimeVisible = visible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@_localizer["Start record countdown timer"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is5.OnWidescreen.Is12.OnDesktop">@_localizer["Seconds till record starts"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is7.OnWidescreen.Is12.OnDesktop">
                    <NumericPicker TValue="uint" Min="1" @bind-Value="recordCountdownTimer" />
                </FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="StartRecordCountdownTimer">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                    <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z" />
                    <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3" />
                </svg>
                @_localizer["Start countdown"]
            </Button>
            <Button Color="Color.Secondary" Clicked="HideCountdownModal">@_localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Timer updateGUITimer = new Timer(300);
    Timer? startRecordTimer;
    DateTime recordTimerStarted;
    HotKeysContext? hotKeysContext;

    RecordOptions? recordOptions;
    uint recordCountdownTimer;

    ModalDialog? modalDialog;
    Modal? modalInputCountdownTime;
    Boolean modalInputCountdownTimeVisible = false;

    [Parameter]
    public EventCallback StartRecordClicked { get; set; }

    [Parameter]
    public EventCallback StopRecordClicked { get; set; }

    public void Dispose()
    {
        hotKeysContext?.Dispose();
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged -= SessionStateContainer_CuesheetChanged;
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionsSaved;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        hotKeysContext = _hotKeys.CreateContext()
            .Add(Key.Enter, OnEnterKeyDown);

        recordOptions = await _localStorageOptionsProvider.GetOptions<RecordOptions>();
        ReadOutOptions();

        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged += SessionStateContainer_CuesheetChanged;
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionsSaved;

        InitializeUIUpdate();
    }

    void InitializeUIUpdate()
    {
        updateGUITimer.AutoReset = true;
        updateGUITimer.Elapsed += delegate
        {
            StateHasChanged();
            Boolean startRecordTimeEnabled = false;
            if (startRecordTimer != null)
            {
                startRecordTimeEnabled = startRecordTimer.Enabled;
            }
            if ((startRecordTimeEnabled == false) && (_sessionStateContainer.Cuesheet.IsRecording == false))
            {
                updateGUITimer.Stop();
            }
        };
    }

    void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void SessionStateContainer_CuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    String GetTimespanAsString(TimeSpan? timeSpan, Boolean removeMilliseconds = false)
    {
        String resultString = String.Empty;
        if ((timeSpan != null) && (timeSpan.HasValue))
        {
            if (removeMilliseconds == true)
            {
                resultString = timeSpan.Value.Subtract(new TimeSpan(0, 0, 0, 0, timeSpan.Value.Milliseconds)).ToString();
            }
            else
            {
                resultString = timeSpan.Value.ToString();
            }
        }
        return resultString;
    }

    async Task StartRecordingClicked()
    {
        //Check for empty cuesheet and warn!
        if (_sessionStateContainer.Cuesheet.Tracks.Count > 0)
        {
            if (modalDialog != null)
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = _localizer["Cuesheet already contains tracks. Recording is not possible, if tracks are present. Please save your work and start with a clean cuesheet."];
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                await modalDialog.ShowModal();
            }
        }
        else
        {
            _sessionStateContainer.Cuesheet.StartRecording();
            updateGUITimer.Start();
            await StartRecordClicked.InvokeAsync();
        }
    }

    async Task OpenCountdownModal()
    {
        if (modalInputCountdownTime != null)
        {
            await modalInputCountdownTime.Show();
        }
    }

    async Task HideCountdownModal()
    {
        if (modalInputCountdownTime != null)
        {
            await modalInputCountdownTime.Hide();
        }
    }

    async Task StartRecordCountdownTimer()
    {
        recordTimerStarted = DateTime.Now;
        startRecordTimer = new Timer(recordCountdownTimer * 1000);
        startRecordTimer.Elapsed += async delegate
        {
            await StartRecordingClicked();
            startRecordTimer.Stop();
        };
        startRecordTimer.Start();
        await _localStorageOptionsProvider.SaveOptionsValue<RecordOptions>(x => x.RecordCountdownTimer, recordCountdownTimer);        
        updateGUITimer.Start();
        await HideCountdownModal();
    }

    async Task StopRecordingClicked()
    {
        var options = await _localStorageOptionsProvider.GetOptions<RecordOptions>();
        _sessionStateContainer.Cuesheet.StopRecording(options);
        await StopRecordClicked.InvokeAsync();
    }

    void LocalStorageOptionsProvider_OptionsSaved(object? sender, IOptions options)
    {
        if (options is RecordOptions recordingOptions)
        {
            recordOptions = recordingOptions;
            ReadOutOptions();
        }
    }

    void ReadOutOptions()
    {
        if (recordOptions != null)
        {
            recordCountdownTimer = recordOptions.RecordCountdownTimer;
        }
    }

    async ValueTask OnEnterKeyDown()
    {
        if (modalInputCountdownTimeVisible)
        {
            await StartRecordCountdownTimer();
        }
    }

    void StopRecordCountdownTimer()
    {
        startRecordTimer?.Stop();
        startRecordTimer = null;
    }
}
