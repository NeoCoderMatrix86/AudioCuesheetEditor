<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@implements IDisposable

@page "/about"
@layout MainLayoutWithoutMenu

@inject HttpClient _httpClient
@inject IStringLocalizer<About> _localizer
@inject LocalizationService _localizationService

<MudText Typo="Typo.h3">@_localizer["About AudioCuesheetEditor"]</MudText>
<MudText Typo="Typo.h5">@_localizer["Version"]: @VersionString</MudText>
<MudText Typo="Typo.h5">@_localizer["Project url"]: <MudLink Href="https://www.github.com/NeoCoderMatrix86/AudioCuesheetEditor" Target="_blank">https://www.github.com/NeoCoderMatrix86/AudioCuesheetEditor</MudLink></MudText>
<MudText Typo="Typo.h5">@_localizer["Preview environment"]: <MudLink Href="https://preview-audiocuesheeteditor.netlify.app/" Target="_blank">https://preview-audiocuesheeteditor.netlify.app/</MudLink></MudText>
<MudLink Href="https://www.paypal.com/donate/?cmd=_donations&business=sbbaus%40web%2ede&lc=DE&item_name=Cuesheet%20Project&no_note=0&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHostedGuest" Target="_blank">@_localizer["Donate for this project"]</MudLink>
<br />
<br />
<MudText Typo="Typo.h4">@_localizer["Licence"]</MudText>
@if (licence != null)
{
    <MudText>@((MarkupString)licence)</MudText>
}

@code {
    String? licence;

    public void Dispose()
    {
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        var licenceContent = await _httpClient.GetStringAsync("Licence.txt");
        licence = Markdown.ToHtml(licenceContent);
    }

    void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    public String VersionString
    {
        get
        {
            var version = System.Reflection.Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(System.Reflection.AssemblyInformationalVersionAttribute), false).First();
            if ((version != null) && (version is System.Reflection.AssemblyInformationalVersionAttribute))
            {
                return ((System.Reflection.AssemblyInformationalVersionAttribute)version).InformationalVersion;
            }
            return String.Empty;
        }
    }
}
