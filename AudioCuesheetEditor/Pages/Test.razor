@page "/test"

@implements IDisposable

@inject AudioConverterService _audioConverterService
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient
@inject IBlazorDownloadFileService _blazorDownloadFileService



<FileEdit id="@fileEditAudiofileId" Filter="@String.Join(",", Audiofile.AudioCodecs.Select(x => x.MimeType))" Changed="OnAudioFileChanged" AutoReset="false">
    <Feedback>
        <ValidationError />
    </Feedback>
</FileEdit>

<Modal @ref="loadingModal">
    <ModalContent Centered Size="ModalSize.Fullscreen">
        <ModalHeader>
            Loading ...
        </ModalHeader>
        <ModalBody>
            <Progress Value="audioConverterServiceProgress"></Progress>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    Guid fileEditAudiofileId = Guid.NewGuid();
    Modal? loadingModal;
    int audioConverterServiceProgress = 0;

    public void Dispose()
    {
        _audioConverterService.ProgressChanged -= AudioConverterService_ProgressChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _audioConverterService.ProgressChanged += AudioConverterService_ProgressChanged;
    }

    async Task OnAudioFileChanged(FileChangedEventArgs e)
    {
        if (e.Files.FirstOrDefault() != null)
        {
            var file = e.Files.First();
            //TODO
            var audioFileObjectURL = await _jsRuntime.InvokeAsync<String>("getObjectURL", fileEditAudiofileId);
            var codec = Audiofile.AudioCodecs.Single(x => x.MimeType.Equals(file.Type, StringComparison.OrdinalIgnoreCase));
            var audiofile = new Audiofile(file.Name, audioFileObjectURL, codec, _httpClient);
            if (loadingModal != null)
            {
                await loadingModal.Show();
                StateHasChanged();
            }
            var result = await _audioConverterService.SplitAudiofileAsync(audiofile, new TimeSpan(0, 0, 30), new TimeSpan(0,0, 0, 44, 123));
            if (loadingModal != null)
            {
                await loadingModal.Hide();
                StateHasChanged();
            }
            await _blazorDownloadFileService.DownloadFile("result.mp3", result, "application/octet/stream");
        }
    }

    void AudioConverterService_ProgressChanged(object? sender, double progress)
    {
        audioConverterServiceProgress = Convert.ToInt16(progress * 100);
        StateHasChanged();
    }
}
