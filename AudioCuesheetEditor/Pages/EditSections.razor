<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@implements IDisposable

@inject ITextLocalizer<EditSections> _localizer
@inject SessionStateContainer _sessionStateContainer
@inject ITextLocalizer<ValidationMessage> _validationMessageLocalizer
@inject DateTimeUtility _dateTimeUtility
@inject ITextLocalizerService _localizationService
@inject TraceChangeManager _traceChangeManager
@inject IJSRuntime _jsRuntime

<Validations @ref="validations">
    @if (Cuesheet != null)
    {
        @if (_sessionStateContainer.CurrentViewMode == ViewMode.ViewModeFull)
        {
            <Buttons Role="ButtonsRole.Toolbar">
                <Buttons Margin="Margin.Is2.FromEnd">
                    <Button Color="Color.Primary" Clicked="AddSectionClicked" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>
                        <Span Display="Display.None.OnMobile.None.OnTablet.None.OnDesktop.Inline.OnWidescreen">
                            @_localizer["Add new section"]
                        </Span>
                    </Button>
                </Buttons>
            </Buttons>
            <br />
        }
        <Table Bordered Resizable ResizeMode="TableResizeMode.Columns" Narrow>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@_localizer["Controls"]</TableHeaderCell>
                    <TableHeaderCell>@_localizer["Begin"]</TableHeaderCell>
                    <TableHeaderCell>@_localizer["End"]</TableHeaderCell>
                    <TableHeaderCell>@_localizer["CD artist"]</TableHeaderCell>
                    <TableHeaderCell>@_localizer["CD title"]</TableHeaderCell>
                    <TableHeaderCell>@_localizer["Audiofile name"]</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var cuesheetSection in Cuesheet.Sections)
                {
                    <TableRow>
                        <TableRowCell>
                            <Buttons Role="ButtonsRole.Toolbar">
                                <Div Flex="Flex.JustifyContent.Start.AlignItems.Center">
                                    <Buttons Margin="Margin.Is1.FromEnd">
                                        <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Delete section tooltip"]">
                                            <Button Size="Size.Small" Color="Color.Danger" Clicked="() => DeleteSectionClicked(cuesheetSection)">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                                </svg>
                                            </Button>
                                        </Tooltip>
                                    </Buttons>
                                </Div>
                            </Buttons>
                        </TableRowCell>
                        <TableRowCell>
                            <Validation AsyncValidator="(args, token) => ValidatorUtility<CuesheetSection>.Validate(args, cuesheetSection, x => x.Begin, _validationMessageLocalizer, token)">
                                <TextEdit Text="@cuesheetSection.Begin?.ToString()" TextChanged="(value) => _dateTimeUtility.TimespanTextChanged<CuesheetSection, TimeSpan?>(cuesheetSection, x => x.Begin, value)" Immediate="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </TableRowCell>
                        <TableRowCell>
                            <Validation AsyncValidator="(args, token) => ValidatorUtility<CuesheetSection>.Validate(args, cuesheetSection, x => x.End, _validationMessageLocalizer, token)">
                                <TextEdit Text="@cuesheetSection.End?.ToString()" TextChanged="(value) => _dateTimeUtility.TimespanTextChanged<CuesheetSection, TimeSpan?>(cuesheetSection, x => x.End, value)" Immediate="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </TableRowCell>
                        <TableRowCell>
                            <Validation AsyncValidator="(args, token) => ValidatorUtility<CuesheetSection>.Validate(args, cuesheetSection, x => x.Artist, _validationMessageLocalizer, token)">
                                <TextEdit @bind-Text="cuesheetSection.Artist" Immediate="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </TableRowCell>
                        <TableRowCell>
                            <Validation AsyncValidator="(args, token) => ValidatorUtility<CuesheetSection>.Validate(args, cuesheetSection, x => x.Title, _validationMessageLocalizer, token)">
                                <TextEdit @bind-Text="cuesheetSection.Title" Immediate="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </TableRowCell>
                        <TableRowCell>
                            <Validation @ref="audiofileValidation" AsyncValidator="(args, token) => ValidatorUtility<CuesheetSection>.Validate(args, cuesheetSection, x => x.AudiofileName, _validationMessageLocalizer, token)">
                                @if (String.IsNullOrEmpty(cuesheetSection.AudiofileName))
                                {
                                    <FileEdit id="@fileEditAudiofileIds[cuesheetSection]" Filter="@String.Join(",", Audiofile.AudioCodecs.Select(x => x.MimeType))" Changed="(args) => OnSectionAudiofileChanged(args, cuesheetSection)" AutoReset="false">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </FileEdit>
                                }
                                else
                                {
                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <TextEdit ReadOnly Text="@cuesheetSection.AudiofileName">
                                                <Feedback>
                                                    <ValidationError Tooltip />
                                                </Feedback>
                                            </TextEdit>
                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <Button Color="Color.Secondary" Outline Clicked="(args) => OnSectionAudiofileChangedClicked(cuesheetSection)">@_localizer["Change"]</Button>
                                        </Addon>
                                    </Addons>
                                }
                            </Validation>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    }
</Validations>

<ModalDialog @ref="modalDialog" />

@code {
    Validations? validations;
    ModalDialog? modalDialog;
    Validation? audiofileValidation;
    Dictionary<CuesheetSection, Guid> fileEditAudiofileIds = new();

    public Cuesheet? Cuesheet
    {
        get
        {
            Cuesheet? cuesheet;
            switch (_sessionStateContainer.CurrentViewMode)
            {
                case ViewMode.ViewModeImport:
                    cuesheet = _sessionStateContainer.ImportCuesheet;
                    break;
                default:
                    cuesheet = _sessionStateContainer.Cuesheet;
                    break;
            }
            return cuesheet;
        }
    }

    public void Dispose()
    {
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        if (Cuesheet != null)
        {
            foreach (var track in Cuesheet.Tracks)
            {
                track.ValidateablePropertyChanged -= Track_ValidateablePropertyChanged;
            }
            Cuesheet.TrackAdded -= Cuesheet_TrackAdded;
            Cuesheet.TrackRemoved -= Cuesheet_TrackRemoved;
        }
        _traceChangeManager.UndoDone -= TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone -= TraceChangeManager_RedoDone;
        _sessionStateContainer.CuesheetChanged -= SessionStateContainer_CuesheetChanged;
        _sessionStateContainer.ImportCuesheetChanged -= SessionStateContainer_ImportCuesheetChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        if (Cuesheet != null)
        {
            Cuesheet.TrackAdded += Cuesheet_TrackAdded;
            Cuesheet.TrackRemoved += Cuesheet_TrackRemoved;
        }
        _traceChangeManager.UndoDone += TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone += TraceChangeManager_RedoDone;
        _sessionStateContainer.CuesheetChanged += SessionStateContainer_CuesheetChanged;
        _sessionStateContainer.ImportCuesheetChanged += SessionStateContainer_ImportCuesheetChanged;
    }

    void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
        validations?.ValidateAll();
    }

    Task AddSectionClicked()
    {
        if (Cuesheet != null)
        {
            var section = Cuesheet.AddSection();
            _traceChangeManager.TraceChanges(section);
            fileEditAudiofileIds.Add(section, Guid.NewGuid());
        }
        return Task.CompletedTask;
    }

    Task DeleteSectionClicked(CuesheetSection section)
    {
        if (Cuesheet != null)
        {
            Cuesheet.RemoveSection(section);
        }
        return Task.CompletedTask;
    }

    void Cuesheet_TrackAdded(object? sender, TrackAddRemoveEventArgs args)
    {
        args.Track.ValidateablePropertyChanged += Track_ValidateablePropertyChanged;
        validations?.ValidateAll().GetAwaiter().GetResult();
    }

    void Cuesheet_TrackRemoved(object? sender, TrackAddRemoveEventArgs args)
    {
        args.Track.ValidateablePropertyChanged -= Track_ValidateablePropertyChanged;
        validations?.ValidateAll().GetAwaiter().GetResult();
    }

    void Track_ValidateablePropertyChanged(object? sender, string property)
    {
        switch (property)
        {
            case nameof(Track.Begin):
            case nameof(Track.End):
                validations?.ValidateAll().GetAwaiter().GetResult();
                break;
        }
    }

    void TraceChangeManager_UndoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
        validations?.ValidateAll().GetAwaiter().GetResult();
    }

    void TraceChangeManager_RedoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
        validations?.ValidateAll().GetAwaiter().GetResult();
    }

    void SessionStateContainer_CuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void SessionStateContainer_ImportCuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    async Task OnSectionAudiofileChangedClicked(CuesheetSection section)
    {
        section.AudiofileName = null;
        StateHasChanged();
        await Task.Delay(1);
        await _jsRuntime.InvokeVoidAsync("triggerClick", fileEditAudiofileIds[section]);
    }

    async Task OnSectionAudiofileChanged(FileChangedEventArgs e, CuesheetSection section)
    {
        if (e.Files.FirstOrDefault() != null)
        {
            if (Cuesheet != null)
            {
                var file = e.Files.First();
                if (IOUtility.CheckFileMimeTypeForAudioCodec(file) == true)
                {
                    section.AudiofileName = file.Name;
                }
                else
                {
                    if (modalDialog != null)
                    {
                        modalDialog.Title = _localizer["Error"];
                        modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], file.Name, _localizer["Audiofile"]);
                        modalDialog.ModalSize = ModalSize.Small;
                        modalDialog.Mode = ModalDialog.DialogMode.Alert;
                        await modalDialog.ShowModal();
                    }
                }
            }
        }
        if (audiofileValidation != null)
        {
            await audiofileValidation.ValidateAsync();
        }
    }
}
