<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/"

@inherits BaseLocalizedComponent

@inject ISessionStateContainer _sessionStateContainer
@inject IStringLocalizer<Index> _localizer
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

<MudTabs Rounded ApplyEffectsToContainer Outlined Color="Color.Success" ActivePanelIndex="(int)GetViewMode()" ActivePanelIndexChanged="this.AsNonRenderingEventHandler<int>(ActiveTabIndexChanged)" KeepPanelsAlive>
    <CascadingValue Value="GetViewMode()">
        <MudTabPanel Text="@_localizer["Detail view"]" Icon="@Icons.Material.Outlined.Edit">
            <CascadingValue Value="_sessionStateContainer.Cuesheet">
                <ViewModeFull />
            </CascadingValue>
        </MudTabPanel>
        <MudTabPanel Text="@_localizer["Record view"]" Icon="@Icons.Material.Outlined.Mic">
            <CascadingValue Value="_sessionStateContainer.Cuesheet">
                <ViewModeRecord />
            </CascadingValue>
        </MudTabPanel>
        <MudTabPanel Text="@_localizer["Import view"]" Icon="@Icons.Material.Outlined.ImportExport">
            <CascadingValue Value="_sessionStateContainer.ImportCuesheet">
                <ViewModeImport />
            </CascadingValue>
        </MudTabPanel>
    </CascadingValue>
</MudTabs>

@code{
    //TODO: do NOT use CascadingValue foc Cuesheet, since every change will cause a rerendering of all components below
    ViewOptions? options;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        options = await _localStorageOptionsProvider.GetOptionsAsync<ViewOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
        }
    }

    async Task ActiveTabIndexChanged(int tabIndex)
    {
        var activeViewMode = (ViewMode)tabIndex;
        await LocalStorageOptionsProvider.SaveOptionsValueAsync<ViewOptions>(x => x.ActiveTab, activeViewMode);
    }

    ViewMode GetViewMode()
    {
        ViewMode viewMode = ViewMode.DetailView;
        if (options != null)
        {
            viewMode = options.ActiveTab;
        }
        return viewMode;
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is ViewOptions viewOptions)
        {
            options = viewOptions;
            StateHasChanged();
        }
    }
}