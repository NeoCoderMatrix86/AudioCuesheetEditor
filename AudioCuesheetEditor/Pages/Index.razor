<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/"
@inject IJSRuntime JSRuntime
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IStringLocalizer<Localization> localizer
@inject CuesheetController cuesheetController

<!--TODO: Werkzeugleiste-->
<!--TODO: Drag & Drop Dateien (und automatische Auswertung des ganzen)-->

<Accordion>
    <Collapse Visible="@cuesheetDataVisible">
        <CollapseHeader>
            <Blazorise.Link Clicked="(() => HeaderClicked(ref cuesheetDataVisible, ref chevronCuesheetData))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                <h3>@localizer["CuesheetData"]</h3>
                <div>
                    @((MarkupString)chevronCuesheetData)
                </div>
            </Blazorise.Link>
        </CollapseHeader>
        <CollapseBody>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="cdArtistLabel">@localizer["CDArtist"]</span>
                </div>
                <input type="text" class="form-control @GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)))" id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.Artist))" aria-label="CD Artist" aria-describedby="cdTitleLabel" placeholder="@localizer["EnterCDartisthere"]" @bind="@cuesheet.Artist" data-toggle="tooltip" data-placement="top" title="@cuesheet.GetValidationErrors(String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)))">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="cdTitleLabel">@localizer["CDTitle"]</span>
                </div>
                <input type="text" class="form-control @GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)))" id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.Title))" aria-label="CD Title" aria-describedby="cdTitleLabel" placeholder="@localizer["EnterCDtitlehere"]" @bind="@cuesheet.Title" data-toggle="tooltip" data-placement="top" title="@cuesheet.GetValidationErrors(String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)))">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="cdAudioFileLabel">@localizer["Audiofile"]</span>
                </div>
                <input type="file" class="form-control @GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.AudioFile)))" id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.AudioFile))" accept="audio/*" aria-label="Audiofile" aria-describedby="cdAudioFileLabel" placeholder="@localizer["Enteraudiofilehere"]" onchange="audioFileChanged(this)" data-toggle="tooltip" data-placement="top" title="@cuesheet.GetValidationErrors(String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.AudioFile)))">
            </div>
        </CollapseBody>
    </Collapse>
    <!--TODO-->
    @*<Collapse Visible="@cuesheetOptionalInfoVisible">
            <CollapseHeader>
                <Blazorise.Link Clicked="CuesheetOptionalInfoHeaderClicked" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                    <h3>Cuesheet optional Information</h3>
                    <div>
                        @((MarkupString)chevronCuesheetOptionalInfo)
                    </div>
                </Blazorise.Link>
            </CollapseHeader>
            <CollapseBody>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="cdTextFileLabel">CD Textfile</span>
                    </div>
                    <input type="file" class="form-control" id="cdTextFile" accept="text/plain" aria-label="CD Textfile" aria-describedby="cdTextFileLabel" placeholder="Enter CD textfile here">
                </div>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="cdCatalogueNumberLabel">CD Cataloguenumber</span>
                    </div>
                    <input type="text" class="form-control" id="cdCatalogueNumber" aria-label="CD Cataloguenumber" aria-describedby="cdCatalogueNumberLabel" placeholder="Enter CD cataloguenumber here">
                </div>
            </CollapseBody>
        </Collapse>*@
    <Collapse Visible="@cuesheetTracksVisible">
        <CollapseHeader>
            <Blazorise.Link Clicked="(() => HeaderClicked(ref cuesheetTracksVisible, ref chevronCuesheetTracks))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                <h3>@localizer["CuesheetTracks"]</h3>
                <div>
                    @((MarkupString)chevronCuesheetTracks)
                </div>
            </Blazorise.Link>
        </CollapseHeader>
        <CollapseBody>
            <div class="table-responsive-md">
                <table class="table table-bordered">
                    <thead>
                        <tr class="thead-light">
                            <th>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-menu-button-wide" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v2A1.5 1.5 0 0 1 14.5 5h-13A1.5 1.5 0 0 1 0 3.5v-2zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-13zM14 7H2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1zM2 6a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2H2z" />
                                    <path fill-rule="evenodd" d="M15 11H1v-1h14v1zM2 12.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0-10a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm0 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z" />
                                    <path d="M12.823 2.823l-.396-.396A.25.25 0 0 1 12.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0z" />
                                </svg>
                            </th>
                            <th>#</th>
                            <th>@localizer["Artist"]</th>
                            <th>@localizer["Title"]</th>
                            <th>@localizer["Begin"]</th>
                            <th>@localizer["End"]</th>
                            <th>@localizer["Length"]</th>
                            <th>@localizer["Warning"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var track in cuesheet.Tracks)
                        {
                            <tr>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        @if (cuesheet.MoveTrackPossible(track, MoveDirection.Up) == true)
                                        {
                                            <button class="btn btn-secondary btn-sm" @onclick="() => cuesheet.MoveTrack(track, MoveDirection.Up)" data-toggle="tooltip" data-placement="top" title="@localizer["MoveTrackUpTooltip"]">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-up" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5zm-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z" />
                                                </svg>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary btn-sm disabled" disabled data-toggle="tooltip" data-placement="top" title="@localizer["MoveTrackUpTooltip"]">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-up" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5zm-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z" />
                                                </svg>
                                            </button>
                                        }
                                        <button class="btn btn-warning btn-sm" @onclick="() => cuesheet.RemoveTrack(track)" data-toggle="tooltip" data-placement="top" title="@localizer["DeleteTrackTooltip"]">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                            </svg>
                                        </button>
                                        @if (cuesheet.MoveTrackPossible(track, MoveDirection.Down) == true)
                                        {
                                            <button class="btn btn-secondary btn-sm" @onclick="() => cuesheet.MoveTrack(track, MoveDirection.Down)" data-toggle="tooltip" data-placement="top" title="@localizer["MoveTrackDownTooltip"]">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5zM8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6z" />
                                                </svg>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary btn-sm disabled" disabled data-toggle="tooltip" data-placement="top" title="@localizer["MoveTrackDownTooltip"]">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5zM8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6z" />
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                </td>
                                <td>@track.Position</td>
                                <td><input type="text" id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Artist))" class="form-control @GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" @bind="@track.Artist" data-toggle="tooltip" data-placement="top" title="@track.GetValidationErrors(String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" /></td>
                                <td><input type="text" id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Title))" class="form-control @GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))" @bind="@track.Title" data-toggle="tooltip" data-placement="top" title="@track.GetValidationErrors(String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))" /></td>
                                <td><input type="text" id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Begin))" class="form-control @GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" @bind="@track.Begin" data-toggle="tooltip" data-placement="top" title="@track.GetValidationErrors(String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" /></td>
                                <td><input type="text" id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.End))" class="form-control @GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" @bind="@track.End" data-toggle="tooltip" data-placement="top" title="@track.GetValidationErrors(String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" /></td>
                                <td><input type="text" id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Length))" class="form-control @GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" @bind="@track.Length" data-toggle="tooltip" data-placement="top" title="@track.GetValidationErrors(String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" /></td>
                                <td>@((MarkupString)track.GetValidationErrors())</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <button class="btn btn-primary" @onclick="AddTrackClicked">@localizer["Addnewtrack"]</button>
            <button class="btn btn-warning" @onclick="DeleteAllTracksClicked">@localizer["DeleteAllTracks"]</button>
        </CollapseBody>
    </Collapse>
    <Collapse Visible="@summaryVisibile">
        <CollapseHeader>
            <Blazorise.Link Clicked="(() => HeaderClicked(ref summaryVisibile, ref chevronSummary))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                <h3>@localizer["CuesheetResult"]</h3>
                <div>
                    @((MarkupString)chevronSummary)
                </div>
            </Blazorise.Link>
        </CollapseHeader>
        <CollapseBody>
            <Accordion>
                <Collapse Visible="processingHintsVisibile">
                    <CollapseHeader>
                        <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsVisibile, ref chevronProcessingHints))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                            <h3>@localizer["ProcessingHints"]</h3>
                            <div>
                                @((MarkupString)chevronProcessingHints)
                            </div>
                        </Blazorise.Link>
                    </CollapseHeader>
                    <CollapseBody>
                        <Accordion>
                            @if (GetValidationErrors(ValidationErrorFilterType.WarningOnly).Count() > 0)
                            {
                                <Collapse Visible="processingHintsWarningVisible">
                                    <CollapseHeader>
                                        <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsWarningVisible, ref chevronProcessingHintsWarning))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                            <h3>@localizer["Warnings"]</h3>
                                            <div>
                                                @((MarkupString)chevronProcessingHintsWarning)
                                            </div>
                                        </Blazorise.Link>
                                    </CollapseHeader>
                                    <CollapseBody>
                                        @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.WarningOnly))
                                        {
                                            <a onclick="document.getElementById('@cuesheetController.GetFieldIdentifier(validationError.FieldReference)').focus();">
                                                <div class="alert alert-warning" role="alert">
                                                    @localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message
                                                </div>
                                            </a>
                                        }
                                    </CollapseBody>
                                </Collapse>
                            }
                            @if (GetValidationErrors(ValidationErrorFilterType.ErrorOnly).Count() > 0)
                            {
                                <Collapse Visible="processingHintsErrorVisible">
                                    <CollapseHeader>
                                        <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsErrorVisible, ref chevronProcessingHintsError))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                            <h3>@localizer["Errors"]</h3>
                                            <div>
                                                @((MarkupString)chevronProcessingHintsError)
                                            </div>
                                        </Blazorise.Link>
                                    </CollapseHeader>
                                    <CollapseBody>
                                        @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.ErrorOnly))
                                        {
                                            <a onclick="document.getElementById('@cuesheetController.GetFieldIdentifier(validationError.FieldReference)').focus();">
                                                <div class="alert alert-danger" role="alert">
                                                    @localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message
                                                </div>
                                            </a>
                                        }
                                    </CollapseBody>
                                </Collapse>
                            }
                        </Accordion>
                    </CollapseBody>
                </Collapse>
                <Collapse Visible="exportResultVisbile">
                    <CollapseHeader>
                        <Blazorise.Link Clicked="(() => HeaderClicked(ref exportResultVisbile, ref chevronExportResult))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                            <h3>@localizer["ExportResult"]</h3>
                            <div>
                                @((MarkupString)chevronExportResult)
                            </div>
                        </Blazorise.Link>
                    </CollapseHeader>
                    <CollapseBody>
                        @if (cuesheet.CanWriteCuesheetFile == true)
                        {
                            <button Class="btn btn-primary" @onclick="DownloadCuesheetFileClicked">@localizer["Downloadcuesheet"]</button>
                        }
                        else
                        {
                            <button Class="btn btn-primary disabled" @onclick="DownloadCuesheetFileClicked" disabled data-toggle="tooltip" data-placement="top" title="@localizer["PleaseCheckProcessingHints"]">@localizer["Downloadcuesheet"]</button> 
                        }
                    </CollapseBody>
                </Collapse>
            </Accordion>
        </CollapseBody>
    </Collapse>
</Accordion>

<br />
<button class="btn btn-danger" @onclick="RestartCuesheetClicked">@localizer["ResetCuesheet"]</button>

<ModalConfirmDialog @ref="modalConfirmDialog" />

@code {
    private Boolean cuesheetDataVisible = true;
    private Boolean cuesheetOptionalInfoVisible = false;
    private Boolean cuesheetTracksVisible = true;
    private Boolean summaryVisibile = true;
    private Boolean processingHintsVisibile = false;
    private Boolean processingHintsWarningVisible = true;
    private Boolean processingHintsErrorVisible = true;
    private Boolean exportResultVisbile = true;

    private String chevronCuesheetData = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronCuesheetOptionalInfo = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
    private String chevronCuesheetTracks = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronSummary = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronProcessingHints = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
    private String chevronProcessingHintsWarning = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronProcessingHintsError = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronExportResult = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";

    private Cuesheet cuesheet;

    private ModalConfirmDialog modalConfirmDialog;

    protected override Task OnInitializedAsync()
    {
        cuesheet = cuesheetController.Cuesheet;
        cuesheet.ValidateablePropertyChanged += delegate {
            //TODO: Should be customizable via options
            if (cuesheet.ValidationErrors.Count() > 0)
            {
                processingHintsVisibile = true;
                SwitchChevron(processingHintsVisibile, ref chevronProcessingHints);
            }
        };

        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("GLOBAL.SetDotNetReference", dotNetReference);

        //TODO: DEBUG Only for Design purpose
        //cuesheet.Artist = "Demo Artist";
        //cuesheet.Title = "Demo Title";
        //var begin = TimeSpan.Zero;
        //for (uint i = 1; i < 25; i++)
        //{
        //    var track = cuesheetController.NewTrack();
        //    track.Artist = String.Format("Demo Track Artist {0}", i);
        //    track.Title = String.Format("Demo Track Title {0}", i);
        //    track.Begin = begin;
        //    begin = begin.Add(new TimeSpan(0, (int)i, (int)i));
        //    track.End = begin;
        //    cuesheet.AddTrack(track);
        //}
        //DEBUG
        return base.OnInitializedAsync();
    }

    private void HeaderClicked(ref Boolean visible, ref String chevron)
    {
        visible = !visible;
        SwitchChevron(visible, ref chevron);
    }

    private void SwitchChevron(Boolean chevronUp, ref String chevron)
    {
        if (chevronUp == true)
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
        }
        else
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
        }
    }

    private void AddTrackClicked()
    {
        var track = cuesheetController.NewTrack();
        track.ValidateablePropertyChanged += delegate {
            //TODO: Should be customizable via options
            if (track.ValidationErrors.Count() > 0)
            {
                processingHintsVisibile = true;
                SwitchChevron(processingHintsVisibile, ref chevronProcessingHints);
            }
        };
        cuesheet.AddTrack(track);
    }

    private void DeleteAllTracksClicked()
    {
        //Display a confirm warning
        modalConfirmDialog.Title = localizer["ConfirmRequired"];
        modalConfirmDialog.Text = localizer["ConfirmDeleteOfAllTracks"];
        void deleteTracksDelegate(object sender, EventArgs args)
        {
            cuesheet.RemoveAllTracks();
            modalConfirmDialog.Confirmed -= deleteTracksDelegate;
            StateHasChanged();
        };
        modalConfirmDialog.Confirmed += deleteTracksDelegate;
        modalConfirmDialog.ShowModal();
    }

    private void RestartCuesheetClicked()
    {
        //Display a confirm warning
        modalConfirmDialog.Title = localizer["ConfirmRequired"];
        modalConfirmDialog.Text = localizer["ConfirmResetCuesheet"];
        void newCuesheetDelegate(object sender, EventArgs args)
        {
            cuesheet = cuesheetController.NewCuesheet();
            modalConfirmDialog.Confirmed -= newCuesheetDelegate;
            StateHasChanged();
        };
        modalConfirmDialog.Confirmed += newCuesheetDelegate;
        modalConfirmDialog.ShowModal();
    }

    private void DownloadCuesheetFileClicked()
    {
        var cuesheetFile = new CuesheetFile(cuesheet);
        var fileData = cuesheetFile.GenerateCuesheetFile();
        BlazorDownloadFileService.DownloadFile(CuesheetFile.DefaultFileName, fileData, "text/plain");
    }

    [JSInvokable()]
    public void AudioFileChanged(String fileName)
    {
        if (String.IsNullOrEmpty(fileName) == false)
        {
            cuesheet.AudioFile = new AudioFile(fileName);
        }
        else
        {
            cuesheet.AudioFile = null;
        }
        StateHasChanged();
    }

    private String GetCSSClassAlert(Validateable validateable, String property)
    {
        String cssClass = String.Empty;
        var validationErrors = validateable.GetValidationErrorsFiltered(property);
        if (validationErrors.Count() >= 1)
        {
            if (validationErrors.Count() > 1)
            {
                if (cuesheet.GetValidationErrorsFiltered(property, Model.Entity.ValidationErrorFilterType.ErrorOnly).Count() >= 1)
                {
                    cssClass = "alert-danger";
                }
                else
                {
                    cssClass = "alert-warning";
                }
            }
            else
            {
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Error)
                {
                    cssClass = "alert-danger";
                }
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Warning)
                {
                    cssClass = "alert-warning";
                }
            }
        }
        return cssClass;
    }

    private IReadOnlyCollection<AudioCuesheetEditor.Model.Entity.ValidationError> GetValidationErrors(ValidationErrorFilterType validationErrorFilterType)
    {
        List<AudioCuesheetEditor.Model.Entity.ValidationError> validationErrors = cuesheet.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType).ToList();
        foreach(var track in cuesheet.Tracks)
        {
            validationErrors.AddRange(track.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType));
        }
        return validationErrors.AsReadOnly();
    }
}