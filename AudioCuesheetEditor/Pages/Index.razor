<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/"

@inherits BaseLocalizedComponent

@inject IStringLocalizer<Index> _localizer
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

<CascadingValue Value="currentViewmode">
    <MudTabs Rounded ApplyEffectsToContainer Outlined Color="Color.Success" ActivePanelIndex="(int)currentViewmode" ActivePanelIndexChanged="this.AsNonRenderingEventHandler<int>(ActiveTabIndexChanged)" KeepPanelsAlive>
        <MudTabPanel Text="@_localizer["Detail view"]" Icon="@Icons.Material.Outlined.Edit">
            <ViewModeFull />
        </MudTabPanel>
        <MudTabPanel Text="@_localizer["Record view"]" Icon="@Icons.Material.Outlined.Mic">
            <ViewModeRecord />
        </MudTabPanel>
        <MudTabPanel Text="@_localizer["Import view"]" Icon="@Icons.Material.Outlined.ImportExport">
            <ViewModeImport />
        </MudTabPanel>
    </MudTabs>
</CascadingValue>

@code{
    //TODO: Keeping the panels alive will cause non seen components to rerender every time an update to entities is done. We need to get away from KeepPanelsAlive because this kills renderperformance
    ViewOptions? options;
    ViewMode currentViewmode = ViewMode.DetailView;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        options = await _localStorageOptionsProvider.GetOptionsAsync<ViewOptions>();
        currentViewmode = options.ActiveTab;
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
        }
    }

    async Task ActiveTabIndexChanged(int tabIndex)
    {
        currentViewmode = (ViewMode)tabIndex;
        await LocalStorageOptionsProvider.SaveOptionsValueAsync<ViewOptions>(x => x.ActiveTab, currentViewmode);
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is ViewOptions viewOptions)
        {
            options = viewOptions;
            currentViewmode = options.ActiveTab;
            StateHasChanged();
        }
    }
}