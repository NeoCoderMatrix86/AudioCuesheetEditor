<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/"
@inject IJSRuntime JSRuntime
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IStringLocalizer<Localization> localizer
@inject CuesheetController cuesheetController
@inject NavigationManager navigationManager
@inject OptionsController optionsController
@inject ILogger<Index> Logger

<Layout>
    <LayoutHeader Fixed="true">
        <Bar Background="Background.Dark">
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle Class="btn btn-success" Style="color:white;">
                        @localizer["ExportResult"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem>
                            <Tooltip Placement="Placement.Right" Text="@GetLocalizedString(cuesheet.CanWriteCuesheetFile == false, "PleaseCheckProcessingHints")">
                                <Button Color="Color.Primary" Clicked="() => modalDownloadCuesheet.Show()" Disabled="!cuesheet.CanWriteCuesheetFile">@localizer["Downloadcuesheet"]</Button>
                            </Tooltip>
                        </BarDropdownItem>
                        <BarDropdownItem>
                            <Button Color="Color.Secondary" @onclick="() => modalExportProfiles.Show()">@localizer["OpenExportProfilesDialog"]</Button>
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <Button Color="Color.Info">
                    <BarLink To="Help" Style="color:white;">@localizer["Help"]</BarLink>
                </Button>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle Class="btn btn-danger" Style="color:white;">
                        @localizer["Reset"]
                    </BarDropdownToggle>
                    <BarDropdownMenu Class="dropdown-menu-right">
                        <BarDropdownItem>
                            <Button Color="Color.Danger" @onclick="OnDeleteAllTracksClicked">@localizer["DeleteAllTracks"]</Button>
                        </BarDropdownItem>
                        <BarDropdownItem>
                            <Button Color="Color.Danger" @onclick="RestartCuesheetClicked">@localizer["ResetCuesheet"]</Button>
                        </BarDropdownItem>
                        <Divider />
                        <BarDropdownItem>
                            <Button Color="Color.Danger" @onclick="OnRestartCompleteApplicationClicked">@localizer["RestartCompleteApplication"]</Button>
                        </BarDropdownItem>
                        <BarDropdownItem>
                            <Button Color="Color.Danger" @onclick="OnResetCompleteApplicationClicked">@localizer["ResetCompleteApplication"]</Button>
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <Button Color="Color.Light" Clicked="() => modalOptions.Show()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                        <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                        <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                    </svg>
                </Button>
            </BarItem>
        </Bar>
    </LayoutHeader>
    <LayoutContent>
        <Row Margin="Margin.Is2">
            <Column>
                <Accordion>
                    <Collapse Visible="dropFilesVisible">
                        <CollapseHeader>
                            <Blazorise.Link Clicked="(() => HeaderClicked(ref dropFilesVisible, ref chevronDropFiles))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                <h3>@localizer["DropFiles"]</h3>
                                <div>
                                    @((MarkupString)chevronDropFiles)
                                </div>
                            </Blazorise.Link>
                        </CollapseHeader>
                        <CollapseBody>
                            <div class="fileUploadDragNDrop mb-3" ondragover="dragOver(event, this)" ondragleave="dragLeave(event, this)" ondrop="dropFiles(event, this, 'dropInputfiles')">
                                <svg class="fileUploadDragNDropIcon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z"></path></svg>
                                <InputFile id="dropInputfiles" class="inputfile" multiple OnChange="OnDropInputfilesChanged"></InputFile>
                                <label for="dropInputfiles">@((MarkupString)(localizer["ChooseFileOrDrag"].ToString()))</label>
                            </div>
                            <Alert @ref="alertInvalidFile" Color="Color.Danger">
                                <AlertMessage>@localizer["InvalidFile"]</AlertMessage>
                                <AlertDescription>@String.Format(localizer["YouDroppedAFileThatCanNotBeProcessed"], invalidFileName)</AlertDescription>
                            </Alert>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="importVisible">
                        <CollapseHeader>
                            <Blazorise.Link Clicked="(() => HeaderClicked(ref importVisible, ref chevronImport))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                <h3>@localizer["ImportFiles"]</h3>
                                <div>
                                    @((MarkupString)chevronImport)
                                </div>
                            </Blazorise.Link>
                        </CollapseHeader>
                        <CollapseBody>
                            <Tooltip Placement="Placement.Top" Text="@localizer["ImportTextfileTooltip"]">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["Textfile"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        <InputFile class="form-control" accept="@TextImportFile.MimeType" OnChange="OnInputFileTextImportChange"></InputFile>
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="Placement.Top" Text="@localizer["ImportCuesheetTooltip"]">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["Cuesheet"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        <InputFile class="form-control" accept="@CuesheetFile.FileExtension" OnChange="OnInputFileCuesheetChange"></InputFile>
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="@cuesheetDataVisible">
                        <CollapseHeader>
                            <Blazorise.Link Clicked="(() => HeaderClicked(ref cuesheetDataVisible, ref chevronCuesheetData))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                <h3>@localizer["CuesheetData"]</h3>
                                <div>
                                    @((MarkupString)chevronCuesheetData)
                                </div>
                            </Blazorise.Link>
                        </CollapseHeader>
                        <CollapseBody>
                            <Tooltip Placement="Placement.Top" Text="@cuesheet.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["CDArtist"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.Artist))" Class="@GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)))" Placeholder="@localizer["EnterCDartisthere"]" @bind-Text="cuesheet.Artist" ChangeTextOnKeyPress="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="Placement.Top" Text="@cuesheet.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["CDTitle"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.Title))" Class="@GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)))" Placeholder="@localizer["EnterCDtitlehere"]" @bind-Text="cuesheet.Title" ChangeTextOnKeyPress="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="Placement.Top" Text="@cuesheet.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.AudioFile)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["AudioFile"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        @if (cuesheet.AudioFile == null)
                                        {
                                            var audioFileCSSClass = String.Format("form-control {0}", GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.AudioFile))));
                                            <InputFile class="@audioFileCSSClass" id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.AudioFile))" accept="@String.Join(",", AudioFile.MimeTypes.Select(x => x.Value))" OnChange="OnAudioFileChanged"></InputFile>
                                        }
                                        else
                                        {
                                            <Addons>
                                                <Addon AddonType="AddonType.Body">
                                                    <TextEdit Disabled="true" Text="@cuesheet.AudioFile.FileName" />
                                                </Addon>
                                                <Addon AddonType="AddonType.End">
                                                    <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeAudioFileClicked">@localizer["Change"]</Button>
                                                </Addon>
                                            </Addons>
                                        }
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="Placement.Top" Text="@cuesheet.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.CDTextfile)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["CDTextfile"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        @if (cuesheet.CDTextfile == null)
                                        {
                                            var cdTextFileCSSClass = String.Format("form-control {0}", GetCSSClassAlert(cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.CDTextfile))));
                                            <InputFile class="@cdTextFileCSSClass" id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.CDTextfile))" accept="@CDTextfile.FileExtension" OnChange="OnCDTextfileChanged"></InputFile>
                                        }
                                        else
                                        {
                                            <Addons>
                                                <Addon AddonType="AddonType.Body">
                                                    <TextEdit Disabled="true" Text="@cuesheet.CDTextfile.FileName" />
                                                </Addon>
                                                <Addon AddonType="AddonType.End">
                                                    <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeCDTextfileClicked">@localizer["Change"]</Button>
                                                </Addon>
                                            </Addons>
                                        }
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="Placement.Top" Text="@cuesheet.CatalogueNumber.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(CatalogueNumber), nameof(CatalogueNumber.Value)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@localizer["CatalogueNumber"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is7.OnMobile">
                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(cuesheet.CatalogueNumber, nameof(CatalogueNumber.Value))" Class="@GetCSSClassAlert(cuesheet.CatalogueNumber, String.Format("{0}.{1}", nameof(CatalogueNumber), nameof(CatalogueNumber.Value)))" Placeholder="@localizer["EnterCatalogueNumberHere"]" @bind-Text="cuesheet.CatalogueNumber.Value" ChangeTextOnKeyPress="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="@cuesheetTracksVisible">
                        <CollapseHeader>
                            <Blazorise.Link Clicked="(() => HeaderClicked(ref cuesheetTracksVisible, ref chevronCuesheetTracks))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                <Heading Size="HeadingSize.Is3">@localizer["CuesheetTracks"]</Heading>
                                <div>
                                    @((MarkupString)chevronCuesheetTracks)
                                </div>
                            </Blazorise.Link>
                        </CollapseHeader>
                        <CollapseBody>
                            <Table Bordered="true" Responsive="true" Narrow="true">
                                <TableHeader ThemeContrast="ThemeContrast.Light">
                                    <TableRow>
                                        <TableHeaderCell>@localizer["TrackTableControls"]</TableHeaderCell>
                                        <TableHeaderCell>#</TableHeaderCell>
                                        <TableHeaderCell>@localizer["Artist"]</TableHeaderCell>
                                        <TableHeaderCell>@localizer["Title"]</TableHeaderCell>
                                        <TableHeaderCell>@localizer["Begin"]</TableHeaderCell>
                                        <TableHeaderCell>@localizer["End"]</TableHeaderCell>
                                        <TableHeaderCell>@localizer["Length"]</TableHeaderCell>
                                        <TableHeaderCell>@localizer["Notifications"]</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (var track in cuesheet.Tracks)
                                    {
                                        <TableRow Color="((audioPlayer.CurrentlyPlayingTrack != null) && (audioPlayer.CurrentlyPlayingTrack == track)) ? Color.Primary : Color.None">
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Buttons>
                                                        <Tooltip Placement="Placement.Right" Text="@localizer["StartPlaybackThisTrack"]">
                                                            <Button Size="Size.Small" Color="Color.Info" Disabled="!audioPlayer.PlaybackPossible" Clicked="() => audioPlayer.OnPlayTrackClicked(track)">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-btn" viewBox="0 0 16 16">
                                                                    <path fill-rule="evenodd" d="M14 3H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z" />
                                                                    <path fill-rule="evenodd" d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z" />
                                                                </svg>
                                                            </Button>
                                                        </Tooltip>
                                                        <Tooltip Placement="Placement.Right" Text="@localizer["MoveTrackUpTooltip"]">
                                                            <Button Size="Size.Small" Color="Color.Secondary" Disabled="!cuesheet.MoveTrackPossible(track, MoveDirection.Up)" Clicked="() => cuesheet.MoveTrack(track, MoveDirection.Up)">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-up" viewBox="0 0 16 16">
                                                                    <path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5zm-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z" />
                                                                </svg>
                                                            </Button>
                                                        </Tooltip>
                                                        <Tooltip Placement="Placement.Right" Text="@localizer["DeleteTrackTooltip"]">
                                                            <Button Size="Size.Small" Color="Color.Warning" Clicked="() => cuesheet.RemoveTrack(track)">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                                                    <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                                                </svg>
                                                            </Button>
                                                        </Tooltip>
                                                        <Tooltip Placement="Placement.Right" Text="@localizer["MoveTrackDownTooltip"]">
                                                            <Button Size="Size.Small" Color="Color.Secondary" Disabled="!cuesheet.MoveTrackPossible(track, MoveDirection.Down)" Clicked="() => cuesheet.MoveTrack(track, MoveDirection.Down)">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                                                                    <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5zM8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6z" />
                                                                </svg>
                                                            </Button>
                                                        </Tooltip>
                                                    </Buttons>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    @track.Position
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Tooltip Placement="Placement.Bottom" Text="@track.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))">
                                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Artist))" Class="@GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" @bind-Text="track.Artist" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Tooltip Placement="Placement.Bottom" Text="@track.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))">
                                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Title))" Class="@GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" @bind-Text="track.Title" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Tooltip Placement="Placement.Bottom" Text="@track.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))">
                                                        <!--TODO: Use pattern-->
                                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Begin))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" Text="@GetTimespanAsString(track.Begin)" TextChanged="(value) => OnTimespanTextChanged(x => track.Begin = x, value)" ChangeTextOnKeyPress="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Tooltip Placement="Placement.Bottom" Text="@track.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))">
                                                        <!--TODO: Use pattern-->
                                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.End))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" Text="@GetTimespanAsString(track.End)" TextChanged="(value) => OnTimespanTextChanged(x => track.End = x, value)" ChangeTextOnKeyPress="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    <Tooltip Placement="Placement.Bottom" Text="@track.GetValidationErrors(localizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))">
                                                        <!--TODO: Use pattern-->
                                                        <TextEdit id="@cuesheetController.GetFieldIdentifier(track, nameof(Track.Length))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" Text="@GetTimespanAsString(track.Length)" TextChanged="(value) => OnTimespanTextChanged(x => track.Length = x, value)" ChangeTextOnKeyPress="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Tooltip Placement="Placement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"CurrentTrackIsPlayed")">
                                                    @((MarkupString)track.GetValidationErrors(localizer))
                                                </Tooltip>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                            <Button id="@cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.Tracks))" Color="Color.Primary" Clicked="() => cuesheet.AddTrack(new Track())">@localizer["Addnewtrack"]</Button>
                            <Button Color="Color.Warning" Clicked="OnDeleteAllTracksClicked">@localizer["DeleteAllTracks"]</Button>
                        </CollapseBody>
                    </Collapse>
                </Accordion>

                <br />

                <AudioPlayer @ref="audioPlayer" Cuesheet="@cuesheet" CurrentlyPlayingTrackChanged="() => StateHasChanged()" />
            </Column>
            <Column ColumnSize="ColumnSize.IsQuarter" Display="@DisplayProcessingHints">
                <Card>
                    <CardHeader>
                        <CardTitle Size="3">@localizer["ProcessingHints"]</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Paragraph>@localizer["ValidationDescription"]</Paragraph>
                        <Accordion>
                            @if (GetValidationErrors(ValidationErrorFilterType.WarningOnly).Count() > 0)
                            {
                                <Collapse Visible="processingHintsWarningVisible">
                                    <CollapseHeader>
                                        <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsWarningVisible, ref chevronProcessingHintsWarning))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                            <Heading Size="HeadingSize.Is3">@localizer["Warnings"]</Heading>
                                            <div>
                                                @((MarkupString)chevronProcessingHintsWarning)
                                            </div>
                                        </Blazorise.Link>
                                    </CollapseHeader>
                                    <CollapseBody>
                                        @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.WarningOnly))
                                        {
                                            var functionName = "focusElement";
                                            <Blazorise.Link Clicked="(() => JSRuntime.InvokeVoidAsync(functionName, cuesheetController.GetFieldIdentifier(validationError.FieldReference)))" Style="cursor:pointer">
                                                <Alert Color="Color.Warning" Visible="true">
                                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                                    {
                                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(localizer)</Paragraph>
                                                    }
                                                    else
                                                    {
                                                        <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(localizer)</Paragraph>
                                                    }
                                                </Alert>
                                            </Blazorise.Link>
                                        }
                                    </CollapseBody>
                                </Collapse>
                            }
                            @if (GetValidationErrors(ValidationErrorFilterType.ErrorOnly).Count() > 0)
                            {
                                <Collapse Visible="processingHintsErrorVisible">
                                    <CollapseHeader>
                                        <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsErrorVisible, ref chevronProcessingHintsError))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                                            <Heading Size="HeadingSize.Is3">@localizer["Errors"]</Heading>
                                            <div>
                                                @((MarkupString)chevronProcessingHintsError)
                                            </div>
                                        </Blazorise.Link>
                                    </CollapseHeader>
                                    <CollapseBody>
                                        @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.ErrorOnly))
                                        {
                                            var functionName = "focusElement";
                                            <Blazorise.Link Clicked="(() => JSRuntime.InvokeVoidAsync(functionName, cuesheetController.GetFieldIdentifier(validationError.FieldReference)))" Style="cursor:pointer">
                                                <Alert Color="Color.Danger" Visible="true">
                                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                                    {
                                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(localizer)</Paragraph>
                                                    }
                                                    else
                                                    {
                                                        <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(localizer)</Paragraph>
                                                    }
                                                </Alert>
                                            </Blazorise.Link>
                                        }
                                    </CollapseBody>
                                </Collapse>
                            }
                        </Accordion>
                    </CardBody>
                </Card>
            </Column>
        </Row>

    </LayoutContent>
</Layout>

<ModalDialog @ref="modalDialog" />

<Modal @ref="modalTextImport">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>
                @localizer["TextImportAssistance"]
            </ModalTitle>
            <CloseButton Clicked="TextImportAbortClicked" />
        </ModalHeader>
        <ModalBody>
            @if (textImportFile != null)
            {
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Placement="Placement.Top" Text="@localizer["EnterTextImportSchemeTooltip"]">
                            @localizer["TextImportScheme"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <!--TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664 -->
                                <TextEdit Placeholder="@localizer["EnterTextImportSchemeHere"]" @bind-Text="textImportFile.ImportScheme" data-toggle="tooltip" data-placement="top" title="@localizer["EnterTextImportSchemeTooltip"]" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @localizer["SelectPlaceholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in TextImportFile.AvailableSchemes)
                                        {
                                            <DropdownItem Clicked="() => textImportFile.ImportScheme += availableScheme.Value">@localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if (textImportFile.AnalyseException != null)
                {
                    <Alert Color="Color.Danger" Visible="true">
                        <AlertDescription>
                            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-exclamation-octagon" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1L1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z" />
                                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z" />
                            </svg>
                        </AlertDescription>
                        <AlertMessage>@localizer["ErrorDuringTextImport"] : @textImportFile.AnalyseException.Message</AlertMessage>
                    </Alert>
                }
                <Table Bordered="true" Responsive="true" Narrow="true">
                    <TableHeader ThemeContrast="ThemeContrast.Light">
                        <TableRow>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>@localizer["Artist"]</TableHeaderCell>
                            <TableHeaderCell>@localizer["Title"]</TableHeaderCell>
                            <TableHeaderCell>@localizer["Begin"]</TableHeaderCell>
                            <TableHeaderCell>@localizer["End"]</TableHeaderCell>
                            <TableHeaderCell>@localizer["Length"]</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var track in textImportFile.Tracks)
                        {
                            <TableRow>
                                <TableRowCell>@track.Position</TableRowCell>
                                <TableRowCell>@track.Artist</TableRowCell>
                                <TableRowCell>@track.Title</TableRowCell>
                                <TableRowCell>@track.Begin</TableRowCell>
                                <TableRowCell>@track.End</TableRowCell>
                                <TableRowCell>@track.Length</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            }
        </ModalBody>
        <ModalFooter>
            <Tooltip Placement="Placement.Top" Text="@GetLocalizedString(!((textImportFile != null) && (textImportFile.AnalyseException == null)), "ImportNotPossible")">
                <Button Color="Color.Primary" Disabled="!((textImportFile != null) && (textImportFile.AnalyseException == null))" Clicked="TextImportStartClicked">@localizer["StartTrackImport"]</Button>
            </Tooltip>
            <Button Color="Color.Secondary" @onclick="TextImportAbortClicked">@localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalExportProfiles">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>
                @localizer["ExportProfiles"]
            </ModalTitle>
            <CloseButton @onclick="ModalExportProfilesCloseClicked" />
        </ModalHeader>
        <ModalBody>
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldLabel ColumnSize="ColumnSize.Is3">@localizer["SelectExportProfile"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <SelectList TItem="SelectExportProfileModel" TValue="Guid" Data="@exportProfileModels" TextField="@((item)=>item.ExportProfile.Name)" ValueField="@((item)=>item.Id)" SelectedValue="selectedExportProfileId" SelectedValueChanged="SelectedExportProfileChanged" />
                </FieldBody>
            </Field>
            <Button Color="Color.Primary" Clicked="OnAddNewExportProfileClicked">@localizer["AddNewExportProfile"]</Button>
            <Button Color="Color.Danger" Clicked="OnDeleteExportProfileClicked">@localizer["DeleteExportProfile"]</Button>
            <Divider />
            @if (SelectedExportProfile != null)
            {
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@localizer["ExportProfileName"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@localizer["EnterExportProfileNameHere"]" @bind-Text="SelectedExportProfile.Name" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@localizer["ExportProfileFilename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@localizer["EnterExportProfileFilenameHere"]" @bind-Text="SelectedExportProfile.FileName" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Placement="Placement.Top" Text="@localizer["EnterExportSchemeHeadHereTooltip"]">
                            @localizer["ExportProfileSchemeHead"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <!--TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664 -->
                                <TextEdit Placeholder="@localizer["EnterExportSchemeHeadHere"]" @bind-Text="SelectedExportProfile.SchemeHead.Scheme" data-toggle="tooltip" data-placement="top" title="@localizer["EnterExportSchemeHeadHereTooltip"]" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @localizer["SelectPlaceholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in ExportScheme.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeHead.Scheme += availableScheme.Value">@localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeHead.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@localizer["ExportProfileSchemeHeadValidationErrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeHead.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(localizer)</AlertMessage>
                        </Alert>
                    }
                }
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Placement="Placement.Top" Text="@localizer["EnterExportSchemeTrackHereTooltip"]">
                            @localizer["ExportProfileSchemeTrack"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <!--TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664 -->
                                <TextEdit Placeholder="@localizer["EnterExportSchemeTrackHere"]" @bind-Text="SelectedExportProfile.SchemeTracks.Scheme" data-toggle="tooltip" data-placement="top" title="@localizer["EnterExportSchemeTrackHereTooltip"]" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @localizer["SelectPlaceholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in ExportScheme.AvailableTrackSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeTracks.Scheme += availableScheme.Value">@localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeTracks.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@localizer["ExportProfileSchemeTrackValidationErrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeTracks.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(localizer)</AlertMessage>
                        </Alert>
                    }
                }
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Placement="Placement.Top" Text="@localizer["EnterExportSchemeFooterHereTooltip"]">
                            @localizer["ExportProfileSchemeFooter"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <!--TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664 -->
                                <TextEdit Placeholder="@localizer["EnterExportSchemeFooterHere"]" @bind-Text="SelectedExportProfile.SchemeFooter.Scheme" data-toggle="tooltip" data-placement="top" title="@localizer["EnterExportSchemeFooterHereTooltip"]" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @localizer["SelectPlaceholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in ExportScheme.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeFooter.Scheme += availableScheme.Value">@localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeFooter.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@localizer["ExportProfileSchemeFooterValidationErrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeFooter.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(localizer)</AlertMessage>
                        </Alert>
                    }
                }
            }
        </ModalBody>
        <ModalFooter>
            <Tooltip Placement="Placement.Top" Text="@GetLocalizedString(!((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true)), "ExportProfileIsNotExportable")">
                <Button Color="Color.Primary" Disabled="!((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true))" Clicked="OnDownloadExportProfileClicked">@localizer["DownloadExport"]</Button>
            </Tooltip>
            <Button Color="Color.Secondary" @onclick="ModalExportProfilesCloseClicked">@localizer["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalDownloadCuesheet">
    <ModalBackdrop />
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>
                @localizer["Downloadcuesheet"]
            </ModalTitle>
            <CloseButton Clicked="() => modalDownloadCuesheet.Hide()" />
        </ModalHeader>
        <ModalBody>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is3">@localizer["Filename"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <TextEdit @bind-Text="optionsController.Options.CuesheetFileName" />
                </FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="DownloadCuesheetFileClicked" Disabled="!cuesheet.CanWriteCuesheetFile">@localizer["Downloadcuesheet"]</Button>
            <Button Color="Color.Secondary" Clicked="() => modalDownloadCuesheet.Hide()">@localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalOptions">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@localizer["Options"]</ModalTitle>
            <CloseButton Clicked="() => modalOptions.Hide()" />
        </ModalHeader>
        <ModalBody>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is5">@localizer["CultureSetting"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is7">
                    <Select TValue="String" @bind-SelectedValue="@optionsController.Options.CultureName">
                        @foreach (var culture in OptionsController.AvailableCultures)
                        {
                            <SelectItem Value="@culture">@culture.DisplayName</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is5">@localizer["CuesheetFileName"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is7">
                    <TextEdit @bind-Text="optionsController.Options.CuesheetFileName" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is5">@localizer["TextImportScheme"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is7">
                    <TextEdit @bind-Text="optionsController.Options.TextImportScheme" />
                </FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="OnSaveOptionsClicked">@localizer["Save"]</Button>
            <Button Color="Color.Warning" Clicked="OnReloadOptionsClicked">@localizer["ReloadOptions"]</Button>
            <Button Color="Color.Danger" Clicked="OnResetOptionsClicked">@localizer["Reset"]</Button>
            <Button Color="Color.Secondary" Clicked="() => modalOptions.Hide()">@localizer["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    public class SelectExportProfileModel
    {
        public Guid Id { get; private set; }
        public ExportProfile ExportProfile { get; set; }

        public SelectExportProfileModel(ExportProfile exportProfile)
        {
            if (exportProfile == null)
            {
                throw new ArgumentNullException(nameof(exportProfile));
            }
            Id = Guid.NewGuid();
            ExportProfile = exportProfile;
        }
    }

    public IFluentDisplay DisplayProcessingHints
    {
        get
        {
            if (GetValidationErrors(ValidationErrorFilterType.All).Count > 0)
            {
                return Display.Always;
            }
            else
            {
                return Display.None;
            }
        }
    }

    private Boolean cuesheetDataVisible = true;
    private Boolean cuesheetTracksVisible = true;
    private Boolean processingHintsWarningVisible = true;
    private Boolean processingHintsErrorVisible = true;
    private Boolean importVisible = false;
    private Boolean dropFilesVisible = true;

    private String invalidFileName;

    private String chevronCuesheetData = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronCuesheetTracks = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronProcessingHintsWarning = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronProcessingHintsError = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronImport = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
    private String chevronDropFiles = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";

    private Cuesheet cuesheet = new Cuesheet();
    private TextImportFile textImportFile;

    private IReadOnlyCollection<SelectExportProfileModel> exportProfileModels;
    private Guid selectedExportProfileId;

    private ModalDialog modalDialog;
    private Alert alertInvalidFile;

    private Modal modalTextImport;
    private Modal modalExportProfiles;
    private Modal modalDownloadCuesheet;
    private Modal modalOptions;
    private AudioPlayer audioPlayer;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("OnInitializedAsync");
        var dotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotNetReference", dotNetReference);

        if (exportProfileModels == null)
        {
            exportProfileModels = optionsController.Options.ExportProfiles.Select(x => new SelectExportProfileModel(x)).ToList().AsReadOnly();
            selectedExportProfileId = exportProfileModels.First().Id;
        }
    }

    private void HeaderClicked(ref Boolean visible, ref String chevron)
    {
        visible = !visible;
        SwitchChevron(visible, ref chevron);
    }

    private void SwitchChevron(Boolean chevronUp, ref String chevron)
    {
        if (chevronUp == true)
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
        }
        else
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
        }
    }

    private void OnDeleteAllTracksClicked()
    {
        Logger.LogInformation("OnDeleteAllTracksClicked");
        //Display a confirm warning
        modalDialog.Title = localizer["ConfirmRequired"];
        modalDialog.Text = localizer["ConfirmDeleteOfAllTracks"];
        modalDialog.ModalSize = ModalSize.Small;
        void deleteTracksDelegate(object sender, EventArgs args)
        {
            Logger.LogInformation("deleteTracksDelegate");
            cuesheet.RemoveAllTracks();
            modalDialog.Confirmed -= deleteTracksDelegate;
            StateHasChanged();
        };
        modalDialog.Confirmed += deleteTracksDelegate;
        modalDialog.ShowModal();
    }

    private void RestartCuesheetClicked()
    {
        Logger.LogInformation("RestartCuesheetClicked clicked");
        //Display a confirm warning
        modalDialog.Title = localizer["ConfirmRequired"];
        modalDialog.Text = localizer["ConfirmResetCuesheet"];
        modalDialog.ModalSize = ModalSize.Small;
        void newCuesheetDelegate(object sender, EventArgs args)
        {
            Logger.LogInformation("newCuesheetDelegate");
            cuesheet = new Cuesheet();
            modalDialog.Confirmed -= newCuesheetDelegate;
            StateHasChanged();
        };
        modalDialog.Confirmed += newCuesheetDelegate;
        modalDialog.ShowModal();
    }

    private String GetCSSClassAlert(Validateable validateable, String property)
    {
        String cssClass = String.Empty;
        var validationErrors = validateable.GetValidationErrorsFiltered(property);
        if (validationErrors.Count() >= 1)
        {
            if (validationErrors.Count() > 1)
            {
                if (cuesheet.GetValidationErrorsFiltered(property, Model.Entity.ValidationErrorFilterType.ErrorOnly).Count() >= 1)
                {
                    cssClass = "alert-danger";
                }
                else
                {
                    cssClass = "alert-warning";
                }
            }
            else
            {
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Error)
                {
                    cssClass = "alert-danger";
                }
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Warning)
                {
                    cssClass = "alert-warning";
                }
            }
        }
        return cssClass;
    }

    private IReadOnlyCollection<AudioCuesheetEditor.Model.Entity.ValidationError> GetValidationErrors(ValidationErrorFilterType validationErrorFilterType)
    {
        List<AudioCuesheetEditor.Model.Entity.ValidationError> validationErrors = cuesheet.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType).ToList();
        foreach (var track in cuesheet.Tracks)
        {
            validationErrors.AddRange(track.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType));
        }
        return validationErrors.AsReadOnly();
    }

    private async Task OnInputFileTextImportChange(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("OnInputFileTextImportChange with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, TextImportFile.MimeType, TextImportFile.FileExtension) == true)
            {
                var stream = e.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                textImportFile = new TextImportFile(memoryStream);
                textImportFile.ImportScheme = optionsController.Options.TextImportScheme;
                modalTextImport.Show();
            }
            else
            {
                modalDialog.Title = localizer["Error"];
                modalDialog.Text = String.Format(localizer["FileHasInvalidMimeType"], e.File.Name, localizer["TextfileImport"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private void TextImportAbortClicked()
    {
        Logger.LogInformation("TextImportAbortClicked");
        modalTextImport.Hide();
        textImportFile = null;
    }

    private async Task TextImportStartClicked()
    {
        Logger.LogInformation("TextImportStartClicked with textImportFile = {0}", textImportFile);
        if ((textImportFile != null) && (textImportFile.IsValid == true))
        {
            optionsController.Options.TextImportScheme = textImportFile.ImportScheme;
            await optionsController.SaveOptions();
            cuesheet.Import(textImportFile);
            modalTextImport.Hide();
            textImportFile = null;
        }
    }

    private async Task OnInputFileCuesheetChange(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("OnInputFileCuesheetChange with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, CuesheetFile.MimeType, CuesheetFile.FileExtension) == true)
            {
                var stream = e.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                //Display a confirm warning
                modalDialog.Title = localizer["ConfirmRequired"];
                modalDialog.Text = localizer["ConfirmImportCuesheet"];
                modalDialog.ModalSize = ModalSize.Small;
                void importCuesheetDelegate(object sender, EventArgs args)
                {
                    cuesheet = CuesheetFile.ImportCuesheet(memoryStream);
                    modalDialog.Confirmed -= importCuesheetDelegate;
                    StateHasChanged();
                };
                modalDialog.Confirmed += importCuesheetDelegate;
                modalDialog.ShowModal();
            }
            else
            {
                modalDialog.Title = localizer["Error"];
                modalDialog.Text = String.Format(localizer["FileHasInvalidMimeType"], e.File.Name, localizer["CuesheetfileImport"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task ModalExportProfilesCloseClicked()
    {
        Logger.LogInformation("ModalExportProfilesCloseClicked");
        await SaveExportProfiles();
        modalExportProfiles.Hide();
    }

    private void SelectedExportProfileChanged(Guid newValue)
    {
        Logger.LogInformation("SelectedExportProfileChanged with {0}", newValue);
        selectedExportProfileId = newValue;
        StateHasChanged();
    }

    private ExportProfile SelectedExportProfile
    {
        get
        {
            if ((exportProfileModels != null) && (selectedExportProfileId != Guid.Empty))
            {
                var exportProfile = exportProfileModels.FirstOrDefault(x => x.Id == selectedExportProfileId);
                if (exportProfile != null)
                {
                    return exportProfile.ExportProfile;
                }
            }
            return null;
        }
    }

    private async Task OnDownloadExportProfileClicked()
    {
        Logger.LogInformation("OnDownloadExportProfileClicked with SelectedExportProfile = {0}", SelectedExportProfile);
        if ((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true))
        {
            await SaveExportProfiles();
            await BlazorDownloadFileService.DownloadFile(SelectedExportProfile.FileName, SelectedExportProfile.GenerateExport(cuesheet), "text/plain");
        }
    }

    private void OnAddNewExportProfileClicked()
    {
        Logger.LogInformation("OnAddNewExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.Add(new SelectExportProfileModel(new ExportProfile()));
        exportProfileModels = list.AsReadOnly();
        selectedExportProfileId = list.Last().Id;
    }

    private void OnDeleteExportProfileClicked()
    {
        Logger.LogInformation("OnDeleteExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.RemoveAll(x => x.Id == selectedExportProfileId);
        exportProfileModels = list.AsReadOnly();
        if (exportProfileModels.Count > 0)
        {
            selectedExportProfileId = exportProfileModels.First().Id;
        }
    }

    [JSInvokable()]
    public void NotifyError(string error)
    {
        //TODO: Remove this handling, when ASP.CORE 6 has global exception handling (https://github.com/dotnet/aspnetcore/issues/13452)
        ErrorReport.Exception = error;
        navigationManager.NavigateTo("ErrorReport");
    }

    private async Task OnDropInputfilesChanged(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("OnDropInputfilesChanged with {0}", e);
        alertInvalidFile.Hide();
        Boolean importedAllFiles = true;
        foreach (var file in e.GetMultipleFiles())
        {
            Logger.LogInformation("file = {0}", file);
            Boolean recognized = false;
            var files = new List<IBrowserFile>();
            files.Add(file);
            if (CuesheetController.CheckFileMimeType(file, TextImportFile.MimeType, TextImportFile.FileExtension) == true)
            {
                recognized = true;
                await OnInputFileTextImportChange(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (CuesheetController.CheckFileMimeType(file, CuesheetFile.MimeType, CuesheetFile.FileExtension) == true)
            {
                recognized = true;
                await OnInputFileCuesheetChange(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (CuesheetController.CheckFileMimeType(file, AudioFile.MimeTypes) == true)
            {
                recognized = true;
                await SetAudioFile(file, "dropInputfiles");
            }
            if (CuesheetController.CheckFileMimeType(file, CDTextfile.MimeType, CDTextfile.FileExtension) == true)
            {
                recognized = true;
                OnCDTextfileChanged(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (recognized == false)
            {
                invalidFileName = e.File.Name;
                alertInvalidFile.Show();
                importedAllFiles = false;
            }
        }
        if (importedAllFiles == true)
        {
            //Hide the import
            HeaderClicked(ref dropFilesVisible, ref chevronDropFiles);
            importVisible = false;
            SwitchChevron(importVisible, ref chevronImport);
        }
    }

    private async Task OnChangeAudioFileClicked()
    {
        Logger.LogInformation("OnChangeAudioFileClicked");
        cuesheet.AudioFile = null;
        StateHasChanged();
        await Task.Delay(1);
        await JSRuntime.InvokeVoidAsync("triggerClick", cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.AudioFile)));
    }

    private void OnRestartCompleteApplicationClicked()
    {
        Logger.LogInformation("OnRestartCompleteApplicationClicked");
        //Display a confirm warning
        modalDialog.Title = localizer["ConfirmRequired"];
        modalDialog.Text = localizer["ConfirmRestartOfApplication"];
        modalDialog.ModalSize = ModalSize.Small;
        void restartApplicationDelegate(object sender, EventArgs args)
        {
            Logger.LogInformation("restartApplicationDelegate");
            modalDialog.Confirmed -= restartApplicationDelegate;
            navigationManager.NavigateTo(navigationManager.Uri, true);
        };
        modalDialog.Confirmed += restartApplicationDelegate;
        modalDialog.ShowModal();
    }

    private void OnResetCompleteApplicationClicked()
    {
        Logger.LogInformation("OnResetCompleteApplicationClicked");
        //Display a confirm warning
        modalDialog.Title = localizer["ConfirmRequired"];
        modalDialog.Text = localizer["ConfirmResetOfApplication"];
        modalDialog.ModalSize = ModalSize.Small;
        modalDialog.Confirmed += OnRestartApplicationConfirmed;
        modalDialog.ShowModal();
    }

    private async void OnRestartApplicationConfirmed(object sender, EventArgs args)
    {
        Logger.LogInformation("OnRestartApplicationConfirmed");
        await JSRuntime.InvokeVoidAsync("resetLocalStorage");
        modalDialog.Confirmed -= OnRestartApplicationConfirmed;
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    private String GetLocalizedString(Boolean expressionToCheck, String localizedStringName)
    {
        if (expressionToCheck == true)
        {
            return localizer[localizedStringName];
        }
        else
        {
            return null;
        }
    }

    private String GetTimespanAsString(TimeSpan? timeSpan)
    {
        String resultString = null;
        if ((timeSpan != null) && (timeSpan.HasValue))
        {
            resultString = timeSpan.Value.ToString();
        }
        return resultString;
    }

    private void OnTimespanTextChanged(Action<TimeSpan?> setAction, String value)
    {
        TimeSpan? result = null;
        if (TimeSpan.TryParse(value, out TimeSpan parsedTimeSpan) == true)
        {
            result = parsedTimeSpan;
        }
        setAction(result);
    }

    private async Task OnAudioFileChanged(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("OnAudioFileChanged with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, AudioFile.MimeTypes) == true)
            {
                await SetAudioFile(e.File, cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.AudioFile)));
            }
            else
            {
                modalDialog.Title = localizer["Error"];
                modalDialog.Text = String.Format(localizer["FileHasInvalidMimeType"], e.File.Name, localizer["AudioFile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task SetAudioFile(IBrowserFile browserFile, String inputDomId)
    {
        Logger.LogInformation("SetAudioFile with {0}, {1}", browserFile, inputDomId);
        if (browserFile != null)
        {
            var audioFileObjectURL = await JSRuntime.InvokeAsync<String>("getObjectURL", inputDomId);
            cuesheet.AudioFile = new AudioFile(browserFile.Name, audioFileObjectURL, browserFile.ContentType);
        }
        else
        {
            cuesheet.AudioFile = null;
        }
    }

    private void OnCDTextfileChanged(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("OnCDTextfileChanged with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, CDTextfile.MimeType, CDTextfile.FileExtension) == true)
            {
                cuesheet.CDTextfile = new CDTextfile(e.File.Name);
            }
            else
            {
                modalDialog.Title = localizer["Error"];
                modalDialog.Text = String.Format(localizer["FileHasInvalidMimeType"], e.File.Name, localizer["CDTextfile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task OnChangeCDTextfileClicked()
    {
        Logger.LogInformation("OnChangeCDTextfileClicked");
        cuesheet.CDTextfile = null;
        StateHasChanged();
        await Task.Delay(1);
        await JSRuntime.InvokeVoidAsync("triggerClick", cuesheetController.GetFieldIdentifier(cuesheet, nameof(Cuesheet.CDTextfile)));
    }

    private async Task DownloadCuesheetFileClicked()
    {
        Logger.LogInformation("DownloadCuesheetFileClicked");
        var cuesheetFile = new CuesheetFile(cuesheet);
        var fileData = cuesheetFile.GenerateCuesheetFile();
        await optionsController.SaveOptions();
        await BlazorDownloadFileService.DownloadFile(optionsController.Options.CuesheetFileName, fileData, "text/plain");
    }

    private async Task SaveExportProfiles()
    {
        Logger.LogInformation("SaveExportProfiles");
        if (exportProfileModels != null)
        {
            optionsController.Options.ExportProfiles = exportProfileModels.Select(x => x.ExportProfile).ToList().AsReadOnly();
            await optionsController.SaveOptions();
        }
    }

    private async Task OnSaveOptionsClicked()
    {
        Logger.LogInformation("OnSaveOptionsClicked");
        await optionsController.SaveOptions();
        modalOptions.Hide();
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    private async Task OnReloadOptionsClicked()
    {
        Logger.LogInformation("OnReloadOptionsClicked");
        await optionsController.LoadOptions();
    }

    private async Task OnResetOptionsClicked()
    {
        Logger.LogInformation("OnResetOptionsClicked");
        await JSRuntime.InvokeVoidAsync("resetLocalStorage");
        await optionsController.LoadOptions();
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }
}