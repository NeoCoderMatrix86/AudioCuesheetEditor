<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/"

@inherits BaseLocalizedComponent

@inject SessionStateContainer _sessionStateContainer
@inject IStringLocalizer<Index> _localizer
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

<MudTabs Rounded ApplyEffectsToContainer Outlined Color="Color.Success" ActivePanelIndex="(int)(viewOptions != null ? viewOptions.ActiveTab : ViewMode.DetailView)" ActivePanelIndexChanged="ActiveTabIndexChanged">
    <MudTabPanel Text="@_localizer["Detail view"]" Icon="@Icons.Material.Outlined.Edit">
        <CascadingValue Value="_sessionStateContainer.Cuesheet">
            <ViewModeFull />
        </CascadingValue>
    </MudTabPanel>
    <MudTabPanel Text="@_localizer["Record view"]" Icon="@Icons.Material.Outlined.Mic">
        <CascadingValue Value="_sessionStateContainer.Cuesheet">
            <ViewModeRecord />
        </CascadingValue>
    </MudTabPanel>
    <MudTabPanel Text="@_localizer["Import view"]" Icon="@Icons.Material.Outlined.ImportExport">
        <CascadingValue Value="_sessionStateContainer.ImportCuesheet">
            <ViewModeImport />
        </CascadingValue>
    </MudTabPanel>
</MudTabs>

@code{
    //TODO: Reset of cuesheet and reset of application
    ViewOptions? viewOptions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        viewOptions = await _localStorageOptionsProvider.GetOptions<ViewOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
        StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
        }
    }

    async Task ActiveTabIndexChanged(int tabIndex)
    {
        var activeViewMode = (ViewMode)tabIndex;
        if (viewOptions != null)
        {
            viewOptions.ActiveTab = activeViewMode;
        }
        await _localStorageOptionsProvider.SaveOptionsValue<ViewOptions>(x => x.ActiveTab, activeViewMode);
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions options)
    {
        if (options is ViewOptions viewOption)
        {
            viewOptions = viewOption;
        }
    }
}