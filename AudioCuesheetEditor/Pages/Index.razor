<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@page "/"
@inject IJSRuntime _jsRuntime
@inject ITextLocalizer<Index> _localizer
@inject CuesheetController _cuesheetController
@inject NavigationManager _navigationManager
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject ILogger<Index> _logger
@inject HotKeys _hotKeys
@inject HttpClient _httpClient
@inject SessionStateContainer _sessionStateContainer
@inject ITextLocalizerService _localizationService
@inject TraceChangeManager _traceChangeManager

<Row Margin="Margin.Is2">
    @switch (_sessionStateContainer.CurrentViewMode)
    {
        case ViewMode.ViewModeRecord:
            <ViewModeRecord ValidationMessageLocalizer="ValidationMessageLocalizer" />
            break;
        case ViewMode.ViewModeFull:
            <Column>
                <Accordion>
                    <Collapse Visible="dropFilesVisible">
                        <CollapseHeader>
                            <Button Clicked="(() => dropFilesVisible = !dropFilesVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Drop files"]</Heading></Button>                                    
                        </CollapseHeader>
                        <CollapseBody>
                            <div class="fileUploadDragNDrop mb-3" ondragover="dragOver(event, this)" ondragleave="dragLeave(event, this)" ondrop="dropFiles(event, this, 'dropInputfiles')">
                                <svg class="fileUploadDragNDropIcon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z"></path></svg>
                                <InputFile id="dropInputfiles" class="inputfile" multiple OnChange="OnDropInputfilesChanged"></InputFile>
                                <label for="dropInputfiles">@((MarkupString)(_localizer["Choose file or drag it here"].ToString()))</label>
                            </div>
                            <Alert @ref="alertInvalidFile" Color="Color.Danger">
                                <AlertMessage>@_localizer["Invalid file"]</AlertMessage>
                                <AlertDescription>@String.Format(_localizer["You dropped an invalid file that can not be processed"], invalidFileName)</AlertDescription>
                            </Alert>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="importVisible">
                        <CollapseHeader>
                            <Button Clicked="(() => importVisible = !importVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Import from existing files"]</Heading></Button>
                        </CollapseHeader>
                        <CollapseBody>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Import textfile tooltip"]">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Textfile"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <InputFile class="form-control" accept="@TextImportFile.MimeType" OnChange="OnInputFileTextImportChange"></InputFile>
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Import cuesheet tooltip"]">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Cuesheet"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <InputFile class="form-control" accept="@Cuesheetfile.FileExtension" OnChange="OnInputFileCuesheetChange"></InputFile>
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Import project tooltip"]">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Project filename"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <InputFile class="form-control" accept="@Projectfile.FileExtension" OnChange="OnProjectfileChanged"></InputFile>
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="cuesheetDataVisible">
                        <CollapseHeader>
                            <Button Clicked="(() => cuesheetDataVisible = !cuesheetDataVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Cuesheet data"]</Heading></Button>
                        </CollapseHeader>
                        <CollapseBody>
                            @*TODO: Tooltip comes even when the value is set correctly*@
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD artist"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <TextEdit id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Artist))" Class="@GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)))" Placeholder="@_localizer["Enter cd artist here"]" @bind-Text="_sessionStateContainer.Cuesheet.Artist" Immediate="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD title"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <TextEdit id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Title))" Class="@GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)))" Placeholder="@_localizer["Enter cd title here"]" @bind-Text="_sessionStateContainer.Cuesheet.Title" Immediate="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Audiofile"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                    @if (_sessionStateContainer.Cuesheet.Audiofile == null)
                                    {
                                        <!--TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664 -->
                                        var audioFileCSSClass = String.Format("form-control {0}", GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Audiofile))));
                                        <InputFile class="@audioFileCSSClass" id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Audiofile))" accept="@String.Join(",", Audiofile.AudioCodecs.Select(x => x.MimeType))" OnChange="OnAudioFileChanged" data-toggle="tooltip" data-placement="top" title="@_sessionStateContainer.Cuesheet.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Audiofile)))"></InputFile>
                                    }
                                    else
                                    {
                                        <Addons>
                                            @if (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded)
                                            {
                                                <Addon AddonType="AddonType.Start">
                                                    <Button Color="Color.Primary" Type="ButtonType.Link" To="@_sessionStateContainer.Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@_sessionStateContainer.Cuesheet.Audiofile.FileName">@_localizer["Download recorded audio"]</Button>
                                                </Addon>
                                            }
                                            <Addon AddonType="AddonType.Body">
                                                <TextEdit Disabled="true" Text="@_sessionStateContainer.Cuesheet.Audiofile.FileName" />
                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeAudioFileClicked">@_localizer["Change"]</Button>
                                            </Addon>
                                        </Addons>
                                    }
                                </FieldBody>
                            </Field>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.CDTextfile)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD textfile"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        @if (_sessionStateContainer.Cuesheet.CDTextfile == null)
                                        {
                                            var cdTextFileCSSClass = String.Format("form-control {0}", GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.CDTextfile))));
                                            <InputFile class="@cdTextFileCSSClass" id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.CDTextfile))" accept="@CDTextfile.FileExtension" OnChange="OnCDTextfileChanged"></InputFile>
                                        }
                                        else
                                        {
                                            <Addons>
                                                <Addon AddonType="AddonType.Body">
                                                    <TextEdit Disabled="true" Text="@_sessionStateContainer.Cuesheet.CDTextfile.FileName" />
                                                </Addon>
                                                <Addon AddonType="AddonType.End">
                                                    <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeCDTextfileClicked">@_localizer["Change"]</Button>
                                                </Addon>
                                            </Addons>
                                        }
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                            <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.Cataloguenumber.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Cataloguenumber), nameof(Cataloguenumber.Value)), seperator: Environment.NewLine)">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Cataloguenumber"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                                        <TextEdit id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet.Cataloguenumber, nameof(Cataloguenumber.Value))" Class="@GetCSSClassAlert(_sessionStateContainer.Cuesheet.Cataloguenumber, String.Format("{0}.{1}", nameof(Cataloguenumber), nameof(Cataloguenumber.Value)))" Placeholder="@_localizer["Enter cataloguenumber here"]" @bind-Text="_sessionStateContainer.Cuesheet.Cataloguenumber.Value" Immediate="false" />
                                    </FieldBody>
                                </Field>
                            </Tooltip>
                        </CollapseBody>
                    </Collapse>
                    <Collapse Visible="cuesheetTracksVisible">
                        <CollapseHeader>
                            <Button Clicked="(() => cuesheetTracksVisible = !cuesheetTracksVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Cuesheet tracks"]</Heading></Button>
                        </CollapseHeader>
                        <CollapseBody>
                            <Buttons Role="ButtonsRole.Toolbar">
                                <Buttons Margin="Margin.Is2.FromEnd">
                                    <Button id="@_cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Tracks))" Color="Color.Primary" Clicked="OnAddTrackClicked" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                        </svg>
                                        @_localizer["Add new track"]
                                    </Button>
                                </Buttons>
                                <Buttons Margin="Margin.Is2.FromEnd">
                                    @if (trackSelectionVisible == false)
                                    {
                                        <Button Color="Color.Info" Clicked="SwitchTrackSelectionVisible" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check2-square" viewBox="0 0 16 16">
                                                <path d="M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5H3z" />
                                                <path d="M8.354 10.354l7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z" />
                                            </svg>
                                            @_localizer["Display selection of tracks"]
                                        </Button>
                                    }
                                    else
                                    {
                                        <Button Color="Color.Info" Clicked="SwitchTrackSelectionVisible" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check2-square" viewBox="0 0 16 16">
                                                <path d="M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5H3z" />
                                                <path d="M8.354 10.354l7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z" />
                                            </svg>
                                            @_localizer["Hide selection of tracks"]
                                        </Button>
                                    }
                                </Buttons>
                                <Buttons>
                                    <Button Color="Color.Warning" Clicked="DeleteSelectedTracksClicked" Disabled="selectedTracks.Count == 0" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                                        </svg>
                                        @_localizer["Delete selected tracks"]
                                    </Button>
                                    <Button Color="Color.Danger" Clicked="OnDeleteAllTracksClicked" Margin="Margin.Is2.OnY.OnMobile.Is0.OnTablet">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                                        </svg>
                                        @_localizer["Delete all tracks"]
                                    </Button>
                                </Buttons>
                            </Buttons>
                            <br />
                            <Table Bordered="true" Responsive="true" Narrow="true">
                                <TableHeader ThemeContrast="ThemeContrast.Light">
                                    <TableRow>
                                        <TableHeaderCell Display="selectionDisplay">@_localizer["Selection"]</TableHeaderCell>
                                        <TableHeaderCell Class="controlsCell">@_localizer["Controls"]</TableHeaderCell>
                                        <TableHeaderCell>#</TableHeaderCell>
                                        <TableHeaderCell Class="minWidth">@_localizer["Artist"]</TableHeaderCell>
                                        <TableHeaderCell Class="minWidth">@_localizer["Title"]</TableHeaderCell>
                                        <TableHeaderCell Class="minWidth">@_localizer["Begin"]</TableHeaderCell>
                                        <TableHeaderCell Class="minWidth">@_localizer["End"]</TableHeaderCell>
                                        <TableHeaderCell Class="minWidth">@_localizer["Length"]</TableHeaderCell>
                                        <TableHeaderCell Display="Display.TableCell.OnDesktop.None.OnTablet.None.OnMobile">@_localizer["Hints"]</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @for (int i = 0; i < _sessionStateContainer.Cuesheet.Tracks.Count; i++)
                                    {
                                        var track = _sessionStateContainer.Cuesheet.Tracks.ElementAt(i);
                                        @if (i != 0)
                                        {
                                            <TableRow>
                                                <TableRowCell ColumnSpan="8">
                                                    @if (track.IsLinkedToPreviousTrack)
                                                    {
                                                        <Button Color="Color.Warning" Block="true" Size="Size.ExtraSmall" Clicked="() => track.IsLinkedToPreviousTrack = false">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-expand" viewBox="0 0 16 16">
                                                                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zM7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10z" />
                                                            </svg>
                                                            @_localizer["Unlink this track from previous track"]
                                                        </Button>
                                                    }
                                                    else
                                                    {
                                                        <Button Color="Color.Success" Block="true" Size="Size.ExtraSmall" Clicked="() => track.IsLinkedToPreviousTrack = true">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-collapse" viewBox="0 0 16 16">
                                                                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zm7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0zm-.5 11.707l-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0v-3.793z" />
                                                            </svg>
                                                            @_localizer["Link this track with previous track"]
                                                        </Button>
                                                    }
                                                </TableRowCell>
                                            </TableRow>
                                        }
                                        <TableRow Color="((audioPlayer.CurrentlyPlayingTrack != null) && (audioPlayer.CurrentlyPlayingTrack == track)) ? Color.Primary : Color.Default">
                                            <TableRowCell Display="selectionDisplay">
                                                <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Select this track for multiple track operations"]">
                                                    <Check TValue="bool" CheckedChanged="(selected) => SelectedTrackChanged(track, selected)" Checked="selectedTracks.Contains(track)" />
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="controlsCell">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Buttons Role="ButtonsRole.Toolbar">
                                                        <Buttons Margin="Margin.Is1.FromEnd">
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Edit track tooltip"]">
                                                                <Button Size="Size.Small" Color="Color.Secondary" Clicked="() => EditTrackModal(track)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Copy track tooltip"]">
                                                                <Button Size="Size.Small" Color="Color.Success" Clicked="() => CopyTrackClicked(track)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-images" viewBox="0 0 16 16">
                                                                        <path d="M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z" />
                                                                        <path d="M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2 3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-1.998 2zM14 2H4a1 1 0 0 0-1 1h9.002a2 2 0 0 1 2 2v7A1 1 0 0 0 15 11V3a1 1 0 0 0-1-1zM2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1h-10z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                        </Buttons>
                                                        <Buttons Margin="Margin.Is1.FromEnd" Display="Display.None.OnMobile.None.OnTablet.Flex.Row.OnDesktop">
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Start playback this track"]">
                                                                <Button Size="Size.Small" Color="Color.Info" Disabled="!audioPlayer.PlaybackPossible" Clicked="() => audioPlayer.OnPlayTrackClicked(track)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-btn" viewBox="0 0 16 16">
                                                                        <path fill-rule="evenodd" d="M14 3H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z" />
                                                                        <path fill-rule="evenodd" d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                        </Buttons>
                                                        <Buttons Margin="Margin.Is1.FromEnd" Display="Display.None.OnMobile.None.OnTablet.Flex.Row.OnDesktop">
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Move track up tooltip"]">
                                                                <Button Size="Size.Small" Color="Color.Secondary" Disabled="!_sessionStateContainer.Cuesheet.MoveTrackPossible(track, MoveDirection.Up)" Clicked="() => _sessionStateContainer.Cuesheet.MoveTrack(track, MoveDirection.Up)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-up" viewBox="0 0 16 16">
                                                                        <path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5zm-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Move track down tooltip"]">
                                                                <Button Size="Size.Small" Color="Color.Secondary" Disabled="!_sessionStateContainer.Cuesheet.MoveTrackPossible(track, MoveDirection.Down)" Clicked="() => _sessionStateContainer.Cuesheet.MoveTrack(track, MoveDirection.Down)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                                                                        <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5zM8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                        </Buttons>
                                                        <Buttons Margin="Margin.Is1.FromEnd">
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Delete track tooltip"]">
                                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="() => _sessionStateContainer.Cuesheet.RemoveTrack(track)">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                                                        <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                                                    </svg>
                                                                </Button>
                                                            </Tooltip>
                                                        </Buttons>
                                                    </Buttons>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="trackPositionTableRowCell">
                                                <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)), seperator: Environment.NewLine)">
                                                    <NumericEdit id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.Position))" TValue="uint?" Max="99" Class="@GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)))" @bind-Value="track.Position" Immediate="false" />
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="minWidth">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))">
                                                        <TextEdit id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.Artist))" Class="@GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" @bind-Text="track.Artist" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="minWidth">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))">
                                                        <TextEdit id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.Title))" Class="@GetCSSClassAlert(track, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))" @bind-Text="track.Title" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="minWidth">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))">
                                                        <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.Begin))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" Text="@GetTimespanAsString(track.Begin)" TextChanged="(value) => OnTimespanTextChanged(x => track.Begin = x, value)" Immediate="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="minWidth">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))">
                                                        <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.End))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" Text="@GetTimespanAsString(track.End)" TextChanged="(value) => OnTimespanTextChanged(x => track.End = x, value)" Immediate="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Class="minWidth">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    <Tooltip Placement="TooltipPlacement.Bottom" Text="@track.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))">
                                                        <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" id="@_cuesheetController.GetFieldIdentifier(track, nameof(Track.Length))" Class="@GetCSSClassAlert(track,String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" Text="@GetTimespanAsString(track.Length)" TextChanged="(value) => OnTimespanTextChanged(x => track.Length = x, value)" Immediate="false" />
                                                    </Tooltip>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowCell Display="Display.TableCell.OnDesktop.None.OnTablet.None.OnMobile">
                                                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString((audioPlayer.AudioIsPlaying == true) && (audioPlayer.CurrentlyPlayingTrack == track),"Current track is played")">
                                                    @((MarkupString)track.GetValidationErrors(ValidationMessageLocalizer))
                                                </Tooltip>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>

                        </CollapseBody>
                    </Collapse>
                </Accordion>

                <br />
                <AudioPlayer @ref="audioPlayer" CurrentlyPlayingTrackChanged="() => StateHasChanged()" />
                <br />
            </Column>
            <Column ColumnSize="ColumnSize.IsQuarter.OnDesktop.IsFull.OnTablet" Display="@DisplayProcessingHints">
                <Card>
                    <CardHeader>
                        <CardTitle Size="3">@_localizer["Processinghints"]</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <ProcessingHints Header="@_localizer["Here all validation messages are displayed. Each message contains a reference to the corresponding field and can clicked to enter the field."]" ActivateLinksToFields="true" ValidationMessageLocalizer="ValidationMessageLocalizer" />
                    </CardBody>
                </Card>
            </Column>
            break;
    }
</Row>

<ModalDialog @ref="modalDialog" />

<Modal @ref="modalTextImport">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>
                @_localizer["Textimport assistant"]
            </ModalTitle>
            <CloseButton Clicked="TextImportAbortClicked" />
        </ModalHeader>
        <ModalBody>
            @if (textImportFile != null)
            {
                <Accordion Style="margin-bottom: 1rem;">
                    <Collapse Visible="textImportFileContentVisible">
                        <CollapseHeader>
                            <Button Clicked="(() => textImportFileContentVisible = !textImportFileContentVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Filecontent"]</Heading></Button>
                        </CollapseHeader>
                        <CollapseBody Style="background: lightgray;">
                            <Text>
                                @if (textImportFile.FileContentRecognized != null)
                                {
                                    @((MarkupString)String.Join("<br />", textImportFile.FileContentRecognized))
                                }
                            </Text>
                        </CollapseBody>
                    </Collapse>
                </Accordion>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">
                        <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Enter textimportscheme cuesheet tooltip"]">
                            @_localizer["Textimportscheme cuesheet"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                @*TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664*@
                                <TextEdit Class="@GetCSSClassAlert(textImportFile.TextImportScheme, nameof(TextImportScheme.SchemeCuesheet))" Placeholder="@_localizer["Enter textimportscheme cuesheet here"]" @bind-Text="textImportFile.TextImportScheme.SchemeCuesheet" data-toggle="tooltip" data-placement="top" title="@textImportFile.TextImportScheme.GetValidationErrors(ValidationMessageLocalizer, nameof(TextImportScheme.SchemeCuesheet))" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableSchemeTrack in TextImportScheme.AvailableSchemeCuesheet)
                                        {
                                            <DropdownItem Clicked="() => textImportFile.TextImportScheme.SchemeCuesheet += availableSchemeTrack.Value">@_localizer[availableSchemeTrack.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">
                        <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Enter textimportscheme track tooltip"]">
                            @_localizer["Textimportscheme track"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                @*TODO: Native because of Bug : https://github.com/stsrki/Blazorise/issues/1664*@
                                <TextEdit Class="@GetCSSClassAlert(textImportFile.TextImportScheme, nameof(TextImportScheme.SchemeTracks))" Placeholder="@_localizer["Enter textimportscheme track here"]" @bind-Text="textImportFile.TextImportScheme.SchemeTracks" data-toggle="tooltip" data-placement="top" title="@textImportFile.TextImportScheme.GetValidationErrors(ValidationMessageLocalizer, nameof(TextImportScheme.SchemeTracks))" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableSchemeTrack in TextImportScheme.AvailableSchemesTrack)
                                        {
                                            <DropdownItem Clicked="() => textImportFile.TextImportScheme.SchemeTracks += availableSchemeTrack.Value">@_localizer[availableSchemeTrack.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if (textImportFile.AnalyseException != null)
                {
                    <Alert Color="Color.Danger" Visible="true">
                        <AlertDescription>
                            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-exclamation-octagon" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1L1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z" />
                                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z" />
                            </svg>
                        </AlertDescription>
                        <AlertMessage>@_localizer["Error during textimport"] : @textImportFile.AnalyseException.Message</AlertMessage>
                    </Alert>
                }
                <Divider DividerType="DividerType.Solid" />
                @if (textImportFile.ImportCuesheet != null)
                {
                    <Heading Size="HeadingSize.Is4">@_localizer["ImportCuesheetValues"]</Heading>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">@_localizer["CD artist"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit @bind-Text="textImportFile.ImportCuesheet.Artist" ReadOnly="true" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">@_localizer["CD title"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit @bind-Text="textImportFile.ImportCuesheet.Title" ReadOnly="true" />
                        </FieldBody>
                    </Field>
                    @if (textImportFile.ImportCuesheet.Audiofile != null)
                    {
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">@_localizer["Audiofile"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <TextEdit Text="@textImportFile.ImportCuesheet.Audiofile.FileName" ReadOnly="true" />
                            </FieldBody>
                        </Field>
                    }
                    @if (textImportFile.ImportCuesheet.CDTextfile != null)
                    {
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">@_localizer["CD textfile"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <TextEdit Text="@textImportFile.ImportCuesheet.CDTextfile.FileName" ReadOnly="true" />
                            </FieldBody>
                        </Field>
                    }
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">@_localizer["Cataloguenumber"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit @bind-Text="textImportFile.ImportCuesheet.Cataloguenumber.Value" ReadOnly="true" />
                        </FieldBody>
                    </Field>
                    <Heading Size="HeadingSize.Is5">@_localizer["Cuesheet tracks"]</Heading>
                    <Table Bordered="true" Responsive="true" Narrow="true">
                        <TableHeader ThemeContrast="ThemeContrast.Light">
                            <TableRow>
                                <TableHeaderCell>#</TableHeaderCell>
                                <TableHeaderCell>@_localizer["Artist"]</TableHeaderCell>
                                <TableHeaderCell>@_localizer["Title"]</TableHeaderCell>
                                <TableHeaderCell>@_localizer["Begin"]</TableHeaderCell>
                                <TableHeaderCell>@_localizer["End"]</TableHeaderCell>
                                <TableHeaderCell>@_localizer["Length"]</TableHeaderCell>
                                <TableHeaderCell>@_localizer["Flags"]</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var track in textImportFile.ImportCuesheet.Tracks)
                            {
                                <TableRow>
                                    <TableRowCell>@track.Position</TableRowCell>
                                    <TableRowCell>@track.Artist</TableRowCell>
                                    <TableRowCell>@track.Title</TableRowCell>
                                    <TableRowCell>@track.Begin</TableRowCell>
                                    <TableRowCell>@track.End</TableRowCell>
                                    <TableRowCell>@track.Length</TableRowCell>
                                    <TableRowCell>@String.Join(" ", track.Flags.Select(x => x.Name))</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString(!((textImportFile != null) && (textImportFile.AnalyseException == null)), "Import not possible due to textimport errors. Please check errors!")">
                <Button Color="Color.Primary" Disabled="!((textImportFile != null) && (textImportFile.AnalyseException == null))" Clicked="TextImportStartClicked">@_localizer["Start textimport"]</Button>
            </Tooltip>
            <Button Color="Color.Secondary" @onclick="TextImportAbortClicked">@_localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalTrackEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@_localizer["Edit track details"]</ModalTitle>
            <CloseButton Clicked="() => modalTrackEdit.Hide()" />
        </ModalHeader>
        <ModalBody>
            @if (editTrack != null)
            {
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Position"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)))">
                            <NumericEdit TValue="uint?" Max="99" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)))" @bind-Value="editTrack.Clone.Position" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Artist"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))">
                            <TextEdit Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))" @bind-Text="editTrack.Clone.Artist" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Title"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))">
                            <TextEdit Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))" @bind-Text="editTrack.Clone.Title" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Begin"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" Text="@GetTimespanAsString(editTrack.Clone.Begin)" TextChanged="(value) => OnTimespanTextChanged(x => editTrack.Clone.Begin = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["End"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" Text="@GetTimespanAsString(editTrack.Clone.End)" TextChanged="(value) => OnTimespanTextChanged(x => editTrack.Clone.End = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Length"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" Text="@GetTimespanAsString(editTrack.Clone.Length)" TextChanged="(value) => OnTimespanTextChanged(x => editTrack.Clone.Length = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Flags"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        @foreach (var flag in Flag.AvailableFlags)
                        {
                            <Tooltip Placement="TooltipPlacement.Bottom" Text="@_localizer[String.Format("Flag{0}Tooltip", flag.Name)]">
                                <Check TValue="bool" Checked="editTrack.Clone.Flags.Contains(flag)" CheckedChanged="(value) => editTrack.Clone.SetFlag(flag, value == true ? SetFlagMode.Add : SetFlagMode.Remove)">@flag.Name</Check>
                            </Tooltip>
                        }
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["PreGap"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.PreGap)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.PreGap)))" Text="@GetTimespanAsString(editTrack.Clone.PreGap)" TextChanged="(value) => OnTimespanTextChanged(x => editTrack.Clone.PreGap = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["PostGap"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editTrack.Clone.GetValidationErrors(ValidationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.PostGap)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@GetCSSClassAlert(editTrack.Clone, String.Format("{0}.{1}", nameof(Track), nameof(Track.PostGap)))" Text="@GetTimespanAsString(editTrack.Clone.PostGap)" TextChanged="(value) => OnTimespanTextChanged(x => editTrack.Clone.PostGap = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="EditTrackModalSaveClicked">@_localizer["Save changes"]</Button>
            <Button Color="Color.Secondary" Clicked="() => modalTrackEdit.Hide()">@_localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    public ITextLocalizer<ValidationMessage> ValidationMessageLocalizer { get; private set; }

    public void Dispose()
    {
        hotKeysContext.Dispose();
        _sessionStateContainer.CurrentViewModeChanged -= CurrentViewModeChanged;
    }

    public class CloneTrackModel : IDisposable
    {
        public Track Track { get; private set; }
        public Track Clone { get; private set; }

        public CloneTrackModel(Track track)
        {
            if (track == null)
            {
                throw new ArgumentNullException(nameof(track));
            }
            Track = track;
            Clone = track.Clone();
        }

        public void Dispose()
        {
            Clone = null;
            Track = null;
        }
    }

    public IFluentDisplay DisplayProcessingHints
    {
        get
        {
            if (_sessionStateContainer.Cuesheet.GetValidationErrorsFiltered(validationErrorFilterType: ValidationErrorFilterType.All).Count > 0)
            {
                return Display.Always;
            }
            else
            {
                return Display.None;
            }
        }
    }

    [CascadingParameter]
    public MainLayout? mainLayout { get; set; }

    private Boolean cuesheetDataVisible = true;
    private Boolean cuesheetTracksVisible = true;

    private Boolean importVisible = false;
    private Boolean dropFilesVisible = true;
    private Boolean textImportFileContentVisible = true;

    private HotKeysContext hotKeysContext;

    private String invalidFileName;

    private TextImportFile textImportFile;
    private CloneTrackModel editTrack;

    private ModalDialog modalDialog;
    private Alert alertInvalidFile;

    private Modal modalTextImport;
    private Modal modalTrackEdit;
    private AudioPlayer audioPlayer;

    private IFluentDisplay selectionDisplay = Display.None;
    private Boolean trackSelectionVisible = false;
    private List<Track> selectedTracks = new List<Track>();

    protected override async Task OnInitializedAsync()
    {
        _logger.LogDebug("OnInitializedAsync");
        _logger.LogInformation("CultureInfo.CurrentCulture = {0}", CultureInfo.CurrentCulture);

        _localizationService.LocalizationChanged += delegate
        {
            StateHasChanged();
        };

        ValidationMessageLocalizer = new TextLocalizer<ValidationMessage>(_localizationService);

        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKeys.Ctrl, Keys.H, () => _navigationManager.NavigateTo("Help"))
            .Add(ModKeys.None, Keys.Enter, OnEnterKeyDown)
            .Add(ModKeys.Ctrl, Keys.Z, () => _traceChangeManager.Undo())
            .Add(ModKeys.Ctrl, Keys.Y, () => _traceChangeManager.Redo());

        _sessionStateContainer.CurrentViewModeChanged += CurrentViewModeChanged;

        var dotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("GLOBAL.SetIndexReference", dotNetReference);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (mainLayout != null)
        {
            mainLayout.SetDisplayMenuBar(true);
        }
    }

    private void OnDeleteAllTracksClicked()
    {
        _logger.LogInformation("OnDeleteAllTracksClicked");
        //Display a confirm warning
        modalDialog.Title = _localizer["Confirmation required"];
        modalDialog.Text = _localizer["Do you really want to delete all tracks? This can not be reversed."];
        modalDialog.ModalSize = ModalSize.Small;
        modalDialog.Mode = ModalDialog.DialogMode.Confirm;
        void deleteTracksDelegate(object sender, EventArgs args)
        {
            _logger.LogInformation("deleteTracksDelegate");
            _sessionStateContainer.Cuesheet.RemoveTracks(_sessionStateContainer.Cuesheet.Tracks);
            modalDialog.Confirmed -= deleteTracksDelegate;
            StateHasChanged();
        };
        modalDialog.Confirmed += deleteTracksDelegate;
        modalDialog.ShowModal();
    }

    private String GetCSSClassAlert(Validateable validateable, String property)
    {
        String cssClass = String.Empty;
        var validationErrors = validateable.GetValidationErrorsFiltered(property);
        if (validationErrors.Count() >= 1)
        {
            if (validationErrors.Count() > 1)
            {
                if (_sessionStateContainer.Cuesheet.GetValidationErrorsFiltered(property, Model.Entity.ValidationErrorFilterType.ErrorOnly).Count() >= 1)
                {
                    cssClass = "alert-danger";
                }
                else
                {
                    cssClass = "alert-warning";
                }
            }
            else
            {
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Error)
                {
                    cssClass = "alert-danger";
                }
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Warning)
                {
                    cssClass = "alert-warning";
                }
            }
        }
        return cssClass;
    }

    private async Task OnInputFileTextImportChange(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnInputFileTextImportChange with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, TextImportFile.MimeType, TextImportFile.FileExtension) == true)
            {
                var options = await _localStorageOptionsProvider.GetOptions<ImportOptions>();
                var stream = e.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                textImportFile = new TextImportFile(memoryStream);
                textImportFile.TextImportScheme = options.TextImportScheme;
                modalTextImport.Show();
            }
            else
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], e.File.Name, _localizer["Import textfile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private void TextImportAbortClicked()
    {
        _logger.LogInformation("TextImportAbortClicked");
        modalTextImport.Hide();
        textImportFile = null;
    }

    private async Task TextImportStartClicked()
    {
        _logger.LogInformation("TextImportStartClicked with textImportFile = {0}", textImportFile);
        if ((textImportFile != null) && (textImportFile.IsValid == true))
        {
            var options = await _localStorageOptionsProvider.GetOptions<ImportOptions>();
            var applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
            options.TextImportScheme = textImportFile.TextImportScheme;
            await _localStorageOptionsProvider.SaveOptions(options);
            _sessionStateContainer.Cuesheet.Import(textImportFile, applicationOptions);
            modalTextImport.Hide();
            textImportFile = null;
            StateHasChanged();
        }
    }

    private async Task OnInputFileCuesheetChange(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnInputFileCuesheetChange with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, Cuesheetfile.MimeType, Cuesheetfile.FileExtension) == true)
            {
                var options = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
                var stream = e.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                //Display a confirm warning
                modalDialog.Title = _localizer["Confirmation required"];
                modalDialog.Text = _localizer["Do you really want to import this file? This can not be undone and unsaved changes are lost!"];
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Confirm;
                void importCuesheetDelegate(object sender, EventArgs args)
                {
                    _sessionStateContainer.Cuesheet = Cuesheetfile.ImportCuesheet(memoryStream, options);
                    modalDialog.Confirmed -= importCuesheetDelegate;
                    StateHasChanged();
                };
                modalDialog.Confirmed += importCuesheetDelegate;
                modalDialog.ShowModal();
            }
            else
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], e.File.Name, _localizer["Import cuesheet"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task OnDropInputfilesChanged(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnDropInputfilesChanged with {0}", e);
        alertInvalidFile.Hide();
        Boolean importedAllFiles = true;
        foreach (var file in e.GetMultipleFiles())
        {
            _logger.LogInformation("file = {0}", file);
            Boolean recognized = false;
            var files = new List<IBrowserFile>();
            files.Add(file);
            if (CuesheetController.CheckFileMimeType(file, TextImportFile.MimeType, TextImportFile.FileExtension) == true)
            {
                recognized = true;
                await OnInputFileTextImportChange(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (CuesheetController.CheckFileMimeType(file, Cuesheetfile.MimeType, Cuesheetfile.FileExtension) == true)
            {
                recognized = true;
                await OnInputFileCuesheetChange(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (CuesheetController.CheckFileMimeType(file, Audiofile.AudioCodecs) == true)
            {
                recognized = true;
                await SetAudioFile(file, "dropInputfiles");
            }
            if (CuesheetController.CheckFileMimeType(file, CDTextfile.MimeType, CDTextfile.FileExtension) == true)
            {
                recognized = true;
                OnCDTextfileChanged(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (CuesheetController.CheckFileMimeType(file, Projectfile.MimeType, Projectfile.FileExtension))
            {
                recognized = true;
                await OnProjectfileChanged(new InputFileChangeEventArgs(files.AsReadOnly()));
            }
            if (recognized == false)
            {
                invalidFileName = e.File.Name;
                alertInvalidFile.Show();
                importedAllFiles = false;
            }
        }
        if (importedAllFiles == true)
        {
            //Hide the import
            dropFilesVisible = false;
            importVisible = false;
        }
    }

    private async Task OnChangeAudioFileClicked()
    {
        _logger.LogInformation("OnChangeAudioFileClicked");
        _sessionStateContainer.Cuesheet.Audiofile = null;
        StateHasChanged();
        await Task.Delay(1);
        await _jsRuntime.InvokeVoidAsync("triggerClick", _cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Audiofile)));
    }

    private String GetLocalizedString(Boolean expressionToCheck, String localizedStringName)
    {
        if (expressionToCheck == true)
        {
            return _localizer[localizedStringName];
        }
        else
        {
            return null;
        }
    }

    private String GetTimespanAsString(TimeSpan? timeSpan, Boolean removeMilliseconds = false)
    {
        String resultString = null;
        if ((timeSpan != null) && (timeSpan.HasValue))
        {
            if (removeMilliseconds == true)
            {
                resultString = timeSpan.Value.Subtract(new TimeSpan(0, 0, 0, 0, timeSpan.Value.Milliseconds)).ToString();
            }
            else
            {
                resultString = timeSpan.Value.ToString();
            }
        }
        return resultString;
    }

    private void OnTimespanTextChanged(Action<TimeSpan?> setAction, String value)
    {
        TimeSpan? result = null;
        if (TimeSpan.TryParse(value, out TimeSpan parsedTimeSpan) == true)
        {
            result = parsedTimeSpan;
        }
        setAction(result);
    }

    private async Task OnAudioFileChanged(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnAudioFileChanged with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, Audiofile.AudioCodecs) == true)
            {
                await SetAudioFile(e.File, _cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.Audiofile)));
            }
            else
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], e.File.Name, _localizer["Audiofile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task SetAudioFile(IBrowserFile browserFile, String inputDomId)
    {
        _logger.LogInformation("SetAudioFile with {0}, {1}", browserFile, inputDomId);
        if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
        {
            await _jsRuntime.InvokeVoidAsync("URL.revokeObjectURL", _sessionStateContainer.Cuesheet.Audiofile.ObjectURL);
        }
        if (browserFile != null)
        {
            var audioFileObjectURL = await _jsRuntime.InvokeAsync<String>("getObjectURL", inputDomId);
            var codec = Audiofile.AudioCodecs.Single(x => x.MimeType.Equals(browserFile.ContentType, StringComparison.OrdinalIgnoreCase));
            _sessionStateContainer.Cuesheet.Audiofile = new Audiofile(browserFile.Name, audioFileObjectURL, codec, _httpClient);
        }
        else
        {
            _sessionStateContainer.Cuesheet.Audiofile = null;
        }
    }

    private void OnCDTextfileChanged(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnCDTextfileChanged with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, CDTextfile.MimeType, CDTextfile.FileExtension) == true)
            {
                _sessionStateContainer.Cuesheet.CDTextfile = new CDTextfile(e.File.Name);
            }
            else
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], e.File.Name, _localizer["CD textfile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private async Task OnChangeCDTextfileClicked()
    {
        _logger.LogInformation("OnChangeCDTextfileClicked");
        _sessionStateContainer.Cuesheet.CDTextfile = null;
        StateHasChanged();
        await Task.Delay(1);
        await _jsRuntime.InvokeVoidAsync("triggerClick", _cuesheetController.GetFieldIdentifier(_sessionStateContainer.Cuesheet, nameof(Cuesheet.CDTextfile)));
    }

    private async Task OnEnterKeyDown()
    {
        if (modalTextImport.Visible)
        {
            await TextImportStartClicked();
        }
        if (modalDialog.Visible)
        {
            modalDialog.Confirm();
        }
    }

    private async Task OnAddTrackClicked()
    {
        var options = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        var newTrack = new Track();
        _sessionStateContainer.Cuesheet.AddTrack(newTrack, options);
        _traceChangeManager.TraceChanges(newTrack);
    }

    private void EditTrackModal(Track trackToEdit)
    {
        editTrack = new CloneTrackModel(trackToEdit);
        modalTrackEdit.Show();
    }

    private void EditTrackModalSaveClicked()
    {
        editTrack.Track.CopyValues(editTrack.Clone);
        editTrack = null;
        modalTrackEdit.Hide();
    }

    private async Task CopyTrackClicked(Track trackToCopy)
    {
        var options = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        var copy = new Track(trackToCopy);
        _sessionStateContainer.Cuesheet.AddTrack(copy, options);
        _traceChangeManager.TraceChanges(copy);
        EditTrackModal(copy);
    }

    private async Task OnProjectfileChanged(InputFileChangeEventArgs e)
    {
        _logger.LogInformation("OnProjectfileChanged with {0}", e);
        if (e.File != null)
        {
            if (CuesheetController.CheckFileMimeType(e.File, Projectfile.MimeType, Projectfile.FileExtension) == true)
            {
                var stream = e.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                //Display a confirm warning
                modalDialog.Title = _localizer["Confirmation required"];
                modalDialog.Text = _localizer["Do you really want to import this file? This can not be undone and unsaved changes are lost!"];
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Confirm;
                void importCuesheetDelegate(object sender, EventArgs args)
                {
                    modalDialog.Confirmed -= importCuesheetDelegate;
                    _sessionStateContainer.Cuesheet = Projectfile.ImportFile(memoryStream.ToArray());
                    StateHasChanged();
                };
                modalDialog.Confirmed += importCuesheetDelegate;
                modalDialog.ShowModal();
            }
            else
            {
                modalDialog.Title = _localizer["Error"];
                modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], e.File.Name, _localizer["Import textfile"]);
                modalDialog.ModalSize = ModalSize.Small;
                modalDialog.Mode = ModalDialog.DialogMode.Alert;
                modalDialog.ShowModal();
            }
        }
    }

    private void SwitchTrackSelectionVisible()
    {
        trackSelectionVisible = !trackSelectionVisible;
        if (trackSelectionVisible)
        {
            selectionDisplay = Display.TableCell;
        }
        else
        {
            selectionDisplay = Display.None;
        }
    }

    private void SelectedTrackChanged(Track track, bool selected)
    {
        if (selected)
        {
            selectedTracks.Add(track);
        }
        else
        {
            selectedTracks.Remove(track);
        }
    }

    private void DeleteSelectedTracksClicked()
    {
        _sessionStateContainer.Cuesheet.RemoveTracks(selectedTracks.AsReadOnly());
        selectedTracks.Clear();
    }

    private void CurrentViewModeChanged(object sender, EventArgs args)
    {
        audioPlayer.Reset();
    }
}