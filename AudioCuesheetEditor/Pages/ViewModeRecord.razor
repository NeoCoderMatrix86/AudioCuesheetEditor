<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject IJSRuntime _jsRuntime
@inject ITextLocalizer<ViewModeRecord> _localizer
@inject ILogger<ViewModeRecord> _logger
@inject HttpClient _httpClient
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject ITextLocalizerService _localizationService
@inject SessionStateContainer _sessionStateContainer

<Column>
    <Accordion>
        <Collapse Visible="recordControlVisible">
            <CollapseHeader>
                <Button Clicked="(() => recordControlVisible = !recordControlVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Recordcontrol"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                @if (_sessionStateContainer.Cuesheet.IsRecording == true)
                {
                    var backgroundCSS = _sessionStateContainer.Cuesheet.IsRecording ? "BackgroundBlink rounded" : "rounded";
                    <div class="@backgroundCSS">
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@_localizer["Record running!"]</Heading>
                    </div>
                }
                @if ((startRecordTimer != null) && (startRecordTimer.Enabled))
                {
                    <div class="BackgroundBlink rounded">
                        <Heading Size="HeadingSize.Is4" Alignment="TextAlignment.Center">@_localizer["Record will start in {0} seconds!", ((startRecordTimer.Interval / 1000) - (DateTime.Now - recordTimerStarted).Seconds)]</Heading>
                    </div>
                }
                <Row>
                    <Column>
                        <Dropdown Direction="Direction.End">
                            <Button Color="Color.Danger" Clicked="StartRecordingClicked" Disabled="_sessionStateContainer.Cuesheet.IsRecording">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-record2" viewBox="0 0 16 16">
                                    <path d="M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 8 3a5 5 0 0 0 0 10z" />
                                    <path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z" />
                                </svg>
                                @_localizer["Start recording"]
                            </Button>
                            <DropdownToggle Color="Color.Danger" Split="true"></DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="StartRecordCountdownTimer" Disabled="startRecordTimer == null || _sessionStateContainer.Cuesheet.IsRecording">@_localizer["Start record timer"]</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </Column>
                    <Column>
                        @if (_sessionStateContainer.Cuesheet.RecordingTime.HasValue == true)
                        {
                            <Heading Size="HeadingSize.Is4">@GetTimespanAsString(_sessionStateContainer.Cuesheet.RecordingTime, true)</Heading>
                        }
                        else
                        {
                            <Heading Size="HeadingSize.Is4">@String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)</Heading>
                        }
                    </Column>
                    <Column>
                        <Button Color="Color.Warning" Clicked="StopRecordingClicked" Disabled="!_sessionStateContainer.Cuesheet.IsRecording">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-btn" viewBox="0 0 16 16">
                                <path d="M6.5 5A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z" />
                                <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z" />
                            </svg>
                            @_localizer["Stop recording"]
                        </Button>
                    </Column>
                </Row>
            </CollapseBody>
        </Collapse>
        <Collapse Visible="cuesheetDataVisible">
            <CollapseHeader>
                <Button Clicked="(() => cuesheetDataVisible = !cuesheetDataVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Cuesheet data"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.GetValidationErrors(_localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)), seperator: Environment.NewLine)">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD artist"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            <TextEdit Class="@GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Artist)))" Placeholder="@_localizer["Enter cd artist here"]" @bind-Text="_sessionStateContainer.Cuesheet.Artist" ChangeTextOnKeyPress="false" />
                        </FieldBody>
                    </Field>
                </Tooltip>
                <Tooltip Placement="TooltipPlacement.Top" Text="@_sessionStateContainer.Cuesheet.GetValidationErrors(_localizer, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)), seperator: Environment.NewLine)">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD title"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            <TextEdit Class="@GetCSSClassAlert(_sessionStateContainer.Cuesheet, String.Format("{0}.{1}", nameof(Cuesheet), nameof(Cuesheet.Title)))" Placeholder="@_localizer["Enter cd title here"]" @bind-Text="_sessionStateContainer.Cuesheet.Title" ChangeTextOnKeyPress="false" />
                        </FieldBody>
                    </Field>
                </Tooltip>
                @if (_sessionStateContainer.Cuesheet.Audiofile != null)
                {
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Audiofile"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            <Addons>
                                @if (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded)
                                {
                                    <Addon AddonType="AddonType.Start">
                                        <Button Color="Color.Primary" Type="ButtonType.Link" To="@_sessionStateContainer.Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@_sessionStateContainer.Cuesheet.Audiofile.FileName">@_localizer["Download recorded audio"]</Button>
                                    </Addon>
                                }
                                <Addon AddonType="AddonType.Body">
                                    <TextEdit Disabled="true" Text="@_sessionStateContainer.Cuesheet.Audiofile.FileName" />
                                </Addon>
                            </Addons>
                        </FieldBody>
                    </Field>
                }
            </CollapseBody>
        </Collapse>
        <Collapse Visible="enterNewTrackVisible">
            <CollapseHeader>
                <Button Clicked="(() => enterNewTrackVisible = !enterNewTrackVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Enter new track"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is12.OnTablet.Is12.OnMobile">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is4.OnDesktop.Is5.OnTablet.Is6.OnMobile">@_localizer["Artist"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is8.OnDesktop.Is7.OnTablet.Is12.OnMobile">
                                <TextEdit @ref="enterCurrentTrackArtist" @bind-Text="currentRecordingTrack.Artist" Disabled="!_sessionStateContainer.Cuesheet.IsRecording" KeyDown="OnKeyDownRecordArtist" DelayTextOnKeyPressInterval="50"></TextEdit>
                            </FieldBody>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is12.OnTablet.Is12.OnMobile">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is4.OnDesktop.Is5.OnTablet.Is6.OnMobile">@_localizer["Title"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is8.OnDesktop.Is7.OnTablet.Is12.OnMobile">
                                <TextEdit @ref="enterCurrentTrackTitle" @bind-Text="currentRecordingTrack.Title" Disabled="!_sessionStateContainer.Cuesheet.IsRecording" KeyDown="OnKeyDownRecordTitle" DelayTextOnKeyPressInterval="50"></TextEdit>
                            </FieldBody>
                        </Field>
                    </Column>
                    <Column>
                        <Button Color="Color.Primary" Clicked="AddTrackRecordingClicked" Disabled="!_sessionStateContainer.Cuesheet.IsRecording">@_localizer["Add new track"]</Button>
                    </Column>
                </Row>
            </CollapseBody>
        </Collapse>
        <Collapse Visible="cuesheetTracksVisible">
            <CollapseHeader>
                <Button Clicked="(() => cuesheetTracksVisible = !cuesheetTracksVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Cuesheet tracks"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <Table Bordered="true" Responsive="true" Narrow="true">
                    <TableHeader ThemeContrast="ThemeContrast.Light">
                        <TableRow>
                            <TableHeaderCell>@_localizer["Controls"]</TableHeaderCell>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Artist"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Title"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Begin"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["End"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Length"]</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var track in _sessionStateContainer.Cuesheet.Tracks)
                        {
                            <TableRow>
                                <TableRowCell>
                                    <Button Size="Size.Small" Color="Color.Warning" Clicked="() => _sessionStateContainer.Cuesheet.RemoveTrack(track)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                        </svg>
                                    </Button>
                                </TableRowCell>
                                <TableRowCell>@track.Position</TableRowCell>
                                <TableRowCell Class="minWidth"><TextEdit @bind-Text="track.Artist" /></TableRowCell>
                                <TableRowCell Class="minWidth"><TextEdit @bind-Text="track.Title" /></TableRowCell>
                                <TableRowCell>@track.Begin</TableRowCell>
                                <TableRowCell>@track.End</TableRowCell>
                                <TableRowCell>@track.Length</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </CollapseBody>
        </Collapse>
        <Collapse Visible="processingHintsVisible">
            <CollapseHeader>
                <Button Clicked="(() => processingHintsVisible = !processingHintsVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Hints"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <ProcessingHints Header="@_localizer["Here all validation messages will be displayed. For details switch to full edit mode."]" ActivateLinksToFields="false" ValidationMessageLocalizer="ValidationMessageLocalizer" />
            </CollapseBody>
        </Collapse>
    </Accordion>
    <br />


    @if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
    {
        <Card>
            <CardHeader>@_localizer["Recording"]</CardHeader>
            @if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
            {
                <CardBody>
                    <Button Color="Color.Primary" Type="ButtonType.Link" To="@_sessionStateContainer.Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@_sessionStateContainer.Cuesheet.Audiofile.FileName">@_localizer["Download recorded audio"]</Button>
                </CardBody>
            }
        </Card>
    }
</Column>

<ModalDialog @ref="modalDialog" />

@code {
    public void Dispose()
    {
        _jsRuntime.InvokeVoidAsync("closeAudioRecording");
    }

    [Parameter]
    public ITextLocalizer<ValidationMessage> ValidationMessageLocalizer { get; set; }

    [JSInvokable()]
    public async Task AudioRecordingFinished(String url)
    {
        var options = await _localStorageOptionsProvider.GetApplicationOptions();
        _sessionStateContainer.Cuesheet.Audiofile = new Audiofile(options.AudioFileNameRecording, url, Audiofile.AudioCodecWEBM, _httpClient, true);
        StateHasChanged();
    }

    private Timer updateGUITimer;
    private Timer startRecordTimer;

    private DateTime recordTimerStarted;

    private TextEdit enterCurrentTrackTitle;
    private TextEdit enterCurrentTrackArtist;

    private ModalDialog modalDialog;

    private Track currentRecordingTrack = new Track();

    private Boolean cuesheetDataVisible = false;
    private Boolean recordControlVisible = true;
    private Boolean enterNewTrackVisible = true;
    private Boolean cuesheetTracksVisible = true;
    private Boolean processingHintsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("GLOBAL.SetViewModeRecordReference", dotNetReference);
        await _jsRuntime.InvokeVoidAsync("setupAudioRecording");

        _localizationService.LocalizationChanged += delegate
        {
            StateHasChanged();
        };

        updateGUITimer = new Timer(500);
        updateGUITimer.AutoReset = true;
        updateGUITimer.Elapsed += delegate
        {
            StateHasChanged();
            if ((startRecordTimer.Enabled == false) && (_sessionStateContainer.Cuesheet.IsRecording == false))
            {
                updateGUITimer.Stop();
            }
        };
        var options = await _localStorageOptionsProvider.GetApplicationOptions();

        if (options.RecordCountdownTimer.HasValue)
        {
            startRecordTimer = new Timer(options.RecordCountdownTimer.Value * 1000);
            startRecordTimer.Elapsed += async delegate
            {
                await StartRecordingClicked();
                startRecordTimer.Stop();
            };
        }
    }

    private String GetTimespanAsString(TimeSpan? timeSpan, Boolean removeMilliseconds = false)
    {
        String resultString = null;
        if ((timeSpan != null) && (timeSpan.HasValue))
        {
            if (removeMilliseconds == true)
            {
                resultString = timeSpan.Value.Subtract(new TimeSpan(0, 0, 0, 0, timeSpan.Value.Milliseconds)).ToString();
            }
            else
            {
                resultString = timeSpan.Value.ToString();
            }
        }
        return resultString;
    }

    private async Task StartRecordingClicked()
    {
        //Check for empty cuesheet and warn!
        if (_sessionStateContainer.Cuesheet.Tracks.Count > 0)
        {
            modalDialog.Title = _localizer["Error"];
            modalDialog.Text = _localizer["Cuesheet already contains tracks. Recording is not possible, if tracks are present. Please save your work and start with a clean cuesheet."];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Alert;
            modalDialog.ShowModal();
        }
        else
        {
            _sessionStateContainer.Cuesheet.StartRecording();
            updateGUITimer.Start();
            enterCurrentTrackArtist.Focus();
            await _jsRuntime.InvokeVoidAsync("startAudioRecording");
            if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
            {
                await _jsRuntime.InvokeVoidAsync("URL.revokeObjectURL", _sessionStateContainer.Cuesheet.Audiofile.ObjectURL);
            }
            _sessionStateContainer.Cuesheet.Audiofile = null;
        }
    }

    private async Task StopRecordingClicked()
    {
        await _jsRuntime.InvokeVoidAsync("stopAudioRecording");
        var options = await _localStorageOptionsProvider.GetApplicationOptions();
        _sessionStateContainer.Cuesheet.StopRecording(options);
        //Open processing hints
        processingHintsVisible = true;
    }

    private String GetCSSClassAlert(Validateable validateable, String property)
    {
        String cssClass = String.Empty;
        var validationErrors = validateable.GetValidationErrorsFiltered(property);
        if (validationErrors.Count() >= 1)
        {
            if (validationErrors.Count() > 1)
            {
                if (_sessionStateContainer.Cuesheet.GetValidationErrorsFiltered(property, Model.Entity.ValidationErrorFilterType.ErrorOnly).Count() >= 1)
                {
                    cssClass = "alert-danger";
                }
                else
                {
                    cssClass = "alert-warning";
                }
            }
            else
            {
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Error)
                {
                    cssClass = "alert-danger";
                }
                if (validationErrors.First().Type == Model.Entity.ValidationErrorType.Warning)
                {
                    cssClass = "alert-warning";
                }
            }
        }
        return cssClass;
    }

    private void OnKeyDownRecordArtist(KeyboardEventArgs args)
    {
        _logger.LogDebug("args = {0}", args);
        if ((args.Key == "Enter") && (args.CtrlKey == false) && (args.AltKey == false) && (args.MetaKey == false) && (args.Repeat == false) && (args.ShiftKey == false))
        {
            enterCurrentTrackTitle.Focus();
        }
    }

    private async Task OnKeyDownRecordTitle(KeyboardEventArgs args)
    {
        _logger.LogDebug("args = {0}", args);
        if ((args.Key == "Enter") && (args.CtrlKey == false) && (args.AltKey == false) && (args.MetaKey == false) && (args.Repeat == false) && (args.ShiftKey == false))
        {
            await AddTrackRecordingClicked();
        }
    }

    private async Task AddTrackRecordingClicked()
    {
        if (_sessionStateContainer.Cuesheet.IsRecording == true)
        {
            var options = await _localStorageOptionsProvider.GetApplicationOptions();
            enterCurrentTrackArtist.Focus();
            await Task.Delay(50);
            _sessionStateContainer.Cuesheet.AddTrack(currentRecordingTrack, options);
            currentRecordingTrack = new Track();
        }
    }

    private void StartRecordCountdownTimer()
    {
        recordTimerStarted = DateTime.Now;
        startRecordTimer.Start();
        updateGUITimer.Start();
    }
}
