<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject IJSRuntime _jsRuntime
@inject ITextLocalizer<ViewModeRecord> _localizer
@inject ILogger<ViewModeRecord> _logger
@inject HttpClient _httpClient
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject ITextLocalizerService _localizationService
@inject SessionStateContainer _sessionStateContainer
@inject MusicBrainzDataProvider _musicBrainzDataProvider

<Column>
    <Accordion>
        <Collapse Visible="recordOptionsVisible">
            <CollapseHeader>
                <Button Clicked="(() => recordOptionsVisible = !recordOptionsVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Record options"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <EditRecordOptions />
            </CollapseBody>
        </Collapse>
        <Collapse Visible="recordControlVisible">
            <CollapseHeader>
                <Button Clicked="(() => recordControlVisible = !recordControlVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Recordcontrol"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <RecordControl StartRecordClicked="RecordingStarted" StopRecordClicked="RecordingStopped" />
            </CollapseBody>
        </Collapse>
        <Collapse Visible="cuesheetDataVisible">
            <CollapseHeader>
                <Button Clicked="(() => cuesheetDataVisible = !cuesheetDataVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Cuesheet data"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <CuesheetData />
            </CollapseBody>
        </Collapse>
        <Collapse Visible="enterNewTrackVisible">
            <CollapseHeader>
                <Button Clicked="(() => enterNewTrackVisible = !enterNewTrackVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Enter new track"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is12.OnTablet.Is12.OnMobile">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is4.OnDesktop.Is5.OnTablet.Is6.OnMobile">@_localizer["Artist"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is8.OnDesktop.Is7.OnTablet.Is12.OnMobile">
                                <Autocomplete @ref="autocompleteArtist" TItem="MusicBrainzArtist" TValue="Guid" Data="autocompleteArtists" FreeTyping TextField="@((item) => item.Name)" ValueField="@((item) => item.Id)" @bind-SelectedText="currentRecordingTrack.Artist" Disabled="!_sessionStateContainer.Cuesheet.IsRecording" ReadData="OnReadDataAutocompleteArtist" @onkeydown="OnKeyDownRecordArtist">
                                    <ItemContent>
                                        @if (context.Item.Disambiguation != null)
                                        {
                                            <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                        }
                                        else
                                        {
                                            <Paragraph>@context.Text</Paragraph>
                                        }
                                    </ItemContent>
                                </Autocomplete>
                            </FieldBody>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is12.OnTablet.Is12.OnMobile">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is4.OnDesktop.Is5.OnTablet.Is6.OnMobile">@_localizer["Title"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is8.OnDesktop.Is7.OnTablet.Is12.OnMobile">
                                <Autocomplete @ref="autocompleteTitle" TItem="MusicBrainzTrack" TValue="Guid" Data="autocompleteTitles" FreeTyping TextField="@((item) => item.Title)" ValueField="@((item) => item.Id)" @bind-SelectedText="currentRecordingTrack.Title" Disabled="!_sessionStateContainer.Cuesheet.IsRecording" ReadData="OnReadDataAutocompleteTitle" SelectedValueChanged="OnSelectedValueChangedTrackTitle" @onkeydown="OnKeyDownRecordTitle">
                                    <ItemContent>
                                        @if (context.Item.Disambiguation != null)
                                        {
                                            <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                        }
                                        else
                                        {
                                            <Paragraph>@context.Text</Paragraph>
                                        }
                                    </ItemContent>
                                </Autocomplete>
                            </FieldBody>
                        </Field>
                    </Column>
                    <Column>
                        <Button Color="Color.Primary" Clicked="AddTrackRecordingClicked" Disabled="!_sessionStateContainer.Cuesheet.IsRecording" @onkeydown="OnKeyDownAddRecording">@_localizer["Add new track"]</Button>
                    </Column>
                </Row>
            </CollapseBody>
        </Collapse>
        <Collapse Visible="cuesheetTracksVisible">
            <CollapseHeader>
                <Button Clicked="(() => cuesheetTracksVisible = !cuesheetTracksVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Tracks"]</Heading></Button>
            </CollapseHeader>
            <CollapseBody>
                <TrackList />
            </CollapseBody>
        </Collapse>
    </Accordion>
    <br />


    @if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
    {
        <Card>
            <CardHeader>@_localizer["Recording"]</CardHeader>
            @if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
            {
                <CardBody>
                    <Button Color="Color.Primary" Type="ButtonType.Link" To="@_sessionStateContainer.Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@_sessionStateContainer.Cuesheet.Audiofile.Name">@_localizer["Download recorded audio"]</Button>
                </CardBody>
            }
        </Card>
    }
</Column>

@code {
    RecordOptions? recordOptions;
    ApplicationOptions? applicationOptions;

    public void Dispose()
    {
        _jsRuntime.InvokeVoidAsync("closeAudioRecording");
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged -= SessionStateContainer_CuesheetChanged;
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionsSaved;
    }

    [JSInvokable()]
    public Task AudioRecordingFinished(String url)
    {
        var fileName = Audiofile.RecordingFileName;
        if (recordOptions != null)
        {
            fileName = recordOptions.RecordedAudiofilename;
        }
        var audiofile = new Audiofile(fileName, url, Audiofile.AudioCodecWEBM, _httpClient, true);
        _ = audiofile.LoadContentStream();
        _sessionStateContainer.Cuesheet.Audiofile = audiofile;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Autocomplete<MusicBrainzArtist, Guid>? autocompleteArtist;
    Autocomplete<MusicBrainzTrack, Guid>? autocompleteTitle;

    Track currentRecordingTrack = new Track();

    Boolean cuesheetDataVisible = false;
    Boolean recordControlVisible = true;
    Boolean enterNewTrackVisible = true;
    Boolean cuesheetTracksVisible = true;
    Boolean recordOptionsVisible = false;

    IEnumerable<MusicBrainzArtist>? autocompleteArtists;
    IEnumerable<MusicBrainzTrack>? autocompleteTitles;

    protected override async Task OnInitializedAsync()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("GLOBAL.SetViewModeRecordReference", dotNetReference);
        await _jsRuntime.InvokeVoidAsync("setupAudioRecording");

        recordOptions = await _localStorageOptionsProvider.GetOptions<RecordOptions>();
        applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();

        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged += SessionStateContainer_CuesheetChanged;
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionsSaved;
    }

    async Task OnKeyDownRecordArtist(KeyboardEventArgs args)
    {
        _logger.LogDebug("args = {0}", args);
        if ((args.Key == "Enter") && (args.CtrlKey == false) && (args.AltKey == false) && (args.MetaKey == false) && (args.Repeat == false) && (args.ShiftKey == false))
        {
            if (autocompleteTitle != null)
            {
                await autocompleteTitle.Focus();
            }
        }
    }

    async Task OnKeyDownRecordTitle(KeyboardEventArgs args)
    {
        _logger.LogDebug("args = {0}", args);
        if ((args.Key == "Enter") && (args.CtrlKey == false) && (args.AltKey == false) && (args.MetaKey == false) && (args.Repeat == false) && (args.ShiftKey == false))
        {
            await AddTrackRecordingClicked();
        }
    }

    async Task OnKeyDownAddRecording(KeyboardEventArgs args)
    {
        _logger.LogDebug("args = {0}", args);
        if ((args.Key == "Enter") && (args.CtrlKey == false) && (args.AltKey == false) && (args.MetaKey == false) && (args.Repeat == false) && (args.ShiftKey == false))
        {
            await AddTrackRecordingClicked();
        }
    }

    async Task AddTrackRecordingClicked()
    {
        if (_sessionStateContainer.Cuesheet.IsRecording == true)
        {
            _sessionStateContainer.Cuesheet.AddTrack(currentRecordingTrack, applicationOptions, recordOptions);
            currentRecordingTrack = new Track();
            if (autocompleteTitle != null)
            {
                await autocompleteTitle.Clear();
                await autocompleteTitle.Focus();
            }
            if (autocompleteArtist != null)
            {
                await autocompleteArtist.Clear();
                await autocompleteArtist.Focus();
            }
        }
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void SessionStateContainer_CuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    async Task OnReadDataAutocompleteArtist(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            var artists = await _musicBrainzDataProvider.SearchArtistAsync(autocompleteReadDataEventArgs.SearchValue);
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                autocompleteArtists = artists;
            }
        }
    }

    async Task OnReadDataAutocompleteTitle(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            var titles = await _musicBrainzDataProvider.SearchTitleAsync(autocompleteReadDataEventArgs.SearchValue, currentRecordingTrack.Artist);
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                autocompleteTitles = titles;
            }
        }
    }

    async Task OnSelectedValueChangedTrackTitle(Guid selectedValue)
    {
        if (String.IsNullOrEmpty(currentRecordingTrack.Artist))
        {
            var trackDetails = await _musicBrainzDataProvider.GetDetailsAsync(selectedValue);
            if (trackDetails != null)
            {
                currentRecordingTrack.Artist = trackDetails.Artist;
            }
        }
    }

    async Task RecordingStarted()
    {
        await _jsRuntime.InvokeVoidAsync("startAudioRecording");
        if ((_sessionStateContainer.Cuesheet.Audiofile != null) && (_sessionStateContainer.Cuesheet.Audiofile.IsRecorded))
        {
            await _jsRuntime.InvokeVoidAsync("URL.revokeObjectURL", _sessionStateContainer.Cuesheet.Audiofile.ObjectURL);
        }
        _sessionStateContainer.Cuesheet.Audiofile = null;
        if (autocompleteArtist != null)
        {
            await autocompleteArtist.Focus();
        }
    }

    async Task RecordingStopped()
    {
        await _jsRuntime.InvokeVoidAsync("stopAudioRecording");
    }

    void LocalStorageOptionsProvider_OptionsSaved(object? sender, IOptions options)
    {
        if (options is RecordOptions recordingOptions)
        {
            recordOptions = recordingOptions;
        }
        if (options is ApplicationOptions applicationOption)
        {
            applicationOptions = applicationOption;
        }
    }
}
