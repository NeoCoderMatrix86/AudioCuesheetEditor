<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject ITextLocalizerService _localizationService
@inject ITextLocalizer<ExportProfilesDialog> _localizer
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject ILogger<ExportProfilesDialog> _logger
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject HotKeys _hotKeys
@inject SessionStateContainer _sessionStateContainer
@inject ITextLocalizer<ValidationMessage> _validationMessageLocalizer

<Validations @ref="validations">
    <Modal @ref="modalExportProfiles" VisibleChanged="ModalExportProfiles_VisibleChanged">
        <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <ModalTitle>
                    @_localizer["Exportprofiles"]
                </ModalTitle>
                <CloseButton Clicked="ModalExportProfilesCloseClicked" />
            </ModalHeader>
            <ModalBody>
                <Field Horizontal="true" JustifyContent="JustifyContent.End">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Select exportprofile"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <SelectList TItem="SelectExportProfileModel" TValue="Guid?" Data="@exportProfileModels" TextField="@((item)=>item.ExportProfile.Name)" ValueField="@((item)=>item.Id)" SelectedValue="selectedExportProfileId" SelectedValueChanged="SelectedExportProfileChanged" />
                    </FieldBody>
                </Field>
                <Button Color="Color.Primary" Clicked="OnAddNewExportProfileClicked">@_localizer["Add new exportprofile"]</Button>
                <Button Color="Color.Danger" Clicked="OnDeleteExportProfileClicked">@_localizer["Delete selected exportprofile"]</Button>
                <Divider />
                @if (SelectedExportProfile != null)
                {
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Name"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Placeholder="@_localizer["Enter exportprofile name here"]" @bind-Text="SelectedExportProfile.Name" />
                        </FieldBody>
                    </Field>
                    <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, SelectedExportProfile, x => x.Filename, _validationMessageLocalizer, token)">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="@_localizer["Enter exportprofile filename here"]" @bind-Text="SelectedExportProfile.Filename">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, SelectedExportProfile, x => x.SchemeHead, _validationMessageLocalizer, token)">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">
                                <Tooltip Text="@_localizer["Enter exportschemehead here tooltip"]" Placement="TooltipPlacement.TopEnd">
                                    @_localizer["Exportprofilescheme head"]
                                </Tooltip>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit Placeholder="@_localizer["Enter exportscheme head here"]" @bind-Text="SelectedExportProfile.SchemeHead">
                                            <Feedback>
                                                <ValidationError Tooltip />
                                            </Feedback>
                                        </TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Secondary">
                                                @_localizer["Select placeholder"]
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @foreach (var availableScheme in Exportprofile.AvailableCuesheetSchemes)
                                                {
                                                    <DropdownItem Clicked="() => SelectedExportProfile.SchemeHead += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </Addon>
                                </Addons>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, SelectedExportProfile, x => x.SchemeTracks, _validationMessageLocalizer, token)">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">
                                <Tooltip Text="@_localizer["Enter exportscheme track here tooltip"]" Placement="TooltipPlacement.TopEnd">
                                    @_localizer["Exportprofilescheme track"]
                                </Tooltip>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit Placeholder="@_localizer["Enter exportscheme track here"]" @bind-Text="@SelectedExportProfile.SchemeTracks">
                                            <Feedback>
                                                <ValidationError Tooltip />
                                            </Feedback>
                                        </TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Secondary">
                                                @_localizer["Select placeholder"]
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @foreach (var availableScheme in Exportprofile.AvailableTrackSchemes)
                                                {
                                                    <DropdownItem Clicked="() => SelectedExportProfile.SchemeTracks += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </Addon>
                                </Addons>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, SelectedExportProfile, x => x.SchemeFooter, _validationMessageLocalizer, token)">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">
                                <Tooltip Text="@_localizer["Enter exportscheme footer here tooltip"]" Placement="TooltipPlacement.TopStart">
                                    @_localizer["Exportprofilescheme footer"]
                                </Tooltip>    
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit Placeholder="@_localizer["Enter exportscheme footer here"]" @bind-Text="SelectedExportProfile.SchemeFooter">
                                            <Feedback>
                                                <ValidationError Tooltip />
                                            </Feedback>
                                        </TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Secondary">
                                                @_localizer["Select placeholder"]
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @foreach (var availableScheme in Exportprofile.AvailableCuesheetSchemes)
                                                {
                                                    <DropdownItem Clicked="() => SelectedExportProfile.SchemeFooter += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </Addon>
                                </Addons>
                            </FieldBody>
                        </Field>
                    </Validation>
                }
            </ModalBody>
            <ModalFooter>
                <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString(!((SelectedExportProfile != null) && ExportPossible), "Exportprofile is not exportable. Please check validationerrors and solve errors in order to download export.")">
                    <Button Color="Color.Primary" Disabled="!((SelectedExportProfile != null) && ExportPossible)" Clicked="OnDownloadExportProfileClicked">@_localizer["Download export"]</Button>
                </Tooltip>
                <Button Color="Color.Secondary" Clicked="ModalExportProfilesCloseClicked">@_localizer["Close"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
</Validations>

@code {
    //TODO: Remove (and localization also)
    Modal? modalExportProfiles;
    IReadOnlyCollection<SelectExportProfileModel> exportProfileModels = default!;
    Guid? selectedExportProfileId;
    HotKeysContext? hotKeysContext;
    Boolean modalExportProfilesVisible = false;
    ExportfileGenerator? exportfileGenerator;
    Validations? validations;

    public class SelectExportProfileModel
    {
        public Guid Id { get; private set; }
        public Exportprofile ExportProfile { get; set; }

        public SelectExportProfileModel(Exportprofile exportProfile)
        {
            if (exportProfile == null)
            {
                throw new ArgumentNullException(nameof(exportProfile));
            }
            Id = Guid.NewGuid();
            ExportProfile = exportProfile;
        }
    }

    public Exportprofile? SelectedExportProfile
    {
        get
        {
            if ((exportProfileModels != null) && (selectedExportProfileId != Guid.Empty))
            {
                var exportProfile = exportProfileModels.FirstOrDefault(x => x.Id == selectedExportProfileId);
                if (exportProfile != null)
                {
                    return exportProfile.ExportProfile;
                }
            }
            return null;
        }
    }

    public void Dispose()
    {
        hotKeysContext?.Dispose();
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
    }

    public async Task Show()
    {
        if (modalExportProfiles != null)
        {
            await modalExportProfiles.Show();
            modalExportProfilesVisible = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;

        if (exportProfileModels == null)
        {
            var options = await _localStorageOptionsProvider.GetOptions<ExportOptions>();
            exportProfileModels = options.ExportProfiles.Select(x => new SelectExportProfileModel(x)).ToList().AsReadOnly();
            selectedExportProfileId = exportProfileModels.First().Id;
            UpdateExportfileGenerator();
        }

        hotKeysContext = _hotKeys.CreateContext()
            .Add(Key.Enter, OnEnterKeyDown);

        exportfileGenerator = new ExportfileGenerator(_sessionStateContainer.Cuesheet);

        await base.OnInitializedAsync();
    }

    Boolean ExportPossible
    {
        get
        {
            Boolean exportPossible = false;
            if (exportfileGenerator != null)
            {
                exportPossible = exportfileGenerator.CanWrite(ExportType.Exportprofile);
            }
            return exportPossible;
        }
    }

    async ValueTask OnEnterKeyDown()
    {
        if (modalExportProfilesVisible)
        {
            await OnDownloadExportProfileClicked();
        }
    }

    async Task ModalExportProfilesCloseClicked()
    {
        _logger.LogInformation("ModalExportProfilesCloseClicked");
        await SaveExportProfiles();
        if (modalExportProfiles != null)
        {
            await modalExportProfiles.Hide();
        }
    }

    private void OnAddNewExportProfileClicked()
    {
        _logger.LogInformation("OnAddNewExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.Add(new SelectExportProfileModel(new Exportprofile()));
        exportProfileModels = list.AsReadOnly();
        selectedExportProfileId = list.Last().Id;
        UpdateExportfileGenerator();
    }

    private void OnDeleteExportProfileClicked()
    {
        _logger.LogInformation("OnDeleteExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.RemoveAll(x => x.Id == selectedExportProfileId);
        exportProfileModels = list.AsReadOnly();
        if (exportProfileModels.Count > 0)
        {
            selectedExportProfileId = exportProfileModels.First().Id;
            UpdateExportfileGenerator();
        }
    }

    private async Task SaveExportProfiles()
    {
        _logger.LogInformation("SaveExportProfiles");
        if (exportProfileModels != null)
        {
            var options = await _localStorageOptionsProvider.GetOptions<ExportOptions>();
            options.ExportProfiles = exportProfileModels.Select(x => x.ExportProfile).ToList().AsReadOnly();
            await _localStorageOptionsProvider.SaveOptions(options);
        }
    }

    async Task OnDownloadExportProfileClicked()
    {
        _logger.LogInformation("OnDownloadExportProfileClicked with SelectedExportProfile = {0}", SelectedExportProfile);
        if ((SelectedExportProfile != null) && ExportPossible)
        {
            await SaveExportProfiles();
            if (exportfileGenerator != null)
            {
                foreach (var result in exportfileGenerator.GenerateExportfiles(ExportType.Exportprofile))
                {
                    await _blazorDownloadFileService.DownloadFile(result.Filename, result.Content, "application/octet-stream");
                }
            }
            if (modalExportProfiles != null)
            {
                await modalExportProfiles.Hide();
            }
        }
    }

    private void SelectedExportProfileChanged(Guid? newValue)
    {
        _logger.LogInformation("SelectedExportProfileChanged with {0}", newValue);
        selectedExportProfileId = newValue;
        UpdateExportfileGenerator();
        validations?.ValidateAll().GetAwaiter().GetResult();
        StateHasChanged();
    }

    private String? GetLocalizedString(Boolean expressionToCheck, String localizedStringName)
    {
        if (expressionToCheck == true)
        {
            return _localizer[localizedStringName];
        }
        else
        {
            return null;
        }
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void ModalExportProfiles_VisibleChanged(Boolean visible)
    {
        modalExportProfilesVisible = visible;
    }

    void UpdateExportfileGenerator()
    {
        if (exportfileGenerator != null)
        {
            exportfileGenerator.Exportprofile = SelectedExportProfile;
        }
    }
}
