<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject ITextLocalizerService _localizationService
@inject ITextLocalizer<ExportProfilesDialog> _localizer
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject ILogger<ExportProfilesDialog> _logger
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject HotKeys _hotKeys
@inject SessionStateContainer _sessionStateContainer

<Modal @ref="modalExportProfiles">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>
                @_localizer["Exportprofiles"]
            </ModalTitle>
            <CloseButton Clicked="ModalExportProfilesCloseClicked" />
        </ModalHeader>
        <ModalBody>
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Select exportprofile"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <SelectList TItem="SelectExportProfileModel" TValue="Guid?" Data="@exportProfileModels" TextField="@((item)=>item.ExportProfile.Name)" ValueField="@((item)=>item.Id)" SelectedValue="selectedExportProfileId" SelectedValueChanged="SelectedExportProfileChanged" />
                </FieldBody>
            </Field>
            <Button Color="Color.Primary" Clicked="OnAddNewExportProfileClicked">@_localizer["Add new exportprofile"]</Button>
            <Button Color="Color.Danger" Clicked="OnDeleteExportProfileClicked">@_localizer["Delete selected exportprofile"]</Button>
            <Divider />
            @if (SelectedExportProfile != null)
            {
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Name"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@_localizer["Enter exportprofile name here"]" @bind-Text="SelectedExportProfile.Name" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@_localizer["Enter exportprofile filename here"]" @bind-Text="SelectedExportProfile.FileName" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Exportprofilescheme head"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit id="enterExportSchemeHead" Placeholder="@_localizer["Enter exportscheme head here"]" @bind-Text="SelectedExportProfile.SchemeHead.Scheme">
                                    <Tooltip Text="@_localizer["Enter exportschemehead here tooltip"]" TriggerTargetId="enterExportSchemeHead" Placement="TooltipPlacement.TopStart">
                                    </Tooltip>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportscheme.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeHead.Scheme += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeHead.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@_localizer["Exportprofilescheme head validationerrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeHead.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(validationMessageLocalizer)</AlertMessage>
                        </Alert>
                    }
                }
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Exportprofilescheme track"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit id="enterExportSchemeTrack" Placeholder="@_localizer["Enter exportscheme track here"]" @bind-Text="@SelectedExportProfile.SchemeTracks.Scheme">
                                    <Tooltip Text="@_localizer["Enter exportscheme track here tooltip"]" TriggerTargetId="enterExportSchemeTrack" Placement="TooltipPlacement.TopStart">
                                    </Tooltip>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportscheme.AvailableTrackSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeTracks.Scheme += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeTracks.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@_localizer["Exportprofilescheme track validationerrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeTracks.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(validationMessageLocalizer)</AlertMessage>
                        </Alert>
                    }
                }
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Exportprofilescheme footer"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit id="enterExportSchemeFooter" Placeholder="@_localizer["Enter exportscheme footer here"]" @bind-Text="SelectedExportProfile.SchemeFooter.Scheme">
                                    <Tooltip Text="@_localizer["Enter exportscheme footer here tooltip"]" TriggerTargetId="enterExportSchemeFooter" Placement="TooltipPlacement.TopStart">
                                    </Tooltip>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportscheme.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => SelectedExportProfile.SchemeFooter.Scheme += availableScheme.Value">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
                @if ((SelectedExportProfile != null) && (SelectedExportProfile.SchemeFooter.IsValid == false))
                {
                    <Heading Size="HeadingSize.Is6">@_localizer["Exportprofilescheme footer validationerrors"]</Heading>
                    @foreach (var validationError in SelectedExportProfile.SchemeFooter.ValidationErrors.OrderBy(x => x.Type))
                    {
                        <Alert Visible="true" Color="validationError.Type == ValidationErrorType.Error ? Color.Danger : Color.Warning">
                            <AlertMessage>@validationError.Message.GetMessageLocalized(validationMessageLocalizer)</AlertMessage>
                        </Alert>
                    }
                }
            }
        </ModalBody>
        <ModalFooter>
            <Tooltip Placement="TooltipPlacement.Top" Text="@GetLocalizedString(!((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true)), "Exportprofile is not exportable. Please check validationerrors and solve errors in order to download export.")">
                <Button Color="Color.Primary" Disabled="!((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true))" Clicked="OnDownloadExportProfileClicked">@_localizer["Download export"]</Button>
            </Tooltip>
            <Button Color="Color.Secondary" Clicked="ModalExportProfilesCloseClicked">@_localizer["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Modal modalExportProfiles = default!;
    IReadOnlyCollection<SelectExportProfileModel> exportProfileModels = default!;
    Guid? selectedExportProfileId;
    HotKeysContext? hotKeysContext;
    ITextLocalizer<ValidationMessage> validationMessageLocalizer = default!;

    public class SelectExportProfileModel
    {
        public Guid Id { get; private set; }
        public Exportprofile ExportProfile { get; set; }

        public SelectExportProfileModel(Exportprofile exportProfile)
        {
            if (exportProfile == null)
            {
                throw new ArgumentNullException(nameof(exportProfile));
            }
            Id = Guid.NewGuid();
            ExportProfile = exportProfile;
        }
    }

    public Exportprofile? SelectedExportProfile
    {
        get
        {
            if ((exportProfileModels != null) && (selectedExportProfileId != Guid.Empty))
            {
                var exportProfile = exportProfileModels.FirstOrDefault(x => x.Id == selectedExportProfileId);
                if (exportProfile != null)
                {
                    return exportProfile.ExportProfile;
                }
            }
            return null;
        }
    }

    public void Dispose()
    {
        if (hotKeysContext != null)
        {
            hotKeysContext.Dispose();
        }
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
    }

    public async Task Show()
    {
        if (modalExportProfiles != null)
        {
            await modalExportProfiles.Show();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;

        validationMessageLocalizer = new TextLocalizer<ValidationMessage>(_localizationService);

        if (exportProfileModels == null)
        {
            var options = await _localStorageOptionsProvider.GetOptions<ExportOptions>();
            exportProfileModels = options.ExportProfiles.Select(x => new SelectExportProfileModel(x)).ToList().AsReadOnly();
            selectedExportProfileId = exportProfileModels.First().Id;
        }

        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKeys.None, Keys.Enter, OnDownloadExportProfileClicked);

        await base.OnInitializedAsync();
    }

    private async Task ModalExportProfilesCloseClicked()
    {
        _logger.LogInformation("ModalExportProfilesCloseClicked");
        await SaveExportProfiles();
        await modalExportProfiles.Hide();
    }

    private void OnAddNewExportProfileClicked()
    {
        _logger.LogInformation("OnAddNewExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.Add(new SelectExportProfileModel(new Exportprofile()));
        exportProfileModels = list.AsReadOnly();
        selectedExportProfileId = list.Last().Id;
    }

    private void OnDeleteExportProfileClicked()
    {
        _logger.LogInformation("OnDeleteExportProfileClicked");
        var list = exportProfileModels.ToList();
        list.RemoveAll(x => x.Id == selectedExportProfileId);
        exportProfileModels = list.AsReadOnly();
        if (exportProfileModels.Count > 0)
        {
            selectedExportProfileId = exportProfileModels.First().Id;
        }
    }

    private async Task SaveExportProfiles()
    {
        _logger.LogInformation("SaveExportProfiles");
        if (exportProfileModels != null)
        {
            var options = await _localStorageOptionsProvider.GetOptions<ExportOptions>();
            options.ExportProfiles = exportProfileModels.Select(x => x.ExportProfile).ToList().AsReadOnly();
            await _localStorageOptionsProvider.SaveOptions(options);
        }
    }

    private async Task OnDownloadExportProfileClicked()
    {
        _logger.LogInformation("OnDownloadExportProfileClicked with SelectedExportProfile = {0}", SelectedExportProfile);
        if ((SelectedExportProfile != null) && (SelectedExportProfile.IsExportable == true))
        {
            await SaveExportProfiles();
            await _blazorDownloadFileService.DownloadFile(SelectedExportProfile.FileName, SelectedExportProfile.GenerateExport(_sessionStateContainer.Cuesheet), "text/plain");
            await modalExportProfiles.Hide();
        }
    }

    private void SelectedExportProfileChanged(Guid? newValue)
    {
        _logger.LogInformation("SelectedExportProfileChanged with {0}", newValue);
        selectedExportProfileId = newValue;
        StateHasChanged();
    }

    private String? GetLocalizedString(Boolean expressionToCheck, String localizedStringName)
    {
        if (expressionToCheck == true)
        {
            return _localizer[localizedStringName];
        }
        else
        {
            return null;
        }
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }
}
