<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inherits BaseLocalizedComponent

@inject IStringLocalizer<CuesheetData> _localizer
@inject SessionStateContainer _sessionStateContainer
@inject ValidationService _validationService
@inject FileInputManager _fileInputManager

@if (Cuesheet != null)
{
    <MudForm Model="Cuesheet">
        <MudTextField @bind-Value="Cuesheet.Artist" For="(() => Cuesheet.Artist)" Validation="_validationService.ValidateProperty" Label="@_localizer["Cuesheet artist"]" Placeholder="@_localizer["Enter the cuesheet artist here"]" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="Cuesheet.Title" For="(() => Cuesheet.Title)" Validation="_validationService.ValidateProperty" Label="@_localizer["Cuesheet title"]" Placeholder="@_localizer["Enter the cuesheet title here"]" Variant="Variant.Outlined" />
        <FileInput Id="@fileInputAudiofileId" Label="@_localizer["Audiofile"]" OnFileSelected="OnAudiofileSelected" />
        <MudTextField @bind-Value="Cuesheet.Cataloguenumber" For="(() => Cuesheet.Cataloguenumber)" Validation="_validationService.ValidateProperty" Label="@_localizer["Cataloguenumber"]" Placeholder="@_localizer["Enter the cuesheet catalogue number here"]" Variant="Variant.Outlined" />
    </MudForm>
}
@code {
    //TODO
    //TODO: Localization
    //TODO: More fields when using full edit mode? Maybe another expand should be used for not so much used informations

    [Parameter]
    [EditorRequired]
    public Cuesheet? Cuesheet { get; set; }

    string? fileInputAudiofileId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (fileInputAudiofileId == null)
        {
            fileInputAudiofileId = $"Input_Audiofile_{Guid.NewGuid()}";
        }
    }

    async Task OnAudiofileSelected(IBrowserFile? browserFile)
    {
        if ((browserFile != null) && (fileInputAudiofileId != null))
        {
            var audioFile = await _fileInputManager.CreateAudiofileAsync(fileInputAudiofileId, browserFile);
            //TODO: Switch for cuesheet (import or default) and attach the audiofile
        }
        //TODO: Validate Cuesheet
    }
}
