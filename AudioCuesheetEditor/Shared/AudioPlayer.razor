<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@using Toolbelt.Blazor.HotKeys
@implements IDisposable

@inject ITextLocalizer<AudioPlayer> _localizer
@inject IHowl _howl
@inject HotKeys _hotKeys
@inject ITextLocalizerService _localizationService

<Card>
    <CardHeader><h3>@_localizer["Audioplayer"]</h3></CardHeader>
    <CardBody>
        <Row>
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnTablet.Is4.OnMobile">
                @if (CurrentPlaybackPosition.HasValue)
                {
                    @CurrentPlaybackPosition.Value.ToString("hh\\:mm\\:ss")
                }
                else
                {
                    @String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is10.OnFullHD.Is8.OnWidescreen.Is6.OnTablet.Is4.OnMobile">
                <Slider TValue="double" Min="0.0" Max="100.0" ValueChanged="OnSliderValueChanged" Value="CurrentSliderValue"></Slider>
            </Column>
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnTablet.Is4.OnMobile">
                @if (TotalTime.HasValue)
                {
                    @TotalTime.Value.ToString("hh\\:mm\\:ss")
                }
                else
                {
                    @String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)
                }
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnTablet.Is4.OnMobile">
                @if (AudioIsPlaying == true)
                {
                    <Button Color="Color.Primary" Class="oi oi-media-pause" Clicked="OnPlayClicked" Disabled="!PlaybackPossible" />
                }
                else
                {
                    <Button Color="Color.Primary" Class="oi oi-media-play" Clicked="OnPlayClicked" Disabled="!PlaybackPossible" />
                }
            </Column>
            <Column>
                <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Set playback to begin of previous track"]">
                    <Button Color="Color.Secondary" Class="oi oi-media-step-backward" Clicked="() => OnPlayNextPreviousTrackClicked(true)" Disabled="!(PlaybackPossible && PreviousButtonEnabled)" />
                </Tooltip>
                <Button Color="Color.Primary" Class="oi oi-media-stop" Clicked="OnStopClicked" />
                <Tooltip Placement="TooltipPlacement.Top" Text="@_localizer["Set playback to begin of next track"]">
                    <Button Color="Color.Secondary" Class="oi oi-media-step-forward" Clicked="() => OnPlayNextPreviousTrackClicked()" Disabled="!(PlaybackPossible && NextButtonEnabled)" />
                </Tooltip>
            </Column>
        </Row>
    </CardBody>
</Card>

@code {
    private Timer audioUpdateTimer;
    private int soundId;
    private Track currentlyPlayingTrack;
    private HotKeysContext hotKeysContext;
    private Boolean paused;
    private Audiofile audioFile;
    private Cuesheet cuesheet;

    [Parameter]
    public Cuesheet Cuesheet
    {
        get { return cuesheet; }
        set
        {
            if (cuesheet != null)
            {
                cuesheet.AudioFileChanged -= Cuesheet_AudioFileChanged;
                if (cuesheet.Audiofile != null)
                {
                    cuesheet.Audiofile.ContentStreamLoaded -= AudioFile_ContentStreamLoaded;
                }
            }
            //Also reset the duration, since audio file will change also
            TotalTime = null;
            cuesheet = value;
            if (cuesheet != null)
            {
                cuesheet.AudioFileChanged += Cuesheet_AudioFileChanged;
                if (cuesheet.Audiofile != null)
                {
                    if (cuesheet.Audiofile.IsContentStreamLoaded == false)
                    {
                        cuesheet.Audiofile.ContentStreamLoaded += AudioFile_ContentStreamLoaded;
                    }
                    else
                    {
                        AnalyseAudioFile();
                    }
                }
            }
        }
    }

    [Parameter]
    public EventCallback<Track> CurrentlyPlayingTrackChanged { get; set; }

    public TimeSpan? CurrentPlaybackPosition { get; private set; }
    public TimeSpan? TotalTime { get; private set; }
    public Boolean AudioIsPlaying { get; private set; }

    public void Dispose()
    {
        hotKeysContext.Dispose();
        _howl.OnPlay -= HowlOnPlay;
        _howl.OnPause -= HowlOnPause;
        _howl.OnEnd -= HowlOnEnd;
        _howl.OnStop -= HowlOnStop;
        audioUpdateTimer.Dispose();
    }

    public Boolean PlaybackPossible
    {
        get { return ((Cuesheet != null) && (Cuesheet.Audiofile != null) && (Cuesheet.Audiofile.PlaybackPossible == true)); }
    }

    public Boolean PreviousButtonEnabled
    {
        get
        {
            Boolean enabled = false;
            if (CurrentlyPlayingTrack != null)
            {
                var index = Cuesheet.Tracks.ToList().IndexOf(CurrentlyPlayingTrack);
                if (index >= 1)
                {
                    enabled = true;
                }
            }
            return enabled;
        }
    }

    public Boolean NextButtonEnabled
    {
        get
        {
            Boolean enabled = false;
            if (CurrentlyPlayingTrack != null)
            {
                var index = Cuesheet.Tracks.ToList().IndexOf(CurrentlyPlayingTrack);
                if (index < (Cuesheet.Tracks.Count - 1))
                {
                    enabled = true;
                }
            }
            return enabled;
        }
    }

    public Track CurrentlyPlayingTrack
    {
        get { return currentlyPlayingTrack; }
        private set
        {
            //Only fire the update, if the value has changed
            if (value != currentlyPlayingTrack)
            {
                currentlyPlayingTrack = value;
                CurrentlyPlayingTrackChanged.InvokeAsync(CurrentlyPlayingTrack);
            }
        }
    }

    public async Task OnPlayTrackClicked(Track trackToPlay)
    {
        if ((trackToPlay != null) && (trackToPlay.Begin != null))
        {
            if (AudioIsPlaying == false)
            {
                await OnPlayClicked();
            }
            await _howl.Seek(soundId, trackToPlay.Begin.Value);
            StateHasChanged();
        }
    }

    public async Task Reset()
    {
        await _howl.Stop(soundId);
    }

    protected Double CurrentSliderValue
    {
        get
        {
            Double sliderValue = 0.0;
            if ((TotalTime != null) && (CurrentPlaybackPosition != null))
            {
                sliderValue = (CurrentPlaybackPosition.Value / TotalTime.Value) * 100.0;
            }
            return sliderValue;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Attach shortcuts
        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKeys.Ctrl, Keys.P, OnPlayClicked)
            .Add(ModKeys.Ctrl, Keys.Left, () => OnPlayNextPreviousTrackClicked(true))
            .Add(ModKeys.Ctrl, Keys.Right, () => OnPlayNextPreviousTrackClicked())
            .Add(ModKeys.None, Keys.MediaPlayPause, OnPlayClicked)
            .Add(ModKeys.None, Keys.MediaTrackNext, () => OnPlayNextPreviousTrackClicked())
            .Add(ModKeys.None, Keys.MediaTrackPrevious, () => OnPlayNextPreviousTrackClicked(true))
            .Add(ModKeys.None, Keys.MediaStop, () => OnStopClicked());

        _localizationService.LocalizationChanged += delegate
        {
            //TODO: Detach!
            StateHasChanged();
        };

        //Setup audio timer
        audioUpdateTimer = new Timer(500);
        audioUpdateTimer.AutoReset = true;
        audioUpdateTimer.Elapsed += async delegate
        {
            AudioIsPlaying = await _howl.IsPlaying(soundId);
            if (AudioIsPlaying == true)
            {
                CurrentPlaybackPosition = await _howl.GetCurrentTime(soundId);
                if (TotalTime.HasValue == false)
                {
                    TotalTime = _howl.TotalTime;
                }
            }
            if ((Cuesheet != null) && (CurrentPlaybackPosition.HasValue == true))
            {
                CurrentlyPlayingTrack = Cuesheet.Tracks.SingleOrDefault(x => x.Begin.HasValue == true && x.End.HasValue == true && x.Begin.Value <= CurrentPlaybackPosition.Value && x.End.Value > CurrentPlaybackPosition.Value);
            }
            StateHasChanged();
        };

        _howl.OnPlay += HowlOnPlay;
        _howl.OnPause += HowlOnPause;
        _howl.OnEnd += HowlOnEnd;
        _howl.OnStop += HowlOnStop;

        await base.OnInitializedAsync();
    }

    private void HowlOnPlay(Howler.Blazor.Components.Events.HowlPlayEventArgs args)
    {
        paused = false;
        audioUpdateTimer.Start();
    }

    private void HowlOnPause(Howler.Blazor.Components.Events.HowlEventArgs args)
    {
        paused = true;
    }

    private void HowlOnEnd(Howler.Blazor.Components.Events.HowlEventArgs args)
    {
        paused = false;
        audioUpdateTimer.Stop();
        CurrentlyPlayingTrack = null;
        CurrentPlaybackPosition = null;
        AudioIsPlaying = false;
        StateHasChanged();
    }

    private void HowlOnStop(Howler.Blazor.Components.Events.HowlEventArgs args)
    {
        paused = false;
        audioUpdateTimer.Stop();
        CurrentlyPlayingTrack = null;
        CurrentPlaybackPosition = null;
        AudioIsPlaying = false;
        soundId = default;
        StateHasChanged();
    }

    private async Task OnSliderValueChanged(Double newvalue)
    {
        var newPosition = newvalue * TotalTime.Value / 100.0;
        if ((paused == true) || (AudioIsPlaying == false))
        {
            await OnPlayClicked();
        }
        await _howl.Seek(soundId, newPosition);
    }

    private async Task OnPlayClicked()
    {
        if (Cuesheet.Audiofile != audioFile)
        {
            soundId = default;
        }
        if (soundId != default)
        {
            await _howl.Pause(soundId);
            StateHasChanged();
        }
        else
        {
            if ((Cuesheet == null) || (Cuesheet.Audiofile == null) || (Cuesheet.Audiofile.PlaybackPossible == false))
            {
                throw new ArgumentNullException(nameof(Cuesheet.Audiofile));
            }
            var options = new HowlOptions
            {
                Sources = new[] { Cuesheet.Audiofile.ObjectURL },
                Formats = new[] { Cuesheet.Audiofile.AudioFileType.ToLower() },
                Html5 = true
            };
            audioFile = Cuesheet.Audiofile;
            soundId = await _howl.Play(options);
        }
    }

    private async Task OnPlayNextPreviousTrackClicked(Boolean previous = false)
    {
        if (CurrentlyPlayingTrack != null)
        {
            var index = Cuesheet.Tracks.ToList().IndexOf(CurrentlyPlayingTrack);
            Track trackToPlay = null;
            if (previous == false)
            {
                trackToPlay = Cuesheet.Tracks.ElementAtOrDefault(index + 1);
            }
            else
            {
                trackToPlay = Cuesheet.Tracks.ElementAtOrDefault(index - 1);
            }
            await OnPlayTrackClicked(trackToPlay);
        }
    }

    private async Task OnStopClicked()
    {
        await _howl.Stop(soundId);
    }

    private void Cuesheet_AudioFileChanged(object sender, EventArgs args)
    {
        if (Cuesheet.Audiofile != null)
        {
            Cuesheet.Audiofile.ContentStreamLoaded += AudioFile_ContentStreamLoaded;
        }
        TotalTime = null;
    }

    private void AudioFile_ContentStreamLoaded(object sender, EventArgs args)
    {
        AnalyseAudioFile();
    }

    private void AnalyseAudioFile()
    {
        if ((Cuesheet != null) && (Cuesheet.Audiofile != null) && (Cuesheet.Audiofile.Duration.HasValue) && (TotalTime.HasValue == false))
        {
            TotalTime = Cuesheet.Audiofile.Duration.Value;
            StateHasChanged();
        }
    }
}
