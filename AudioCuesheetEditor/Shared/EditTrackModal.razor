<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inject ITextLocalizer<EditTrackModal> _localizer
@inject ITextLocalizer<ValidationMessage> _validationMessageLocalizer
@inject MusicBrainzDataProvider _musicBrainzDataProvider
@inject SessionStateContainer _sessionStateContainer
@inject LocalStorageOptionsProvider _localStorageOptionsProvider

<Modal @ref="modalTrackEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@_localizer["Edit track details"]</ModalTitle>
            <CloseButton Clicked="() => ControlModalDialog(modalTrackEdit, false)" />
        </ModalHeader>
        <ModalBody>
            @if (IsMultipleEdit == false)
            {
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Position"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)))">
                            <NumericEdit TValue="uint?" Max="99" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.Position)))" @bind-Value="editedTrack.Position" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Artist"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Artist)))">
                            <Autocomplete TItem="MusicBrainzArtist" TValue="Guid" Data="autocompleteTrackArtistsEditDialog" FreeTyping TextField="@((item) => item.Name)" ValueField="@((item) => item.Id)" @bind-SelectedText="editedTrack.Artist" ReadData="OnReadDataAutocompleteTrackArtistEditDialog">
                                <ItemContent>
                                    @if (context.Item.Disambiguation != null)
                                    {
                                        <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@context.Text</Paragraph>
                                    }
                                </ItemContent>
                            </Autocomplete>
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Title"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Title)))">
                            <Autocomplete TItem="MusicBrainzTrack" TValue="Guid" Data="autocompleteTrackTitlesEditDialog" FreeTyping TextField="@((item) => item.Title)" ValueField="@((item) => item.Id)" @bind-SelectedText="editedTrack.Title" ReadData="(args) => OnReadDataAutocompleteTrackTitleEditDialog(args, editedTrack)" SelectedValueChanged="(value) => OnSelectedValueChangedTrackTitle(value, editedTrack)">
                                <ItemContent>
                                    @if (context.Item.Disambiguation != null)
                                    {
                                        <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@context.Text</Paragraph>
                                    }
                                </ItemContent>
                            </Autocomplete>
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Begin"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.Begin)))" Text="@GetTimespanAsString(editedTrack.Begin)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.Begin = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["End"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.End)))" Text="@GetTimespanAsString(editedTrack.End)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.End = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Length"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.Length)))" Text="@GetTimespanAsString(editedTrack.Length)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.Length = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Flags"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        @foreach (var flag in Flag.AvailableFlags)
                        {
                            <Tooltip Placement="TooltipPlacement.Bottom" Text="@_localizer[String.Format("Flag{0}Tooltip", flag.Name)]">
                                <Switch TValue="bool" Checked="editedTrack.Flags.Contains(flag)" CheckedChanged="(value) => editedTrack.SetFlag(flag, value == true ? SetFlagMode.Add : SetFlagMode.Remove)">@flag.Name</Switch>
                            </Tooltip>
                        }
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["PreGap"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.PreGap)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.PreGap)))" Text="@GetTimespanAsString(editedTrack.PreGap)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.PreGap = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["PostGap"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Tooltip Placement="TooltipPlacement.Bottom" Text="@editedTrack.GetValidationErrors(_validationMessageLocalizer, String.Format("{0}.{1}", nameof(Track), nameof(Track.PostGap)))">
                            <TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Class="@BootstrapUtility.GetCSSClassAlert(editedTrack, String.Format("{0}.{1}", nameof(Track), nameof(Track.PostGap)))" Text="@GetTimespanAsString(editedTrack.PostGap)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.PostGap = x, value)" Immediate="false" />
                        </Tooltip>
                    </FieldBody>
                </Field>
            }
            else
            {
                <Table Borderless>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>@_localizer["Change Value"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Property"]</TableHeaderCell>
                            <TableHeaderCell>@_localizer["Value"]</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackIsLinkedToPreviousTrack"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["IsLinkedToPreviousTrack"]</TableRowCell>
                            <TableRowCell><Switch TValue="bool" ReadOnly="!EditTrackIsLinkedToPreviousTrack" @bind-Checked="editedTrack.IsLinkedToPreviousTrack" ></Switch></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackPosition"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Position"]</TableRowCell>
                            <TableRowCell><NumericEdit TValue="uint?" Max="99" ReadOnly="!EditTrackPosition" @bind-Value="editedTrack.Position" /></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackArtist"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Artist"]</TableRowCell>
                            <TableRowCell>
                                <Autocomplete TItem="MusicBrainzArtist" TValue="Guid" Data="autocompleteTrackArtistsEditDialog" FreeTyping TextField="@((item) => item.Name)" ValueField="@((item) => item.Id)" ReadData="OnReadDataAutocompleteTrackArtistEditDialog" Disabled="!EditTrackArtist" @bind-SelectedText="editedTrack.Artist">
                                    <ItemContent>
                                        @if (context.Item.Disambiguation != null)
                                        {
                                            <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                        }
                                        else
                                        {
                                            <Paragraph>@context.Text</Paragraph>
                                        }
                                    </ItemContent>
                                </Autocomplete>
                            </TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackTitle"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Title"]</TableRowCell>
                                <TableRowCell>
                                    <Autocomplete TItem="MusicBrainzTrack" TValue="Guid" Data="autocompleteTrackTitlesEditDialog" FreeTyping TextField="@((item) => item.Title)" ValueField="@((item) => item.Id)" @bind-SelectedText="editedTrack.Title" Disabled="!EditTrackTitle" ReadData="(args) => OnReadDataAutocompleteTrackTitleEditDialog(args, editedTrack)" SelectedValueChanged="(value) => OnSelectedValueChangedTrackTitle(value, editedTrack)">
                                        <ItemContent>
                                            @if (context.Item.Disambiguation != null)
                                            {
                                                <Paragraph>@String.Format("{0} ({1})", context.Text, context.Item.Disambiguation)</Paragraph>
                                            }
                                            else
                                            {
                                                <Paragraph>@context.Text</Paragraph>
                                            }
                                        </ItemContent>
                                    </Autocomplete>
                                </TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackBegin"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Begin"]</TableRowCell>
                            <TableRowCell><TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Immediate="false" ReadOnly="!EditTrackBegin" Text="@GetTimespanAsString(editedTrack.Begin)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.Begin = x, value)" /></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackEnd"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["End"]</TableRowCell>
                            <TableRowCell><TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Immediate="false" ReadOnly="!EditTrackEnd" Text="@GetTimespanAsString(editedTrack.End)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.End = x, value)"/></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackLength"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Length"]</TableRowCell>
                            <TableRowCell><TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Immediate="false" ReadOnly="!EditTrackLength" Text="@GetTimespanAsString(editedTrack.Length)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.Length = x, value)" /></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackFlags"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["Flags"]</TableRowCell>
                            <TableRowCell>
                            @foreach (var flag in Flag.AvailableFlags)
                            {
                                <Tooltip Placement="TooltipPlacement.Bottom" Text="@_localizer[String.Format("Flag{0}Tooltip", flag.Name)]">
                                    <Switch TValue="bool" ReadOnly="!EditTrackFlags" Checked="editedTrack.Flags.Contains(flag)" CheckedChanged="(value) => editedTrack.SetFlag(flag, value == true ? SetFlagMode.Add : SetFlagMode.Remove)">@flag.Name</Switch>
                                </Tooltip>
                            }
                            </TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackPreGap"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["PreGap"]</TableRowCell>
                            <TableRowCell><TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Immediate="false" ReadOnly="!EditTrackPreGap" Text="@GetTimespanAsString(editedTrack.PreGap)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.PreGap = x, value)"/></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell><Switch TValue="bool" @bind-Checked="EditTrackPostGap"></Switch></TableRowCell>
                            <TableRowCell>@_localizer["PostGap"]</TableRowCell>
                            <TableRowCell><TextEdit MaskType="MaskType.RegEx" EditMask="^(\d[.][0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d[:][0-5]\d)|([0-2][0-3][:][0-5]\d)|[0-9:.]" Immediate="false" ReadOnly="!EditTrackPostGap" Text="@GetTimespanAsString(editedTrack.PostGap)" TextChanged="(value) => OnTimespanTextChanged(x => editedTrack.PostGap = x, value)"/></TableRowCell>
                        </TableRow>
                    </TableBody>
                </Table>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="EditTrackModalSaveClicked">@_localizer["Save changes"]</Button>
            <Button Color="Color.Secondary" Clicked="() => ControlModalDialog(modalTrackEdit, false)">@_localizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    public IReadOnlyCollection<Track>? TracksToEdit 
    { 
        get => _tracksToEdit;
        set 
        {
            _tracksToEdit = value;
            editedTrack = new();
            if (_tracksToEdit?.Count == 1)
            {
                editedTrack = _tracksToEdit.First().Clone();
            }
        }
    }

    [Parameter]
    public EventCallback TracksEdited { get; set; }

    public Boolean IsMultipleEdit { get => TracksToEdit?.Count > 1; }

    IEnumerable<MusicBrainzArtist>? autocompleteTrackArtistsEditDialog;
    IEnumerable<MusicBrainzTrack>? autocompleteTrackTitlesEditDialog;

    IReadOnlyCollection<Track>? _tracksToEdit;
    Modal? modalTrackEdit;
    Track editedTrack = new();

    Boolean _editTrackIsLinkedToPreviousTrack;
    Boolean _editTrackPosition;
    Boolean _editTrackArtist;
    Boolean _editTrackTitle;
    Boolean _editTrackBegin;
    Boolean _editTrackEnd;
    Boolean _editTrackLength;
    Boolean _editTrackFlags;
    Boolean _editTrackPreGap;
    Boolean _editTrackPostGap;

    public Boolean EditTrackIsLinkedToPreviousTrack
    {
        get => _editTrackIsLinkedToPreviousTrack;
        private set 
        {
            _editTrackIsLinkedToPreviousTrack = value;
            if (_editTrackIsLinkedToPreviousTrack == false)
            {
                editedTrack.IsLinkedToPreviousTrack = false;
            }
        }
    }

    public Boolean EditTrackPosition
    {
        get => _editTrackPosition;
        private set
        {
            _editTrackPosition = value;
            if (_editTrackPosition == false)
            {
                editedTrack.Position = null;
            }
        }
    }

    public Boolean EditTrackArtist
    {
        get => _editTrackArtist;
        private set
        {
            _editTrackArtist = value;
            if (_editTrackArtist == false)
            {
                editedTrack.Artist = null;
            }
        }
    }

    public Boolean EditTrackTitle
    {
        get => _editTrackTitle;
        private set
        {
            _editTrackTitle = value;
            if (_editTrackTitle == false)
            {
                editedTrack.Title = null;
            }
        }
    }

    public Boolean EditTrackBegin
    {
        get => _editTrackBegin;
        private set
        {
            _editTrackBegin = value;
            if (_editTrackBegin == false)
            {
                editedTrack.Begin = null;
            }
        }
    }

    public Boolean EditTrackEnd
    {
        get => _editTrackEnd;
        private set
        {
            _editTrackEnd = value;
            if (_editTrackEnd == false)
            {
                editedTrack.End = null;
            }
        }
    }

    public Boolean EditTrackLength
    {
        get => _editTrackLength;
        private set
        {
            _editTrackLength = value;
            if (_editTrackLength == false)
            {
                editedTrack.Length = null;
            }
        }
    }

    public Boolean EditTrackFlags
    {
        get => _editTrackFlags;
        private set
        {
            _editTrackFlags = value;
            if (_editTrackFlags == false)
            {
                editedTrack.SetFlags(new List<Flag>());
            }
        }
    }

    public Boolean EditTrackPreGap
    {
        get => _editTrackPreGap;
        private set
        {
            _editTrackPreGap = value;
            if (_editTrackPreGap == false)
            {
                editedTrack.PreGap = null;
            }
        }
    }

    public Boolean EditTrackPostGap
    {
        get => _editTrackPostGap;
        private set
        {
            _editTrackPostGap = value;
            if (_editTrackPostGap == false)
            {
                editedTrack.PostGap = null;
            }
        }
    }

    public async Task Show()
    {
        SetInitialState();
        if (modalTrackEdit != null)
        {
            await modalTrackEdit.Show();
        }
    }

    void SetInitialState()
    {
        EditTrackIsLinkedToPreviousTrack = false;
        EditTrackPosition = false;
        EditTrackArtist = false;
        EditTrackTitle = false;
        EditTrackBegin = false;
        EditTrackEnd = false;
        EditTrackLength = false;
        EditTrackFlags = false;
        EditTrackPreGap = false;
        EditTrackPostGap = false;
    }

    async Task EditTrackModalSaveClicked()
    {
        if (IsMultipleEdit)
        {
            //TODO: Set only specific values
        }
        else
        {
            TracksToEdit?.ToList().ForEach(x => x.CopyValues(editedTrack));
        }
        await ControlModalDialog(modalTrackEdit, false);
    }

    async Task ControlModalDialog(Modal? dialog, Boolean show)
    {
        if (dialog != null)
        {
            if (show)
            {
                await dialog.Show();
            }
            else
            {
                await dialog.Hide();
            }
        }
    }

    async Task OnReadDataAutocompleteTrackArtistEditDialog(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            var artists = await _musicBrainzDataProvider.SearchArtistAsync(autocompleteReadDataEventArgs.SearchValue);
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                autocompleteTrackArtistsEditDialog = artists;
            }
        }
    }

    async Task OnReadDataAutocompleteTrackTitleEditDialog(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs, Track track)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            var titles = await _musicBrainzDataProvider.SearchTitleAsync(autocompleteReadDataEventArgs.SearchValue, track.Artist);
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                autocompleteTrackTitlesEditDialog = titles;
            }
        }
    }

    async Task OnSelectedValueChangedTrackTitle(Guid selectedValue, Track track)
    {
        //TODO: Should this be used in multiple edit?
        switch (_sessionStateContainer.CurrentViewMode)
        {
            case ViewMode.ViewModeFull:
            case ViewMode.ViewModeImport:
                var trackDetails = await _musicBrainzDataProvider.GetDetailsAsync(selectedValue);
                if (trackDetails != null)
                {
                    track.Length = trackDetails.Length;
                    if (String.IsNullOrEmpty(track.Artist))
                    {
                        track.Artist = trackDetails.Artist;
                    }
                }
                break;
        }
    }

    String? GetTimespanAsString(TimeSpan? timeSpan, Boolean removeMilliseconds = false)
    {
        String? resultString = null;
        if ((timeSpan != null) && (timeSpan.HasValue))
        {
            if (removeMilliseconds == true)
            {
                resultString = timeSpan.Value.Subtract(new TimeSpan(0, 0, 0, 0, timeSpan.Value.Milliseconds)).ToString();
            }
            else
            {
                resultString = timeSpan.Value.ToString();
            }
        }
        return resultString;
    }

    async Task OnTimespanTextChanged(Action<TimeSpan?> setAction, String value)
    {
        var options = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        TimeSpan? result = DateTimeUtility.ParseTimeSpan(value, options?.TimeSpanFormat);
        setAction(result);
    }
}