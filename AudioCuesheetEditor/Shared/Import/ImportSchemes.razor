@using System.Linq.Expressions
<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<ImportSchemes> _localizer
@inject ValidationService _validationService
@inject IDialogService _dialogService

<MudStack Row AlignItems="AlignItems.Baseline" Justify="Justify.SpaceBetween">
    <MudText Typo="Typo.h5">@_localizer["Import schemes"]</MudText>
    <MudIconButton Icon="@Icons.Material.Outlined.LockReset" Color="Color.Warning" Variant="Variant.Filled" OnClick="ResetSchemes" />
</MudStack>
@if (ApplicationOptions != null)
{
    //TODO: Add buttons for reset, add profile, delete profile
    <MudSelect T="Importprofile" Variant="Variant.Outlined" Label="@_localizer["Select import profile"]" Value="ApplicationOptions.SelectedImportProfile" ValueChanged="(newSelectedProfile) => LocalStorageOptionsProvider.SaveOptionsValueAsync<ApplicationOptions>(x => x.SelectedImportProfile, newSelectedProfile)">
        @foreach (var profile in ApplicationOptions.ImportProfiles)
        {
            <MudSelectItem Value="profile">@profile.Name</MudSelectItem>
        }
    </MudSelect>
    <MudTextField T="string" Value="ApplicationOptions.SelectedImportProfile?.Name" Disabled="ApplicationOptions.SelectedImportProfile == null" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.Name, newValue)" Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.Name))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.Name))" Label="@_localizer["Name"]" Placeholder="@_localizer["Enter the name for this profile here"]" Variant="Variant.Outlined" />
    <MudStack Row>
        <MudTextField T="string" Text="@ApplicationOptions.SelectedImportProfile?.SchemeCuesheet" TextChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeCuesheet, newValue)"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeCuesheet))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeCuesheet))" 
                      Label="@_localizer["Scheme cuesheet"]" Placeholder="@_localizer["Enter the cuesheet scheme for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Label="@_localizer["Add placeholder"]" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.KeyboardArrowDown" Disabled="ApplicationOptions.SelectedImportProfile == null">
            @foreach (var scheme in TextImportScheme.AvailableSchemeCuesheet)
            {
                <MudMenuItem OnClick="() => 
                {
                    if (ApplicationOptions.SelectedImportProfile != null)
                    {
                        ApplicationOptions.SelectedImportProfile.SchemeCuesheet += scheme;
                    }
                }">
                    @_localizer[scheme]
                </MudMenuItem>
            }
        </MudMenu>
    </MudStack>
    <MudStack Row>
        <MudTextField T="string" Text="@ApplicationOptions.SelectedImportProfile?.SchemeTracks" TextChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeTracks, newValue)"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeTracks))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeTracks))"
                      Label="@_localizer["Scheme tracks"]" Placeholder="@_localizer["Enter the track scheme for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Label="@_localizer["Add placeholder"]" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.KeyboardArrowDown" Disabled="ApplicationOptions.SelectedImportProfile == null">
            @foreach (var scheme in TextImportScheme.AvailableSchemeCuesheet)
            {
                <MudMenuItem OnClick="() =>
                {
                    if (ApplicationOptions.SelectedImportProfile != null)
                    {
                        ApplicationOptions.SelectedImportProfile.SchemeTracks += scheme;
                    }
                }">
                    @_localizer[scheme]
                </MudMenuItem>
            }
        </MudMenu>
    </MudStack>
    <MudStack Row>
        <MudTextField T="string" @ref="importTimeInputFormatTextField" Text="@ApplicationOptions.SelectedImportProfile?.TimeSpanFormat?.Scheme" TextChanged="ImportTimeInputFormatChangedAsync"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile?.TimeSpanFormat, nameof(TimeSpanFormat.Scheme))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile?.TimeSpanFormat, nameof(TimeSpanFormat.Scheme))"
                      Label="@_localizer["Time input format for import"]" Placeholder="@_localizer["Enter the time format for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Label="@_localizer["Add placeholder"]" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.KeyboardArrowDown" Disabled="ApplicationOptions.SelectedImportProfile == null">
            @foreach (var scheme in TimeSpanFormat.AvailableTimespanScheme)
            {
                <MudMenuItem OnClick="() => AppendPlaceholderToTextField(importTimeInputFormatTextField, scheme)">@_localizer[scheme]</MudMenuItem>
            }
        </MudMenu>
    </MudStack>
}

@code {
    //TODO: Make header import profiles (naming)
    //TODO: fire events for scheme changes
    [Parameter]
    public EventCallback<string> ImportSchemeCuesheetChanged { get; set; }

    [Parameter]
    public EventCallback<string> ImportSchemeTracksChanged { get; set; }

    [Parameter]
    public EventCallback<string> ImportTimeInputFormatChanged { get; set; }

    MudTextField<string>? importTimeInputFormatTextField;

    void AppendPlaceholderToTextField(MudTextField<string>? mudTextField, string placeholder)
    {
        mudTextField?.SetText($"{mudTextField.Text}{placeholder}");
    }

    async Task ImportTimeInputFormatChangedAsync(string newScheme)
    {
        var profile = ApplicationOptions?.SelectedImportProfile;
        if (profile != null)
        {
            TimeSpanFormat? format = null;
            if (string.IsNullOrEmpty(newScheme))
            {
                format = null;
            }
            else
            {
                format = new() { Scheme = newScheme };
            }
            await LocalStorageOptionsProvider.SaveOptionsValueAsync<ApplicationOptions>(x => x.SelectedImportProfile!.TimeSpanFormat, format);
            await ImportTimeInputFormatChanged.InvokeAsync(newScheme);
        }
    }

    String? GetValidationErrorMessage(object? model, string propertyName)
    {
        String? validationErrorMessage = null;
        if (model != null)
        {
            var validationMessages = _validationService.Validate(model, propertyName);
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }

    async Task ResetSchemes()
    {
        if (ApplicationOptions != null)
        {
            var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.ConfirmText, _localizer["Are you sure you want to reset the import schemes to factory default?"] },
            };
            var dialog = await _dialogService.ShowAsync<ConfirmDialog>(_localizer["Confirm"], parameters);
            var result = await dialog.Result;
            if (result?.Canceled == false)
            {
                ApplicationOptions.ImportScheme = TextImportScheme.DefaultTextImportScheme;
                ApplicationOptions.ImportTimeSpanFormat = new();
                await LocalStorageOptionsProvider.SaveOptionsAsync(ApplicationOptions);
                await ImportSchemeCuesheetChanged.InvokeAsync(ApplicationOptions.ImportScheme.SchemeCuesheet);
                await ImportSchemeTracksChanged.InvokeAsync(ApplicationOptions.ImportScheme.SchemeTracks);
                await ImportTimeInputFormatChanged.InvokeAsync(ApplicationOptions.ImportTimeSpanFormat.Scheme);
            }
        }
    }
}
