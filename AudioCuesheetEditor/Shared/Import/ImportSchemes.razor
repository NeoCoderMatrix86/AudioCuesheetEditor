@using System.Linq.Expressions
<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<ImportSchemes> _localizer

<MudText Typo="Typo.h5">@_localizer["Import schemes"]</MudText>
<MudStack Row AlignItems="AlignItems.Baseline">
    <MudTextField T="string" @ref="importSchemeCuesheetTextField" Label="@_localizer["Textimport scheme cuesheet"]" Text="@ApplicationOptions?.ImportScheme.SchemeCuesheet" TextChanged="ImportSchemeCuesheetTextChangedAsync" Clearable />
    <MudMenu Label="@_localizer["Add placeholder"]" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.KeyboardArrowDown">
        @foreach (var scheme in TextImportScheme.AvailableSchemeCuesheet)
        {
            <MudMenuItem OnClick="() => AppendPlaceholderToImportSchemeCuesheetTextField(scheme)">@_localizer[scheme]</MudMenuItem>
        }
    </MudMenu>
</MudStack>

@code {
    //TODO
    //TODO: validation
    //TODO: track scheme
    //TODO: timeformat scheme

    [Parameter]
    public EventCallback<string> ImportSchemeCuesheetChanged { get; set; }

    MudTextField<string>? importSchemeCuesheetTextField;

    void AppendPlaceholderToImportSchemeCuesheetTextField(string placeholder)
    {
        importSchemeCuesheetTextField?.SetText($"{importSchemeCuesheetTextField.Text}{placeholder}");
    }

    async Task ImportSchemeCuesheetTextChangedAsync(string newScheme)
    {
        await LocalStorageOptionsProvider.SaveOptionsValue<ApplicationOptions>(x => x.ImportScheme.SchemeCuesheet, newScheme);
        await ImportSchemeCuesheetChanged.InvokeAsync(newScheme);
    }
}
