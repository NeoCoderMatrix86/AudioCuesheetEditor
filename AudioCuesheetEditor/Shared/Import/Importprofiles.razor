@using System.Linq.Expressions
<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<Importprofiles> _localizer
@inject ValidationService _validationService
@inject IDialogService _dialogService
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

@if (importOptions != null)
{
    <MudStack Row>
        <MudSelect T="Importprofile" Variant="Variant.Outlined" Label="@_localizer["Import profile"]" Value="importOptions.SelectedImportProfile" ValueChanged="SelectedImportProfileChangedAsync">
            @foreach (var profile in importOptions.ImportProfiles)
            {
                <MudSelectItem Value="profile">@profile.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButtonGroup OverrideStyles="false" Class="mt-2" Style="height: 56px;">
            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Add" OnClick="AddImportprofileClick" />
            <MudIconButton Color="Color.Warning" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Delete" Disabled="importOptions.SelectedImportProfile == null" OnClick="DeleteImportprofileClick" />
            <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.LockReset" OnClick="ResetSchemes" />
        </MudButtonGroup>
    </MudStack>
    <MudTextField T="string" Value="importOptions.SelectedImportProfile?.Name" Disabled="importOptions.SelectedImportProfile == null" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ImportOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.Name, newValue)"
                  Validation="(string newValue) => _validationService.Validate(importOptions.SelectedImportProfile, nameof(Importprofile.Name))"
                  Label="@_localizer["Profile name"]" Placeholder="@_localizer["Enter the name for this profile here"]" Variant="Variant.Outlined" />
    <MudSwitch T="Boolean?" Color="Color.Secondary" Value="importOptions.SelectedImportProfile?.UseRegularExpression" Disabled="importOptions.SelectedImportProfile == null" ValueChanged="UseRegularExpressionChangedAsync" Label="@_localizer["Search using regular expressions"]" />
    <MudTextField T="string" @ref="schemeCuesheetTextField" Text="@importOptions.SelectedImportProfile?.SchemeCuesheet" TextChanged="SchemeCuesheetChangedAsync"
                  Validation="(string newValue) => _validationService.Validate(importOptions.SelectedImportProfile, nameof(Importprofile.SchemeCuesheet))"
                  Label="@_localizer["Scheme common data"]" Placeholder="@_localizer["Enter the common data scheme for this profile here"]" Variant="Variant.Outlined"
                  Clearable Disabled="importOptions.SelectedImportProfile == null" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Add"
                  OnAdornmentClick="(args) => AdornmentClickAsync(schemeCuesheetMenu, args)" />
    <MudMenu @ref="schemeCuesheetMenu" Disabled="importOptions.SelectedImportProfile == null" PositionAtCursor>
        @foreach (var scheme in Importprofile.AvailableSchemeCuesheet)
        {
            <MudMenuItem OnClick="() => AppendPlaceholderToTextField(schemeCuesheetTextField, scheme)">@_localizer[scheme]</MudMenuItem>
        }
    </MudMenu>
    <MudTextField T="string" @ref="schemeTracksTextField" Text="@importOptions.SelectedImportProfile?.SchemeTracks" TextChanged="SchemeTracksChangedAsync"
                  Validation="(string newValue) => _validationService.Validate(importOptions.SelectedImportProfile, nameof(Importprofile.SchemeTracks))"
                  Label="@_localizer["Scheme tracks"]" Placeholder="@_localizer["Enter the track scheme for this profile here"]" Variant="Variant.Outlined"
                  Clearable Disabled="importOptions.SelectedImportProfile == null" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Add"
                  OnAdornmentClick="(args) => AdornmentClickAsync(schemeTracksMenu, args)" />
    <MudMenu @ref="schemeTracksMenu" Disabled="importOptions.SelectedImportProfile == null" PositionAtCursor>
        @foreach (var scheme in Importprofile.AvailableSchemesTrack)
        {
            <MudMenuItem OnClick="() => AppendPlaceholderToTextField(schemeTracksTextField, scheme)">@_localizer[scheme]</MudMenuItem>
        }
    </MudMenu>
    <MudTextField T="string" @ref="timeSpanFormatTextField" Text="@importOptions.SelectedImportProfile?.TimeSpanFormat?.Scheme" TextChanged="ImportTimeInputFormatChangedAsync"
                  Validation="(string newValue) => _validationService.Validate(importOptions.SelectedImportProfile?.TimeSpanFormat, nameof(TimeSpanFormat.Scheme))"
                  Label="@_localizer["Time input format for import"]" Placeholder="@_localizer["Enter the time format for this profile here"]" Variant="Variant.Outlined"
                  Clearable Disabled="importOptions.SelectedImportProfile == null" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Add"
                  OnAdornmentClick="(args) => AdornmentClickAsync(timeSpanFormatMenu, args)" />
    <MudMenu @ref="timeSpanFormatMenu" Disabled="importOptions.SelectedImportProfile == null" PositionAtCursor>
        @foreach (var scheme in TimeSpanFormat.AvailableTimespanScheme)
        {
            <MudMenuItem OnClick="() => AppendPlaceholderToTextField(timeSpanFormatTextField, scheme)">@_localizer[scheme]</MudMenuItem>
        }
    </MudMenu>
}

@code {
    [Parameter]
    public EventCallback ImportprofileChanged { get; set; }

    ImportOptions? importOptions;
    MudMenu? schemeCuesheetMenu, schemeTracksMenu, timeSpanFormatMenu;
    MudTextField<string>? schemeCuesheetTextField, schemeTracksTextField, timeSpanFormatTextField;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        importOptions = await _localStorageOptionsProvider.GetOptionsAsync<ImportOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
    }

    void AppendPlaceholderToTextField(MudTextField<string>? mudTextField, string placeholder)
    {
        mudTextField?.SetText($"{mudTextField.Text}{placeholder}");
    }

    async Task SelectedImportProfileChangedAsync(Importprofile? newSelectedProfile)
    {
        await LocalStorageOptionsProvider.SaveOptionsValueAsync<ImportOptions>(x => x.SelectedImportProfile, newSelectedProfile);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task UseRegularExpressionChangedAsync(Boolean? newValue)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ImportOptions, Importprofile?, Boolean>(x => x.SelectedImportProfile, x => x!.UseRegularExpression, newValue!.Value);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task SchemeCuesheetChangedAsync(string newScheme)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ImportOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeCuesheet, newScheme);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task SchemeTracksChangedAsync(string newScheme)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ImportOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeTracks, newScheme);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task ImportTimeInputFormatChangedAsync(string newScheme)
    {
        var profile = importOptions?.SelectedImportProfile;
        if (profile != null)
        {
            TimeSpanFormat? format = null;
            if (string.IsNullOrEmpty(newScheme))
            {
                format = null;
            }
            else
            {
                format = new() { Scheme = newScheme };
            }
            await LocalStorageOptionsProvider.SaveOptionsValueAsync<ImportOptions>(x => x.SelectedImportProfile!.TimeSpanFormat, format);
            await ImportprofileChanged.InvokeAsync();
        }
    }

    String? GetValidationErrorMessage(object? model, string propertyName)
    {
        String? validationErrorMessage = null;
        if (model != null)
        {
            var validationMessages = _validationService.Validate(model, propertyName);
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }

    async Task ResetSchemes()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ConfirmText, _localizer["Are you sure you want to reset the import profiles to factory default?"] },
        };
        var dialog = await _dialogService.ShowAsync<ConfirmDialog>(_localizer["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            importOptions!.ImportProfiles = ImportOptions.DefaultImportprofiles;
            importOptions!.SelectedImportProfile = ImportOptions.DefaultSelectedImportprofile;
            await LocalStorageOptionsProvider.SaveOptionsAsync(importOptions);
            await ImportprofileChanged.InvokeAsync();
        }
    }

    async Task AddImportprofileClick()
    {
        var newProfilesNames = importOptions!.ImportProfiles.Where(x => x.Name?.StartsWith(_localizer["New import profile"]) == true).Select(x => x.Name);
        var regex = new System.Text.RegularExpressions.Regex(@"(\d+)$");
        int maxNumber = newProfilesNames
            .Select(name =>
                {
                    var match = regex.Match(name ?? "");
                    return match.Success ? int.Parse(match.Value) : 0;
                })
            .DefaultIfEmpty(0)
            .Max();
        var profile = new Importprofile()
        {
            Name = $"{_localizer["New import profile"]} {maxNumber + 1}"
        };
        importOptions!.SelectedImportProfile = profile;
        await LocalStorageOptionsProvider.SaveOptionsAsync(importOptions);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task DeleteImportprofileClick()
    {
        var selectedProfile = importOptions?.SelectedImportProfile;
        if ((selectedProfile != null) && (importOptions != null))
        {
            importOptions.ImportProfiles.Remove(selectedProfile);
            var lastProfile = importOptions.ImportProfiles.LastOrDefault();
            if (lastProfile != null)
            {
                importOptions.SelectedImportProfile = lastProfile;
            }
            await LocalStorageOptionsProvider.SaveOptionsAsync(importOptions);
        }
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is ImportOptions importOption)
        {
            importOptions = importOption;
            StateHasChanged();
        }
    }

    async Task AdornmentClickAsync(MudMenu? menu, MouseEventArgs args)
    {
        if (menu != null)
        {
            await menu.OpenMenuAsync(args);
        }
    }
}
