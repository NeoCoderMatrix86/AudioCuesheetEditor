@using System.Linq.Expressions
<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<Importprofiles> _localizer
@inject ValidationService _validationService
@inject IDialogService _dialogService

@if (ApplicationOptions != null)
{
    <MudStack Row>
        <MudSelect T="Importprofile" Variant="Variant.Outlined" Label="@_localizer["Select import profile"]" Value="ApplicationOptions.SelectedImportProfile" ValueChanged="SelectedImportProfileChangedAsync">
            @foreach (var profile in ApplicationOptions.ImportProfiles)
            {
                <MudSelectItem Value="profile">@profile.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButtonGroup OverrideStyles="false" Class="mt-2" Style="height: 56px;">
            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Add" OnClick="AddImportprofileClick" />
            <MudIconButton Color="Color.Warning" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Delete" Disabled="ApplicationOptions.SelectedImportProfile == null" OnClick="DeleteImportprofileClick" />
            <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.LockReset" OnClick="ResetSchemes" />
        </MudButtonGroup>
    </MudStack>
    <MudTextField T="string" Value="ApplicationOptions.SelectedImportProfile?.Name" Disabled="ApplicationOptions.SelectedImportProfile == null" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.Name, newValue)" Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.Name))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.Name))" Label="@_localizer["Name"]" Placeholder="@_localizer["Enter the name for this profile here"]" Variant="Variant.Outlined" />
    <MudSwitch T="Boolean?" Color="Color.Secondary" Value="ApplicationOptions.SelectedImportProfile?.UseRegularExpression" Disabled="ApplicationOptions.SelectedImportProfile == null" ValueChanged="UseRegularExpressionChangedAsync" Label="@_localizer["Search using regular expressions"]" />
    <MudStack Row>
        <MudTextField T="string" @ref="schemeCuesheetTextField" Text="@ApplicationOptions.SelectedImportProfile?.SchemeCuesheet" TextChanged="SchemeCuesheetChangedAsync"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeCuesheet))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeCuesheet))"
                      Label="@_localizer["Scheme common data"]" Placeholder="@_localizer["Enter the common data scheme for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" Variant="Variant.Filled" Disabled="ApplicationOptions.SelectedImportProfile == null" Class="mt-1" Style="height: 56px;">
            @foreach (var scheme in TextImportScheme.AvailableSchemeCuesheet)
            {
                <MudMenuItem OnClick="() => AppendPlaceholderToTextField(schemeCuesheetTextField, scheme)">@_localizer[scheme]</MudMenuItem>
            }
        </MudMenu>
    </MudStack>
    <MudStack Row>
        <MudTextField T="string" @ref="schemeTracksTextField" Text="@ApplicationOptions.SelectedImportProfile?.SchemeTracks" TextChanged="SchemeTracksChangedAsync"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeTracks))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile, nameof(Importprofile.SchemeTracks))"
                      Label="@_localizer["Scheme tracks"]" Placeholder="@_localizer["Enter the track scheme for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" Variant="Variant.Filled" Disabled="ApplicationOptions.SelectedImportProfile == null" Class="mt-1" Style="height: 56px;">
            @foreach (var scheme in TextImportScheme.AvailableSchemesTrack)
            {
                <MudMenuItem OnClick="() => AppendPlaceholderToTextField(schemeTracksTextField, scheme)">@_localizer[scheme]</MudMenuItem>
            }
        </MudMenu>
    </MudStack>
    <MudStack Row>
        <MudTextField T="string" @ref="timeSpanFormatTextField" Text="@ApplicationOptions.SelectedImportProfile?.TimeSpanFormat?.Scheme" TextChanged="ImportTimeInputFormatChangedAsync"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile?.TimeSpanFormat, nameof(TimeSpanFormat.Scheme))) == false" ErrorText="@GetValidationErrorMessage(ApplicationOptions.SelectedImportProfile?.TimeSpanFormat, nameof(TimeSpanFormat.Scheme))"
                      Label="@_localizer["Time input format for import"]" Placeholder="@_localizer["Enter the time format for this profile here"]" Variant="Variant.Outlined"
                      Clearable Disabled="ApplicationOptions.SelectedImportProfile == null" />
        <MudMenu Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" Variant="Variant.Filled" Disabled="ApplicationOptions.SelectedImportProfile == null" Class="mt-1" Style="height: 56px;">
            @foreach (var scheme in TimeSpanFormat.AvailableTimespanScheme)
            {
                <MudMenuItem OnClick="() => AppendPlaceholderToTextField(timeSpanFormatTextField, scheme)">@_localizer[scheme]</MudMenuItem>
            }
        </MudMenu>
    </MudStack>
}

@code {
    [Parameter]
    public EventCallback ImportprofileChanged { get; set; }

    MudTextField<string>? schemeCuesheetTextField, schemeTracksTextField, timeSpanFormatTextField;

    void AppendPlaceholderToTextField(MudTextField<string>? mudTextField, string placeholder)
    {
        mudTextField?.SetText($"{mudTextField.Text}{placeholder}");
    }

    async Task SelectedImportProfileChangedAsync(Importprofile? newSelectedProfile)
    {
        await LocalStorageOptionsProvider.SaveOptionsValueAsync<ApplicationOptions>(x => x.SelectedImportProfile, newSelectedProfile);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task UseRegularExpressionChangedAsync(Boolean? newValue)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, Boolean>(x => x.SelectedImportProfile, x => x!.UseRegularExpression, newValue!.Value);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task SchemeCuesheetChangedAsync(string newScheme)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeCuesheet, newScheme);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task SchemeTracksChangedAsync(string newScheme)
    {
        await LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ApplicationOptions, Importprofile?, String?>(x => x.SelectedImportProfile, x => x!.SchemeTracks, newScheme);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task ImportTimeInputFormatChangedAsync(string newScheme)
    {
        var profile = ApplicationOptions?.SelectedImportProfile;
        if (profile != null)
        {
            TimeSpanFormat? format = null;
            if (string.IsNullOrEmpty(newScheme))
            {
                format = null;
            }
            else
            {
                format = new() { Scheme = newScheme };
            }
            await LocalStorageOptionsProvider.SaveOptionsValueAsync<ApplicationOptions>(x => x.SelectedImportProfile!.TimeSpanFormat, format);
            await ImportprofileChanged.InvokeAsync();
        }
    }

    String? GetValidationErrorMessage(object? model, string propertyName)
    {
        String? validationErrorMessage = null;
        if (model != null)
        {
            var validationMessages = _validationService.Validate(model, propertyName);
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }

    async Task ResetSchemes()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ConfirmText, _localizer["Are you sure you want to reset the import profiles to factory default?"] },
        };
        var dialog = await _dialogService.ShowAsync<ConfirmDialog>(_localizer["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            ApplicationOptions!.ImportProfiles = ApplicationOptions.DefaultImportprofiles;
            ApplicationOptions!.SelectedImportProfile = ApplicationOptions.DefaultSelectedImportprofile;
            await LocalStorageOptionsProvider.SaveOptionsAsync(ApplicationOptions);
            await ImportprofileChanged.InvokeAsync();
        }
    }

    async Task AddImportprofileClick()
    {
        var profile = new Importprofile();
        ApplicationOptions!.SelectedImportProfile = profile;
        await LocalStorageOptionsProvider.SaveOptionsAsync(ApplicationOptions);
        await ImportprofileChanged.InvokeAsync();
    }

    async Task DeleteImportprofileClick()
    {
        var selectedProfile = ApplicationOptions?.SelectedImportProfile;
        if (selectedProfile != null)
        {
            ApplicationOptions!.ImportProfiles.Remove(selectedProfile);
            var lastProfile = ApplicationOptions.ImportProfiles.LastOrDefault();
            if (lastProfile != null)
            {
                ApplicationOptions!.SelectedImportProfile = lastProfile;
            }
            await LocalStorageOptionsProvider.SaveOptionsAsync(ApplicationOptions);
        }
    }
}
