<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackList> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject ApplicationOptionsTimeSpanParser _applicationOptionsTimeSpanParser
@inject MusicBrainzDataProvider _musicBrainzDataProvider
@inject EditTrackModalManager _editTrackModalManager
@inject ValidationService _validationService
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider
@inject PlaybackService _playbackService

@if (CurrentViewMode == ViewMode.DetailView)
{
    var validationResult = Cuesheet?.Validate(nameof(Cuesheet.Tracks));
    if (validationResult?.Status == ValidationStatus.Error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            <MudText Typo="Typo.h4">@_localizer["Validation errors"]</MudText>
            @foreach (var message in validationResult.ValidationMessages)
            {
                <MudText>@message.GetMessageLocalized(_validationMessageLocalizer)</MudText>
            }
        </MudAlert>
    }
    <TrackListControlButtons AddButtonClicked="AddTrackClicked" EditSelectedTracksClicked="EditSelectedTracksClicked" EditSelectedTracksDisabled="selectedTracks.Count == 0" 
                             DeleteSelectedTracksClicked="DeleteSelectedTracksClicked" DeleteSelectedTracksDisabled="selectedTracks.Count == 0"
                             DeleteAllTracksClicked="OnDeleteAllTracksClicked" DeleteAllTracksDisabled="selectedTracks.Count == 0" FixedTableHeader="ApplicationOptions?.PinTracksTableHeader == true"
                             FixedTableHeaderChanged="(newValue) => LocalStorageOptionsProvider.SaveOptionsValue<ApplicationOptions>(x => x.PinTracksTableHeader, newValue)"
                             MoveTracksUpDisabled="!(Cuesheet?.MoveTracksPossible(selectedTracks, MoveDirection.Up) == true)" MoveTracksUpClicked="() => Cuesheet?.MoveTracks(selectedTracks, MoveDirection.Up)"
                             MoveTracksDownDisabled="!(Cuesheet?.MoveTracksPossible(selectedTracks, MoveDirection.Down) == true)" MoveTracksDownClicked="() => Cuesheet?.MoveTracks(selectedTracks, MoveDirection.Down)" />
}

<MudDataGrid T="Track" Items="Cuesheet?.Tracks" ReadOnly="false" Bordered MultiSelection SelectOnRowClick="false" @bind-SelectedItems="selectedTracks" EditTrigger="DataGridEditTrigger.OnRowClick"
             EditMode="DataGridEditMode.Cell" ColumnResizeMode="ResizeMode.Column" FixedHeader="fixedHeader" Virtualize Height="@tableHeight" RowContextMenuClick="OpenMenuContent">
    <Columns>
        <SelectColumn Hidden="CurrentViewMode == ViewMode.RecordView" />
        <PropertyColumn Property="x => x.Position" Title="#" Editable="CurrentViewMode != ViewMode.RecordView">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.Position" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Position)))" 
                ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Position))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Artist" Title="@_localizer["Artist"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzArtist" SearchFunc="SearchArtist" ToStringFunc="(value) => value.Name" Value="new() { Name = context.Item.Artist }" 
                                 ValueChanged="(value) => context.Item.Artist = value?.Name" ResetValueOnEmptyText Clearable CoerceValue SelectValueOnTab ShowProgressIndicator
                                 Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Artist)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Artist))">
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Name, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Name</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Title" Title="@_localizer["Title"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzTrack" SearchFunc="(value, token) => SearchTitle(value, context.Item, token)" ToStringFunc="(value) => value.Title" 
                                 Value="new() { Artist = context.Item.Artist, Title = context.Item.Title }" ValueChanged="(value) => TitleSelected(context.Item, value)"
                                 ResetValueOnEmptyText Clearable CoerceValue SelectValueOnTab ShowProgressIndicator Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Title)))" 
                                 ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Title))">
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Title</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Begin" Title="@_localizer["Begin"]" Editable="CurrentViewMode != ViewMode.RecordView">
            <EditTemplate>
                <MudTextField Value="@context.Item.Begin.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Begin, value)"
                Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Begin)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Begin))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End" Title="@_localizer["End"]" Editable="CurrentViewMode != ViewMode.RecordView">
            <EditTemplate>
                <MudTextField Value="@context.Item.End.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.End, value)"
                Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.End)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.End))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Length" Title="@_localizer["Length"]" Editable="CurrentViewMode != ViewMode.RecordView">
            <EditTemplate>
                <MudTextField Value="@context.Item.Length.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Length, value)"
                Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Length)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Length))" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

<MudMenu PositionAtCursor="true" @ref="trackContextMenu">
    @if (contextMenuTrack != null)
    {
        <MudMenuItem Icon="@Icons.Material.Outlined.PlayArrow" Disabled="_playbackService.PlaybackPossible == false" OnClick="() => _playbackService.PlayAsync(contextMenuTrack)">@_localizer["Start playback of this track"]</MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Outlined.CopyAll" OnClick="CopyTrackClicked">@_localizer["Duplicate this track"]</MudMenuItem>
    }
</MudMenu>

@code {
    //TODO: Localization
    //TODO: reduce column width for timespans
    //TODO: currently played track should be marked
    //TODO: Currently loading of autocomplete is needed to enter a free value
    //TODO: Bug Autocomplete SearchFunc only put null strings so nothing will be found

    HashSet<Track> selectedTracks = new();
    string? tableHeight;
    Boolean fixedHeader;
    MudMenu? trackContextMenu;
    Track? contextMenuTrack;

    [CascadingParameter]
    public ViewMode CurrentViewMode { get; set; }

    [CascadingParameter]
    public Cuesheet? Cuesheet { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (CurrentViewMode == ViewMode.DetailView)
        {
            tableHeight = "100dvh";
            fixedHeader = ApplicationOptions?.PinTracksTableHeader == true;
        }
        else
        {
            tableHeight = null;
            fixedHeader = false;
        }
    }

    void AddTrackClicked()
    {
        var newTrack = new Track()
        {
            IsLinkedToPreviousTrack = ApplicationOptions!.LinkTracks
        };
        Cuesheet?.AddTrack(newTrack);
        TraceChangeManager.TraceChanges(newTrack);
    }

    async Task EditSelectedTracksClicked()
    {
        await _editTrackModalManager.ShowAndHandleModalEditDialogAsync(selectedTracks);
    }

    void DeleteSelectedTracksClicked()
    {
        Cuesheet?.RemoveTracks(selectedTracks.ToList());
        selectedTracks.Clear();
    }

    void OnDeleteAllTracksClicked()
    {
        //TODO: Display a confirm warning
    }

    async Task<IEnumerable<MusicBrainzArtist>?> SearchArtist(string? value, CancellationToken token)
    {
        IEnumerable<MusicBrainzArtist>? artists = null;
        if (!token.IsCancellationRequested)
        {
            artists = await _musicBrainzDataProvider.SearchArtistAsync(value);
            // Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (artists.Count(x => x.Name == value) == 0))
            {
                artists = artists.Prepend(new() { Name = value });
            }
        }
        return artists;
    }

    async Task<IEnumerable<MusicBrainzTrack>?> SearchTitle(string? value, Track currentTrack, CancellationToken token)
    {
        IEnumerable<MusicBrainzTrack>? tracks = null;
        if (!token.IsCancellationRequested)
        {
            tracks = await _musicBrainzDataProvider.SearchTitleAsync(value, currentTrack.Artist);
            //Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (tracks.Count(x => x.Title == value) == 0))
            {
                tracks = tracks.Prepend(new() { Artist = currentTrack.Artist, Title = value });
            }
        }
        return tracks;
    }

    void TitleSelected(Track track, MusicBrainzTrack? musicBrainzTrack)
    {
        track.Title = musicBrainzTrack?.Title;
        switch (CurrentViewMode)
        {
            case ViewMode.DetailView:
            case ViewMode.ImportView:
                if ((String.IsNullOrEmpty(track.Artist)) && (String.IsNullOrEmpty(musicBrainzTrack?.Artist) == false))
                {
                    track.Artist = musicBrainzTrack.Artist;
                }
                if ((track.Length.HasValue == false) && (musicBrainzTrack?.Length.HasValue == true))
                {
                    track.Length = musicBrainzTrack?.Length;
                }
                break;
        }
    }

    String? GetValidationErrorMessage(object model, string propertyName)
    {
        String? validationErrorMessage = null;
        var validationMessages = _validationService.Validate(model, propertyName);
        if (validationMessages.Count() > 0)
        {
            validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
        }
        return validationErrorMessage;
    }

    async Task CopyTrackClicked()
    {
        if (contextMenuTrack != null)
        {
            var copy = new Track(contextMenuTrack);
            Cuesheet?.AddTrack(copy);
            TraceChangeManager.TraceChanges(copy);
            await EditTrackModalClicked(copy);
        }
    }

    async Task EditTrackModalClicked(Track trackToEdit)
    {
        await _editTrackModalManager.ShowAndHandleModalEditDialogAsync([trackToEdit]);
    }

    async Task OpenMenuContent(DataGridRowClickEventArgs<Track> args)
    {
        contextMenuTrack = args.Item;
        if (trackContextMenu != null)
        {
            await trackContextMenu.OpenMenuAsync(args.MouseEventArgs);
        }
    }
}