<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackList> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject ApplicationOptionsTimeSpanParser _applicationOptionsTimeSpanParser
@inject MusicBrainzDataProvider _musicBrainzDataProvider
@inject IDialogService _dialogService

@if (CurrentViewMode == ViewMode.DetailView)
{
    var validationResult = Cuesheet?.Validate(nameof(Cuesheet.Tracks));
    if (validationResult?.Status == ValidationStatus.Error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            <MudText Typo="Typo.h4">@_localizer["Validation errors"]</MudText>
            @foreach (var message in validationResult.ValidationMessages)
            {
                <MudText>@message.GetMessageLocalized(_validationMessageLocalizer)</MudText>
            }
        </MudAlert>
    }
    <TrackListControlButtons 
        AddButtonClicked="AddTrackClicked" 
        EditSelectedTracksClicked="EditSelectedTracksClicked" 
        EditSelectedTracksDisabled="selectedTracks.Count == 0"
        DeleteSelectedTracksClicked="DeleteSelectedTracksClicked"
        DeleteSelectedTracksDisabled="selectedTracks.Count == 0"
        DeleteAllTracksClicked="OnDeleteAllTracksClicked"
        DeleteAllTracksDisabled="selectedTracks.Count == 0"
        FixedTableHeader="PinnedTableHeader"
        FixedTableHeaderChanged="(newValue) => PinnedTableHeader = newValue"/>
}

<MudDataGrid Items="Cuesheet?.Tracks" ReadOnly="false" Bordered MultiSelection SelectOnRowClick="false" @bind-SelectedItems="selectedTracks" EditTrigger="DataGridEditTrigger.OnRowClick" EditMode="DataGridEditMode.Cell" ColumnResizeMode="ResizeMode.Column">
    <Columns>
        <SelectColumn />
        <TemplateColumn Title="@_localizer["Controls"]" Editable="false">
            <CellTemplate>
                <TrackListItemControlColumn TrackReference="context.Item" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Position" Title="#" Editable="CurrentViewMode != ViewMode.RecordView" />
        <PropertyColumn Property="x => x.Artist" Title="@_localizer["Artist"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzArtist" SearchFunc="SearchArtist" ToStringFunc="(value) => value.Name" Value="new() { Name = context.Item.Artist }" 
                    ValueChanged="(value) => context.Item.Artist = value?.Name" ResetValueOnEmptyText Clearable CoerceValue SelectValueOnTab ShowProgressIndicator>
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Name, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Name</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Title" Title="@_localizer["Title"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzTrack" SearchFunc="(value, token) => SearchTitle(value, context.Item, token)" ToStringFunc="(value) => value.Title" 
                    Value="new() { Artist = context.Item.Artist, Title = context.Item.Title }" ValueChanged="(value) => TitleSelected(context.Item, value)"
                    ResetValueOnEmptyText Clearable CoerceValue SelectValueOnTab ShowProgressIndicator>
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Title</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Begin" Title="@_localizer["Begin"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.Begin.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Begin, value)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End" Title="@_localizer["End"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.End.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.End, value)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Length" Title="@_localizer["Length"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.Length.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Length, value)" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

@code {
    //TODO
    //TODO: Link / Unlink tracks
    //TODO: Localization
    //TODO: Validation for each column
    //TODO: Virtualize datagrid
    //TODO: Pin header
    //TODO: Selection for tracks
    //TODO: reduce column width for timespans
    //TODO: currently played track should be marked
    //TODO: options for custom timespanformat
    //TODO: Controls should be reduced to play (and maybe delete), all other functions should be made for selected rows via toolbar (or modal dialog)
    //TODO: Currently loading of autocomplete is needed to enter a free value

    HashSet<Track> selectedTracks = new();

    [CascadingParameter]
    public ViewMode CurrentViewMode { get; set; }

    [CascadingParameter]
    public Cuesheet? Cuesheet { get; set; }

    //TODO: Read from options
    public Boolean PinnedTableHeader { get; private set; } = false;

    void AddTrackClicked()
    {
        var newTrack = new Track();
        Cuesheet?.AddTrack(newTrack);
        TraceChangeManager.TraceChanges(newTrack);
    }

    async Task EditSelectedTracksClicked()
    {
        if (selectedTracks.Count > 0)
        {
            //TODO: Set header for editing multiple tracks
            var parameters = new DialogParameters<EditTrackModal> { { x => x.EditedTrack, new() { AutomaticallyCalculateLength = false } }, { x => x.MultipleEdit, selectedTracks.Count > 1 } };
            var options = new DialogOptions() { CloseOnEscapeKey = true, BackdropClick = false, FullWidth = true };
            var dialog = _dialogService.Show<EditTrackModal>(null, parameters, options);
            var result = await dialog.Result;
            if ((result?.Canceled == false) && (result.Data is Track editedTrack))
            {
                //TODO: Copy value to all selected tracks
                // TrackReference.CopyValues(editedTrack, setCuesheet: false);
            }
        }
    }

    void DeleteSelectedTracksClicked()
    {
        Cuesheet?.RemoveTracks(selectedTracks.ToList());
        selectedTracks.Clear();
    }

    void OnDeleteAllTracksClicked()
    {
        //TODO: Display a confirm warning
    }

    async Task<IEnumerable<MusicBrainzArtist>?> SearchArtist(string value, CancellationToken token)
    {
        IEnumerable<MusicBrainzArtist>? artists = null;
        if (!token.IsCancellationRequested)
        {
            artists = await _musicBrainzDataProvider.SearchArtistAsync(value);
            // Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (artists.Count(x => x.Name == value) == 0))
            {
                artists = artists.Prepend(new() { Name = value });
            }
        }
        return artists;
    }

    async Task<IEnumerable<MusicBrainzTrack>?> SearchTitle(string value, Track currentTrack, CancellationToken token)
    {
        IEnumerable<MusicBrainzTrack>? tracks = null;
        if (!token.IsCancellationRequested)
        {
            tracks = await _musicBrainzDataProvider.SearchTitleAsync(value, currentTrack.Artist);
            //Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (tracks.Count(x => x.Title == value) == 0))
            {
                tracks = tracks.Prepend(new() { Artist = currentTrack.Artist, Title = value });
            }
        }
        return tracks;
    }

    void TitleSelected(Track track, MusicBrainzTrack? musicBrainzTrack)
    {
        track.Title = musicBrainzTrack?.Title;
        switch (CurrentViewMode)
        {
            case ViewMode.DetailView:
            case ViewMode.ImportView:
                if (track.Length.HasValue == false)
                {
                    track.Length = musicBrainzTrack?.Length;
                }
                if (String.IsNullOrEmpty(track.Artist))
                {
                    track.Artist = musicBrainzTrack?.Artist;
                }
                break;
        }
    }
}