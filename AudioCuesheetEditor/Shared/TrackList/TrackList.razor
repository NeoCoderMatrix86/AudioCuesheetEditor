<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackList> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject ApplicationOptionsTimeSpanParser _applicationOptionsTimeSpanParser
@inject AutocompleteManager _autocompleteManager
@inject EditTrackModalManager _editTrackModalManager
@inject ValidationService _validationService
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider
@inject PlaybackService _playbackService
@inject IDialogService _dialogService
@inject ISessionStateContainer _sessionStateContainer

@if (CurrentViewMode == ViewMode.DetailView)
{
    var validationResult = Cuesheet?.Validate(nameof(Cuesheet.Tracks));
    if (validationResult?.Status == ValidationStatus.Error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            <MudText Typo="Typo.h4">@_localizer["Validation errors"]</MudText>
            @foreach (var message in validationResult.ValidationMessages)
            {
                <MudText>@message.GetMessageLocalized(_validationMessageLocalizer)</MudText>
            }
        </MudAlert>
    }
    <TrackListControlButtons AddButtonClicked="AddTrackClicked" EditSelectedTracksClicked="EditSelectedTracksClicked" EditSelectedTracksDisabled="selectedTracks.Count == 0" 
                             DeleteSelectedTracksClicked="DeleteSelectedTracksClicked" DeleteSelectedTracksDisabled="selectedTracks.Count == 0"
                             DeleteAllTracksClicked="OnDeleteAllTracksClicked" DeleteAllTracksDisabled="Cuesheet?.Tracks.Any() == false"
                             MoveTracksUpDisabled="!(Cuesheet?.MoveTracksPossible(selectedTracks, MoveDirection.Up) == true)" MoveTracksUpClicked="() => Cuesheet?.MoveTracks(selectedTracks, MoveDirection.Up)"
                             MoveTracksDownDisabled="!(Cuesheet?.MoveTracksPossible(selectedTracks, MoveDirection.Down) == true)" MoveTracksDownClicked="() => Cuesheet?.MoveTracks(selectedTracks, MoveDirection.Down)"
                             CopySelectedTracksDisabled="selectedTracks.Count != 1" CopySelectedTracksClicked="() => CopyTrackClicked()"
                             FixedHeader="ApplicationOptions?.FixedTracksTableHeader == true" FixedHeaderClicked="() => LocalStorageOptionsProvider.SaveOptionsValueAsync<ApplicationOptions>(x => x.FixedTracksTableHeader, !ApplicationOptions?.FixedTracksTableHeader)" />
}

<MudDataGrid T="Track" Items="Cuesheet?.Tracks" ReadOnly="false" Bordered MultiSelection SelectOnRowClick="false" @bind-SelectedItems="selectedTracks" EditTrigger="DataGridEditTrigger.OnRowClick"
             EditMode="DataGridEditMode.Cell" ColumnResizeMode="ResizeMode.Column" RowContextMenuClick="OpenMenuContent" Height="@(ApplicationOptions?.FixedTracksTableHeader == true ? "600px" : null)" FixedHeader="ApplicationOptions?.FixedTracksTableHeader == true">
    <Columns>
        <SelectColumn Hidden="CurrentViewMode == ViewMode.RecordView" />
        <TemplateColumn Title="@_localizer["Controls"]" Hidden="CurrentViewMode != ViewMode.RecordView">
            <EditTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="() => Cuesheet?.RemoveTrack(context.Item)" />
            </EditTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Position" Title="#" Editable="CurrentViewMode != ViewMode.RecordView" HeaderStyle="width: 1px;">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.Position" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Position)))" 
                                 ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Position))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Artist" Title="@_localizer["Artist"]">
            <EditTemplate>
                @{
                    MusicBrainzArtist? autocompleteArtist = new()
                    {
                        Name = context.Item.Artist
                    };
                }
                <MudAutocomplete T="MusicBrainzArtist" SearchFunc="_autocompleteManager.SearchArtistsAsync" ToStringFunc="(value) => value.Name" @bind-Text="context.Item.Artist"
                                 @bind-Value="autocompleteArtist" Clearable ShowProgressIndicator Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Artist)))" 
                                 ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Artist))" MaxItems="null" CoerceText="false">
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Name, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Name</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Title" Title="@_localizer["Title"]">
            <EditTemplate>
                @{
                    MusicBrainzTrack? autocompleteTrack = new()
                    {
                        Artist = context.Item.Artist,
                        Title = context.Item.Title
                    };
                }
                <MudAutocomplete T="MusicBrainzTrack" SearchFunc="(value, token) => _autocompleteManager.SearchTitlesAsync(value, context.Item.Artist, token)" ToStringFunc="(value) => value.Title"
                                 @bind-Text="context.Item.Title" Value="autocompleteTrack" ValueChanged="(value) => TitleSelected(context.Item, value)"
                                 ResetValueOnEmptyText Clearable ShowProgressIndicator Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Title)))" 
                                 ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Title))" MaxItems="null" CoerceText="false">
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Title</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Begin" Title="@_localizer["Begin"]" Editable="CurrentViewMode != ViewMode.RecordView" HeaderStyle="width: 1px;">
            <CellTemplate>
                @_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.Begin)
            </CellTemplate>
            <EditTemplate>
                <MudTextField Value="@_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.Begin)" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Begin, value)"
                              Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Begin)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Begin))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End" Title="@_localizer["End"]" Editable="CurrentViewMode != ViewMode.RecordView" HeaderStyle="width: 1px;">
            <CellTemplate>
                @_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.End)
            </CellTemplate>
            <EditTemplate>
                <MudTextField Value="@_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.End)" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.End, value)"
                              Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.End)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.End))" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Length" Title="@_localizer["Length"]" Editable="CurrentViewMode != ViewMode.RecordView" HeaderStyle="width: 1px;">
            <CellTemplate>
                @_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.Length)
            </CellTemplate>
            <EditTemplate>
                <MudTextField Value="@_applicationOptionsTimeSpanParser.GetTimespanFormatted(context.Item.Length)" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Length, value)"
                              Error="!String.IsNullOrEmpty(GetValidationErrorMessage(context.Item, nameof(Track.Length)))" ErrorText="@GetValidationErrorMessage(context.Item, nameof(Track.Length))" />
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn Title="@_localizer["Remarks"]" Hidden="CurrentViewMode != ViewMode.DetailView" HeaderStyle="width: 1px;">
            <EditTemplate>
                @if (_playbackService.CurrentlyPlayingTrack == context.Item)
                {
                    <MudIcon Icon="@Icons.Material.Outlined.Audiotrack" Title="@_localizer["Currently playing this track"]" />
                }
                @if (Cuesheet?.GetSection(context.Item) != null)
                {
                    <MudIcon Icon="@Icons.Material.Outlined.ContentCut" Title="@_localizer["A section is beginning inside this track"]" />
                }
                @if (Cuesheet?.Tracks.FirstOrDefault() != context.Item)
                {
                    <MudIconButton Icon="@GetLinkedTrackIcon(context.Item)" OnClick="() => context.Item.IsLinkedToPreviousTrack = !context.Item.IsLinkedToPreviousTrack" />
                }
            </EditTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudMenu PositionAtCursor @ref="trackContextMenu">
    @if (contextMenuTrack != null)
    {
        <MudMenuItem Icon="@Icons.Material.Outlined.PlayArrow" Disabled="_playbackService.PlaybackPossible == false" OnClick="() => _playbackService.PlayAsync(contextMenuTrack)">@_localizer["Start playback of this track"]</MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Outlined.CopyAll" OnClick="() => CopyTrackClicked(contextMenuTrack)">@_localizer["Duplicate this track"]</MudMenuItem>
    }
</MudMenu>

@code {
    //TODO: Redesign in order to increase render performance
    HashSet<Track> selectedTracks = new();
    MudMenu? trackContextMenu;
    Track? contextMenuTrack;

    public Cuesheet? Cuesheet
    {
        get
        {
            if (CurrentViewMode == ViewMode.ImportView)
            {
                return _sessionStateContainer.ImportCuesheet;
            }
            return _sessionStateContainer.Cuesheet;
        }
    }

    [CascadingParameter]
    public ViewMode CurrentViewMode { get; set; }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _playbackService.CurrentPositionChanged -= PlaybackService_CurrentPositionChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _playbackService.CurrentPositionChanged += PlaybackService_CurrentPositionChanged;
    }

    void AddTrackClicked()
    {
        var newTrack = new Track()
        {
            IsLinkedToPreviousTrack = ApplicationOptions!.DefaultIsLinkedToPreviousTrack
        };
        Cuesheet?.AddTrack(newTrack);
        TraceChangeManager.TraceChanges(newTrack);
    }

    async Task EditSelectedTracksClicked()
    {
        await _editTrackModalManager.ShowAndHandleModalEditDialogAsync(selectedTracks);
    }

    void DeleteSelectedTracksClicked()
    {
        Cuesheet?.RemoveTracks(selectedTracks.ToList());
        selectedTracks.Clear();
    }

    async Task OnDeleteAllTracksClicked()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ConfirmText, _localizer["Are you sure you want to remove all tracks?"] },
        };
        var dialog = await _dialogService.ShowAsync<ConfirmDialog>(_localizer["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Cuesheet?.RemoveTracks(Cuesheet.Tracks);
            selectedTracks.Clear();
        }
    }

    void TitleSelected(Track track, MusicBrainzTrack? musicBrainzTrack)
    {
        track.Title = musicBrainzTrack?.Title;
        switch (CurrentViewMode)
        {
            case ViewMode.DetailView:
            case ViewMode.ImportView:
                if ((String.IsNullOrEmpty(track.Artist)) && (String.IsNullOrEmpty(musicBrainzTrack?.Artist) == false))
                {
                    track.Artist = musicBrainzTrack.Artist;
                }
                if ((track.Length.HasValue == false) && (musicBrainzTrack?.Length.HasValue == true))
                {
                    track.Length = musicBrainzTrack?.Length;
                }
                break;
        }
    }

    String? GetValidationErrorMessage(object model, string propertyName)
    {
        String? validationErrorMessage = null;
        var validationMessages = _validationService.Validate(model, propertyName);
        if (validationMessages.Count() > 0)
        {
            validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
        }
        return validationErrorMessage;
    }

    async Task CopyTrackClicked(Track? trackToCopy = null)
    {
        var trackThatWillBeCopied = trackToCopy;
        if (trackThatWillBeCopied == null)
        {
            trackThatWillBeCopied = selectedTracks.FirstOrDefault();
        }
        if (trackThatWillBeCopied != null)
        {
            var copy = new Track(trackThatWillBeCopied);
            Cuesheet?.AddTrack(copy);
            TraceChangeManager.TraceChanges(copy);
            await EditTrackModalClicked(copy);
        }
    }

    async Task EditTrackModalClicked(Track trackToEdit)
    {
        await _editTrackModalManager.ShowAndHandleModalEditDialogAsync([trackToEdit]);
    }

    async Task OpenMenuContent(DataGridRowClickEventArgs<Track> args)
    {
        contextMenuTrack = args.Item;
        if (trackContextMenu != null)
        {
            await trackContextMenu.OpenMenuAsync(args.MouseEventArgs);
        }
    }

    String GetLinkedTrackIcon(Track track)
    {
        if (track.IsLinkedToPreviousTrack)
        {
            return @Icons.Material.Outlined.Height;
        }
        else
        {
            return @Icons.Material.Outlined.VerticalAlignCenter;
        }
    }

    void PlaybackService_CurrentPositionChanged()
    {
        StateHasChanged();
    }
}