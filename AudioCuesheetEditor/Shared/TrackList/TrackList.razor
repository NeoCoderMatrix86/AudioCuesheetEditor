<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackList> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject TraceChangeManager _traceChangeManager
@inject ApplicationOptionsTimeSpanParser _applicationOptionsTimeSpanParser
@inject MusicBrainzDataProvider _musicBrainzDataProvider

@{
    var validationResult = Cuesheet?.Validate(nameof(Cuesheet.Tracks));
    if (validationResult?.Status == ValidationStatus.Error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            <MudText Typo="Typo.h4">@_localizer["Validation errors"]</MudText>
            @foreach (var message in validationResult.ValidationMessages)
            {
                <MudText>@message.GetMessageLocalized(_validationMessageLocalizer)</MudText>
            }
        </MudAlert>
    }
}

<TrackListControlButtons 
    SelectedTracks="selectedTracks" 
    AddButtonClicked="AddTrackClicked" 
    EditSelectedTracksClicked="EditSelectedTracksClicked" 
    DeleteSelectedTracksClicked="DeleteSelectedTracksClicked" 
    DeleteAllTracksClicked="OnDeleteAllTracksClicked"
    FixedTableHeader="PinnedTableHeader"
    FixedTableHeaderChanged="(newValue) => PinnedTableHeader = newValue"
    TrackSelectionVisible="TrackSelectionVisible" 
    TrackSelectionVisibleChanged="(newValue) => TrackSelectionVisible = newValue" />

<MudDataGrid Items="Cuesheet?.Tracks" ReadOnly="false" Bordered EditTrigger="DataGridEditTrigger.OnRowClick" EditMode="DataGridEditMode.Cell" ColumnResizeMode="ResizeMode.Column">
    <Columns>
        <PropertyColumn Property="x => x.Position" Title="#" CellStyle="max-width: 50px;" />
        <PropertyColumn Property="x => x.Artist" Title="@_localizer["Artist"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzArtist" SearchFunc="SearchArtist" ToStringFunc="(value) => value.Name" ValueChanged="(value) => context.Item.Artist = value?.Name" ResetValueOnEmptyText Clearable>
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Name, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Name</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Title" Title="@_localizer["Title"]">
            <EditTemplate>
                <MudAutocomplete T="MusicBrainzTrack" SearchFunc="(value, token) => SearchTitle(value, context.Item, token)" ToStringFunc="(value) => value.Title" ValueChanged="(value) => TitleSelected(context.Item, value)" ResetValueOnEmptyText Clearable>
                    <ItemTemplate Context="autocompleteContext">
                        @if (autocompleteContext.Disambiguation != null)
                        {
                            <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
                        }
                        else
                        {
                            <MudText>@autocompleteContext.Title</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Begin" Title="@_localizer["Begin"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.Begin.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Begin, value)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End" Title="@_localizer["End"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.End.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.End, value)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Length" Title="@_localizer["Length"]">
            <EditTemplate>
                <MudTextField Value="@context.Item.Length.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(context.Item, x => x.Length, value)" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

@code {
    //TODO
    //TODO: Link / Unlink tracks
    //TODO: Display alert for track count only on ViewModeFull
    //TODO: Display TrackListControlButtons only on ViewModeFull
    //TODO: Localization
    //TODO: Control Column via TemplateColumn
    //TODO: Validation for each column
    //TODO: Virtualize datagrid
    //TODO: Pin header

    List<Track> selectedTracks = new();

    [Parameter]
    [EditorRequired]
    public Cuesheet? Cuesheet { get; set; }

    //TODO: Read from options
    public Boolean PinnedTableHeader { get; private set; } = false;

    //TODO: Read from options
    public Boolean TrackSelectionVisible { get; private set; } = false;

    void AddTrackClicked()
    {
        var newTrack = new Track();
        //TODO: applicationOptions übergeben
        Cuesheet?.AddTrack(newTrack);
        _traceChangeManager.TraceChanges(newTrack);
    }

    void EditSelectedTracksClicked()
    {
        //TODO: display modal dialog
    }

    void DeleteSelectedTracksClicked()
    {
        Cuesheet?.RemoveTracks(selectedTracks.AsReadOnly());
        selectedTracks.Clear();
    }

    void OnDeleteAllTracksClicked()
    {
        //TODO: Display a confirm warning
    }

    async Task<IEnumerable<MusicBrainzArtist>?> SearchArtist(string value, CancellationToken token)
    {
        IEnumerable<MusicBrainzArtist>? artists = null;
        if (!token.IsCancellationRequested)
        {
            artists = await _musicBrainzDataProvider.SearchArtistAsync(value);
        }
        return artists;
    }

    async Task<IEnumerable<MusicBrainzTrack>?> SearchTitle(string value, Track currentTrack, CancellationToken token)
    {
        IEnumerable<MusicBrainzTrack>? tracks = null;
        if (!token.IsCancellationRequested)
        {
            tracks = await _musicBrainzDataProvider.SearchTitleAsync(value, currentTrack.Artist);
        }
        return tracks;
    }

    void TitleSelected(Track track, MusicBrainzTrack? musicBrainzTrack)
    {
        //TODO: Only with ViewModeFull and ViewModeImport
        track.Length = musicBrainzTrack?.Length;
        if (String.IsNullOrEmpty(track.Artist))
        {
            track.Artist = musicBrainzTrack?.Artist;
        }
    }
}