<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackListItemControlColumn> _localizer
@inject PlaybackService _playbackService

@switch (CurrentViewMode)
{
    case ViewMode.RecordView:
        <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Delete" OnClick="OnDeleteTrackClicked" />
        break;
    case ViewMode.DetailView:
    case ViewMode.ImportView:
        <MudButtonGroup OverrideStyles="false">
            <MudIconButton Color="Color.Success" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.CopyAll" />
        </MudButtonGroup>
        <MudButtonGroup OverrideStyles="false">
            <MudIconButton Color="Color.Info" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.PlayArrow" Disabled="_playbackService.PlaybackPossible == false" OnClick="() => _playbackService.PlayAsync(TrackReference)" />
        </MudButtonGroup>
        <MudButtonGroup OverrideStyles="false">
            <MudIconButton Color="Color.Dark" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.MoveUp" Disabled="!(Cuesheet?.MoveTrackPossible(TrackReference, MoveDirection.Up) == true)" OnClick="() => Cuesheet?.MoveTrack(TrackReference, MoveDirection.Up)"/>
            <MudIconButton Color="Color.Dark" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.MoveDown" Disabled="!(Cuesheet?.MoveTrackPossible(TrackReference, MoveDirection.Down) == true)" OnClick="() => Cuesheet?.MoveTrack(TrackReference, MoveDirection.Down)" />
        </MudButtonGroup>
        <MudButtonGroup OverrideStyles="false">
            <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Delete" OnClick="OnDeleteTrackClicked" />
        </MudButtonGroup>
        break;
}

@code {
    //TODO
    //TODO: Button for edit track as dialog
    //TODO: Tooltips
    //TODO: Copy track and display in modal dialog

    [CascadingParameter]
    public ViewMode CurrentViewMode { get; set; }

    [CascadingParameter]
    public Cuesheet? Cuesheet { get; set; }

    [Parameter, EditorRequired]
    public Track TrackReference { get; set; } = null!;

    [Parameter]
    public EventCallback TrackDeleted { get; set; }

    void OnDeleteTrackClicked()
    {
        Cuesheet?.RemoveTrack(TrackReference);
        TrackDeleted.InvokeAsync();
    }
}
