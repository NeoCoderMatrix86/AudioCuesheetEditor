<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<TrackListControlButtons> _localizer
<MudButtonGroup OverrideStyles="false">
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddButtonClicked" StartIcon="@Icons.Material.Outlined.Add">@_localizer["Add new track"]</MudButton>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddButtonClicked" Icon="@Icons.Material.Outlined.Add" />
    </MudHidden>
</MudButtonGroup>
<MudButtonGroup OverrideStyles="false">
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => FixedTableHeaderChanged.InvokeAsync(!FixedTableHeader)" StartIcon="@(FixedTableHeader == true ? @Icons.Material.Outlined.CheckBox : @Icons.Material.Outlined.CheckBoxOutlineBlank)">
            @_localizer["Pin table header"]
        </MudButton>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp">
        <MudIconButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => FixedTableHeaderChanged.InvokeAsync(!FixedTableHeader)" Icon="@(FixedTableHeader == true ? @Icons.Material.Outlined.CheckBox : @Icons.Material.Outlined.CheckBoxOutlineBlank)" />
    </MudHidden>
</MudButtonGroup>
<MudButtonGroup OverrideStyles="false">
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="EditSelectedTracksClicked" StartIcon="@Icons.Material.Outlined.DynamicFeed" Disabled="EditSelectedTracksDisabled">@_localizer["Edit selected tracks"]</MudButton>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="EditSelectedTracksClicked" Icon="@Icons.Material.Outlined.DynamicFeed" Disabled="EditSelectedTracksDisabled" />
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="DeleteSelectedTracksClicked" StartIcon="@Icons.Material.Outlined.Delete" Disabled="DeleteSelectedTracksDisabled">@_localizer["Delete selected tracks"]</MudButton>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp">
        <MudIconButton Color="Color.Warning" Variant="Variant.Filled" OnClick="DeleteSelectedTracksClicked" Icon="@Icons.Material.Outlined.Delete" Disabled="DeleteSelectedTracksDisabled" />
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteAllTracksClicked" StartIcon="@Icons.Material.Outlined.DeleteForever" Disabled="DeleteAllTracksDisabled">@_localizer["Delete all tracks"]</MudButton>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp">
        <MudIconButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteAllTracksClicked" Icon="@Icons.Material.Outlined.DeleteForever" Disabled="DeleteAllTracksDisabled" />
    </MudHidden>
</MudButtonGroup>

@code {
    //TODO: Tooltips

    [Parameter]
    public EventCallback AddButtonClicked { get; set; }

    [Parameter]
    public EventCallback EditSelectedTracksClicked { get; set; }
    
    [Parameter]
    public Boolean EditSelectedTracksDisabled { get; set; }

    [Parameter]
    public EventCallback DeleteSelectedTracksClicked { get; set; }

    [Parameter]
    public Boolean DeleteSelectedTracksDisabled { get; set; }

    [Parameter]
    public EventCallback DeleteAllTracksClicked { get; set; }

    [Parameter]
    public Boolean DeleteAllTracksDisabled { get; set; }

    [Parameter]
    public Boolean FixedTableHeader { get; set; }

    [Parameter]
    public EventCallback<Boolean> FixedTableHeaderChanged { get; set; }
}
