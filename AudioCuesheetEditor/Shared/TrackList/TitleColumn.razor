<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject AutocompleteManager _autocompleteManager
@inject ValidationService _validationService

<MudAutocomplete T="MusicBrainzTrack" SearchFunc="(value, token) => _autocompleteManager.SearchTitlesAsync(value, Track.Artist, token)" ToStringFunc="(value) => value.Title"
                 @bind-Text="title" Value="autocompleteTrack" ValueChanged="TitleSelected" ResetValueOnEmptyText Clearable ShowProgressIndicator
                 Validation="(string? newTitle) => _validationService.Validate(Track, nameof(Track.Title))" MaxItems="null" CoerceText="false" OnBlur="OnBlur">
    <ItemTemplate Context="autocompleteContext">
        @if (autocompleteContext.Disambiguation != null)
        {
            <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
        }
        else
        {
            <MudText>@autocompleteContext.Title</MudText>
        }
    </ItemTemplate>
</MudAutocomplete>

@code {
    [Parameter] 
    [EditorRequired]
    public Track Track { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public ViewMode CurrentViewMode { get; set; }

    MusicBrainzTrack? autocompleteTrack;
    string? title;
    Timer? debounceTimer;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        autocompleteTrack = new() { Artist = Track.Artist, Title = Track.Title };
        title = autocompleteTrack?.Title;
    }

    void TitleSelected(MusicBrainzTrack? newValue)
    {
        autocompleteTrack = newValue;
        title = autocompleteTrack?.Title;
        StartChangeTimer();
    }

    void OnBlur(FocusEventArgs args)
    {
        StartChangeTimer();
    }

    void StartChangeTimer()
    {
        debounceTimer = new Timer(100);
        debounceTimer.Elapsed += ChangeTitle;
        debounceTimer.AutoReset = false;
        debounceTimer.Start();
    }

    void ChangeTitle(object? sender, System.Timers.ElapsedEventArgs e)
    {
        base.TraceChangeManager.BulkEdit = true;
        Track.Title = title;
        switch (CurrentViewMode)
        {
            case ViewMode.DetailView:
            case ViewMode.ImportView:
                if ((String.IsNullOrEmpty(Track.Artist)) && (String.IsNullOrEmpty(autocompleteTrack?.Artist) == false))
                {
                    Track.Artist = autocompleteTrack.Artist;
                }
                if ((Track.Length.HasValue == false) && (autocompleteTrack?.Length.HasValue == true))
                {
                    Track.Length = autocompleteTrack?.Length;
                }
                break;
        }
        base.TraceChangeManager.BulkEdit = false;
    }
}
