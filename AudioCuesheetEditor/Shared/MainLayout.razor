<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inherits LayoutComponentBase

@implements IDisposable

@inject NavigationManager _navigationManager
@inject ITextLocalizer<MainLayout> _localizer
@inject ITextLocalizerService _localizationService
@inject TraceChangeManager _traceChangeManager
@inject ILogger<MainLayout> _logger
@inject IJSRuntime _jsRuntime
@inject HotKeys _hotKeys
@inject LocalStorageOptionsProvider _localStorageOptionsProvider
@inject SessionStateContainer _sessionStateContainer
@inject IBlazorDownloadFileService _blazorDownloadFileService

<ErrorBoundary>
    <ChildContent>
        <CascadingValue Value="@this">
            <Layout>
                <LayoutHeader Fixed Position="Position.Sticky">
                    <Bar Background="Background.Dark" ThemeContrast="ThemeContrast.Dark" Breakpoint="Breakpoint.Desktop">
                        <BarBrand>
                            <BarLink To="@_navigationManager.BaseUri">
                                <Row TextColor="TextColor.White">
                                    <Column ColumnSize="ColumnSize.Is2">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M2 13.5V7h1v6.5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V7h1v6.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5zm11-11V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z" />
                                            <path fill-rule="evenodd" d="M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z" />
                                        </svg>
                                    </Column>
                                    <Column Display="Display.Block.OnTablet.None.OnMobile">
                                        AudioCuesheetEditor
                                    </Column>
                                </Row>
                            </BarLink>
                        </BarBrand>
                        @if(displayMenuBar)
                        {
                            <BarToggler />
                            <BarMenu>
                                <BarStart>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Undo last change"]">
                                            <Button Color="Color.Primary" Disabled="!_traceChangeManager.CanUndo" Clicked="() => _traceChangeManager.Undo()" Class="nav-link">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="White" class="bi bi-backspace-fill" viewBox="0 0 16 16">
                                                    <path d="M15.683 3a2 2 0 0 0-2-2h-7.08a2 2 0 0 0-1.519.698L.241 7.35a1 1 0 0 0 0 1.302l4.843 5.65A2 2 0 0 0 6.603 15h7.08a2 2 0 0 0 2-2V3zM5.829 5.854a.5.5 0 1 1 .707-.708l2.147 2.147 2.146-2.147a.5.5 0 1 1 .707.708L9.39 8l2.146 2.146a.5.5 0 0 1-.707.708L8.683 8.707l-2.147 2.147a.5.5 0 0 1-.707-.708L7.976 8 5.829 5.854z" />
                                                </svg>
                                                <Text Display="Display.Block.OnMobile.None.OnDesktop">
                                                    @_localizer["Undo"]
                                                </Text>
                                            </Button>
                                        </Tooltip>
                                    </BarItem>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <Tooltip Placement="TooltipPlacement.Right" Text="@_localizer["Redo last change"]">
                                            <Button Color="Color.Primary" Disabled="!_traceChangeManager.CanRedo" Clicked="() => _traceChangeManager.Redo()" Class="nav-link">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="White" class="bi bi-backspace-reverse-fill" viewBox="0 0 16 16">
                                                    <path d="M0 3a2 2 0 0 1 2-2h7.08a2 2 0 0 1 1.519.698l4.843 5.651a1 1 0 0 1 0 1.302L10.6 14.3a2 2 0 0 1-1.52.7H2a2 2 0 0 1-2-2V3zm9.854 2.854a.5.5 0 0 0-.708-.708L7 7.293 4.854 5.146a.5.5 0 1 0-.708.708L6.293 8l-2.147 2.146a.5.5 0 0 0 .708.708L7 8.707l2.146 2.147a.5.5 0 0 0 .708-.708L7.707 8l2.147-2.146z" />
                                                </svg>
                                                <Text Display="Display.Block.OnMobile.None.OnDesktop">
                                                    @_localizer["Redo"]
                                                </Text>
                                            </Button>
                                        </Tooltip>
                                    </BarItem>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <BarDropdown>
                                            <BarDropdownToggle Class="btn btn-primary">
                                                @_localizer["Export"]
                                            </BarDropdownToggle>
                                            <BarDropdownMenu Background="Background.Dark">
                                                <BarDropdownItem>
                                                    <Tooltip Placement="TooltipPlacement.Right" Text="@GetLocalizedString(_sessionStateContainer.Cuesheet.CanWriteCuesheetFile == false, "Please check processinghints for errors, otherwise the file is not exportable")">
                                                        <Button Color="Color.Primary" Clicked="() => ControlModalDialog(modalDownloadCuesheet, true)" Disabled="!_sessionStateContainer.Cuesheet.CanWriteCuesheetFile">@_localizer["Download cuesheet"]</Button>
                                                    </Tooltip>
                                                </BarDropdownItem>
                                                <BarDropdownItem>
                                                    <Button Color="Color.Primary" Clicked="() => ControlModalDialog(modalDownloadProjectfile, true)">@_localizer["Save project"]</Button>
                                                </BarDropdownItem>
                                                <BarDropdownItem>
                                                    <Button Color="Color.Primary" Clicked="OnDisplayExportProfilesClicked">@_localizer["Open exportprofiles"]</Button>
                                                </BarDropdownItem>
                                            </BarDropdownMenu>
                                        </BarDropdown>
                                    </BarItem>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <BarDropdown>
                                            <BarDropdownToggle Class="btn btn-success">
                                                @_localizer["Select ViewMode"]
                                            </BarDropdownToggle>
                                            <BarDropdownMenu Background="Background.Dark">
                                                @foreach (var name in Enum.GetNames(typeof(ViewMode)))
                                                {
                                                    <BarDropdownItem>
                                                        <Button Color="Color.Secondary" Clicked="() => OnViewModeSelected((ViewMode)Enum.Parse(typeof(ViewMode), name))">@_localizer[name]</Button>
                                                    </BarDropdownItem>
                                                }
                                            </BarDropdownMenu>
                                        </BarDropdown>
                                    </BarItem>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <BarDropdown>
                                            <BarDropdownToggle Class="btn btn-danger">
                                                @_localizer["Reset"]
                                            </BarDropdownToggle>
                                            <BarDropdownMenu Background="Background.Dark">
                                                <BarDropdownItem>
                                                    <Button Color="Color.Danger" Clicked="OnDeleteAllTracksClicked">@_localizer["Delete all tracks"]</Button>
                                                </BarDropdownItem>
                                                <BarDropdownItem>
                                                    <Button Color="Color.Danger" Clicked="RestartCuesheetClicked">@_localizer["Reset cuesheet"]</Button>
                                                </BarDropdownItem>
                                                <Divider />
                                                <BarDropdownItem>
                                                    <Button Color="Color.Danger" Clicked="OnRestartCompleteApplicationClicked">@_localizer["Restart complete application"]</Button>
                                                </BarDropdownItem>
                                                <BarDropdownItem>
                                                    <Button Color="Color.Danger" Clicked="OnResetCompleteApplicationClicked">@_localizer["Reset complete application"]</Button>
                                                </BarDropdownItem>
                                            </BarDropdownMenu>
                                        </BarDropdown>
                                    </BarItem>
                                </BarStart>
                            </BarMenu>
                        }
                        <BarItem Display="Display.Block.OnFullHD.None.OnDesktop.None.OnTablet.None.OnMobile">
                            <CultureSelector />
                        </BarItem>
                        <BarItem Padding="Padding.Is3.OnX">
                            <Button Color="Color.Light" Clicked="() => OpenOptionsDialog(optionsDialog)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                                    <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                                    <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                                </svg>
                            </Button>
                        </BarItem>
                        <BarEnd>
                            <BarItem>
                                <BarLink To="help" TextColor="TextColor.White">@_localizer["Help"]</BarLink>
                            </BarItem>
                            <BarItem>
                                <BarLink To="about" TextColor="TextColor.White">@_localizer["About"]</BarLink>
                            </BarItem>
                        </BarEnd>
                    </Bar>
                </LayoutHeader>
                <LayoutContent>
                    @Body
                </LayoutContent>
            </Layout>
        </CascadingValue>
    </ChildContent>
    <ErrorContent>
        <Heading Size="HeadingSize.Is3" TextColor="TextColor.Danger">@_localizer["An error occured"]</Heading>
        <Paragraph>@((MarkupString)_localizer["An error has occured in this applciation. Please report this error with as much details as possible here. Afterwards you can reload the application."])</Paragraph>
    </ErrorContent>
</ErrorBoundary>

<OptionsDialog @ref="optionsDialog" />
<ModalDialog @ref="modalDialog" />
<ExportProfilesDialog @ref="exportProfilesDialog" />

@if (applicationOptions != null)
{
    <Modal @ref="modalDownloadProjectfile" VisibleChanged="ModalDownloadProjectfile_VisibleChanged">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>
                    @_localizer["Save project"]
                </ModalTitle>
                <CloseButton Clicked="() => ControlModalDialog(modalDownloadProjectfile, false)" />
            </ModalHeader>
            <ModalBody>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit @bind-Text="applicationOptions.ProjectFileName" Immediate="false" />
                    </FieldBody>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="DownloadProjectfileClicked">@_localizer["Download projectfile"]</Button>
                <Button Color="Color.Secondary" Clicked="() => ControlModalDialog(modalDownloadProjectfile, false)">@_localizer["Abort"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalDownloadCuesheet" VisibleChanged="ModalDownloadCuesheet_VisibleChanged">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>
                    @_localizer["Download cuesheet"]
                </ModalTitle>
                <CloseButton Clicked="() => ControlModalDialog(modalDownloadCuesheet, false)" />
            </ModalHeader>
            <ModalBody>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit @bind-Text="applicationOptions.CuesheetFileName" Immediate="false" />
                    </FieldBody>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="DownloadCuesheetFileClicked" Disabled="!_sessionStateContainer.Cuesheet.CanWriteCuesheetFile">@_localizer["Download cuesheet"]</Button>
                <Button Color="Color.Secondary" Clicked="() => ControlModalDialog(modalDownloadCuesheet, false)">@_localizer["Abort"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    Boolean displayMenuBar = false;
    HotKeysContext? hotKeysContext;
    ApplicationOptions? applicationOptions;
    Boolean modalDownloadCuesheetVisible = false;
    Boolean modalDownloadProjectfileVisible = false;

    OptionsDialog? optionsDialog;
    ModalDialog? modalDialog;
    ExportProfilesDialog? exportProfilesDialog;
    Modal? modalDownloadProjectfile;
    Modal? modalDownloadCuesheet;

    protected override async Task OnInitializedAsync()
    {
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        _traceChangeManager.TracedObjectHistoryChanged += TraceChangeManager_TracedObjectHistoryChanged;
        _traceChangeManager.UndoDone += TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone += TraceChangeManager_RedoDone;
        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKey.Ctrl, Key.h, () => _navigationManager.NavigateTo("Help"))
            .Add(ModKey.Ctrl, Key.e, OnStrgEKeyDown)
            .Add(ModKey.Ctrl, Key.s, OnStrgSKeyDown)
            .Add(Key.Enter, OnEnterKeyDown);

        applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();

        _sessionStateContainer.CurrentViewMode = applicationOptions.ViewMode;

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        hotKeysContext?.Dispose();
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _traceChangeManager.TracedObjectHistoryChanged -= TraceChangeManager_TracedObjectHistoryChanged;
        _traceChangeManager.UndoDone -= TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone -= TraceChangeManager_RedoDone;
    }

    public void SetDisplayMenuBar(Boolean display)
    {
        if (displayMenuBar != display)
        {
            displayMenuBar = display;
            StateHasChanged();
        }
    }

    private String? GetLocalizedString(Boolean expressionToCheck, String localizedStringName)
    {
        if (expressionToCheck == true)
        {
            return _localizer[localizedStringName];
        }
        else
        {
            return null;
        }
    }

    async Task OnDeleteAllTracksClicked()
    {
        _logger.LogInformation("OnDeleteAllTracksClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Do you really want to delete all tracks? This can not be reversed."];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            void deleteTracksDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("deleteTracksDelegate");
                _sessionStateContainer.Cuesheet.RemoveTracks(_sessionStateContainer.Cuesheet.Tracks);
                modalDialog.Confirmed -= deleteTracksDelegate;
                StateHasChanged();
            };
            modalDialog.Confirmed += deleteTracksDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task RestartCuesheetClicked()
    {
        _logger.LogInformation("RestartCuesheetClicked clicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Do you really want to reset the cuesheet? This can not be reversed."];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            void newCuesheetDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("newCuesheetDelegate");
                _sessionStateContainer.Cuesheet = new Cuesheet();
                modalDialog.Confirmed -= newCuesheetDelegate;
                StateHasChanged();
            };
            modalDialog.Confirmed += newCuesheetDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task OnRestartCompleteApplicationClicked()
    {
        _logger.LogInformation("OnRestartCompleteApplicationClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Confirm restart of application. All unsaved changes are lost!"];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            async void restartApplicationDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("restartApplicationDelegate");
                modalDialog.Confirmed -= restartApplicationDelegate;
                await _jsRuntime.InvokeVoidAsync("removeBeforeunload");
                _navigationManager.NavigateTo(_navigationManager.Uri, true);
            };
            modalDialog.Confirmed += restartApplicationDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task OnResetCompleteApplicationClicked()
    {
        _logger.LogInformation("OnResetCompleteApplicationClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Confirm reset of application. All unsaved changes are lost and the application is reloaded!"];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Confirmed += OnRestartApplicationConfirmed;
            await modalDialog.ShowModal();
        }
    }

    private async void OnRestartApplicationConfirmed(object? sender, EventArgs args)
    {
        _logger.LogInformation("OnRestartApplicationConfirmed");
        await _jsRuntime.InvokeVoidAsync("resetLocalStorage");
        await _jsRuntime.InvokeVoidAsync("removeBeforeunload");
        if (modalDialog != null)
        {
            modalDialog.Confirmed -= OnRestartApplicationConfirmed;
        }
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    private async Task OnDisplayExportProfilesClicked()
    {
        if (exportProfilesDialog != null)
        {
            await exportProfilesDialog.Show();
        }
    }

    private async Task DownloadProjectfileClicked()
    {
        if (applicationOptions == null)
        {
            applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        }
        var projectFile = new Projectfile(_sessionStateContainer.Cuesheet);
        var fileData = projectFile.GenerateFile();
        await _localStorageOptionsProvider.SaveOptions(applicationOptions);
        await _blazorDownloadFileService.DownloadFile(applicationOptions.ProjectFileName, fileData, "text/plain");
        if (modalDownloadProjectfile != null)
        {
            await modalDownloadProjectfile.Hide();
        }
    }


    private async Task DownloadCuesheetFileClicked()
    {
        _logger.LogInformation("DownloadCuesheetFileClicked");
        if (applicationOptions == null)
        {
            applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        }
        var cuesheetFile = new Cuesheetfile(_sessionStateContainer.Cuesheet);
        var fileData = cuesheetFile.GenerateCuesheetFile();
        await _localStorageOptionsProvider.SaveOptions(applicationOptions);
        await _blazorDownloadFileService.DownloadFile(applicationOptions.CuesheetFileName, fileData, "text/plain");
        if (modalDownloadCuesheet != null)
        {
            await modalDownloadCuesheet.Hide();
        }
    }

    async ValueTask OnEnterKeyDown()
    {
        if (modalDownloadProjectfileVisible)
        {
            await DownloadProjectfileClicked();
        }
        if (modalDownloadCuesheetVisible)
        {
            await DownloadCuesheetFileClicked();
        }
    }

    async ValueTask OnStrgEKeyDown()
    {
        if (exportProfilesDialog != null)
        {
            await exportProfilesDialog.Show();
        }
    }

    async ValueTask OnStrgSKeyDown()
    {
        if (modalDownloadProjectfile != null)
        {
            await modalDownloadProjectfile.Show();
        }
    }

    private Task OnViewModeSelected(ViewMode selectedViewMode)
    {
        _sessionStateContainer.CurrentViewMode = selectedViewMode;
        return Task.CompletedTask;
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void TraceChangeManager_TracedObjectHistoryChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void TraceChangeManager_UndoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void TraceChangeManager_RedoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void ModalDownloadCuesheet_VisibleChanged(Boolean visible)
    {
        modalDownloadCuesheetVisible = visible;
    }

    private void ModalDownloadProjectfile_VisibleChanged(Boolean visible)
    {
        modalDownloadProjectfileVisible = visible;
    }

    async Task ControlModalDialog(Modal? dialog, Boolean show)
    {
        if (dialog != null)
        {
            if (show)
            {
                await dialog.Show();
            }
            else
            {
                await dialog.Hide();
            }
        }
    }

    async Task OpenOptionsDialog(OptionsDialog? dialog)
    {
        if (dialog != null)
        {
            await dialog.Show();
        }
    }
}