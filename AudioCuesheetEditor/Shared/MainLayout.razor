<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inherits LayoutComponentBase

@implements IAsyncDisposable

@inject NavigationManager _navigationManager
@inject ITextLocalizer<MainLayout> _localizer
@inject ITextLocalizerService _localizationService
@inject TraceChangeManager _traceChangeManager
@inject ILogger<MainLayout> _logger
@inject IJSRuntime _jsRuntime
@inject HotKeys _hotKeys
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider
@inject SessionStateContainer _sessionStateContainer
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject ITextLocalizer<ValidationMessage> _validationMessageLocalizer

<ErrorBoundary>
    <ChildContent>
        <CascadingValue Value="@this">
            <Layout>
                <LayoutHeader Fixed Position="Position.Sticky">
                    <Bar Background="Background.Dark" ThemeContrast="ThemeContrast.Dark" Breakpoint="Breakpoint.Medium" Visible="false">
                        @if ((displayMenuBar) && (sidebar != null))
                        {
                            //Just a little a hack for displaying a toggler for the sidebar always and independent from the breakpoint of the top bar
                            <BarItem Padding="Padding.Is1.OnX">
                                <Button Color="Color.Secondary" Outline Clicked="SideBarToogleClicked">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-menu-button-wide" viewBox="0 0 16 16">
                                        <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v2A1.5 1.5 0 0 1 14.5 5h-13A1.5 1.5 0 0 1 0 3.5zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5z" />
                                        <path d="M2 2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5m10.823.323-.396-.396A.25.25 0 0 1 12.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0M0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5" />
                                    </svg>
                                </Button>
                            </BarItem>
                        }
                        <BarBrand>
                            <BarLink To="@_navigationManager.BaseUri" TextColor="TextColor.White">
                                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M2 13.5V7h1v6.5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V7h1v6.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5zm11-11V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z" />
                                    <path fill-rule="evenodd" d="M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z" />
                                </svg>
                                AudioCuesheetEditor
                            </BarLink>
                        </BarBrand>
                        @if (displayMenuBar)
                        {
                            <BarToggler />
                            <BarMenu>
                                <BarStart>
                                    <BarItem Padding="Padding.Is1.OnX">
                                        <Tooltip Text="@_localizer["Undo last change"]">
                                            <Button Color="Color.Primary" Disabled="!_traceChangeManager.CanUndo" Clicked="() => _traceChangeManager.Undo()">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z" />
                                                    <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466" />
                                                </svg>
                                                @_localizer["Undo"]
                                            </Button>
                                        </Tooltip>
                                        <Tooltip Text="@_localizer["Redo last change"]">
                                            <Button Color="Color.Primary" Disabled="!_traceChangeManager.CanRedo" Clicked="() => _traceChangeManager.Redo()">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                                                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                                                </svg>
                                                @_localizer["Redo"]
                                            </Button>
                                        </Tooltip>
                                    </BarItem>
                                </BarStart>
                            </BarMenu>
                        }
                        <BarEnd>
                            <BarItem Padding="Padding.Is1.OnX" Display="Display.None.Block.OnWidescreen">
                                <CultureSelector />
                            </BarItem>
                            <BarItem Padding="Padding.Is1.OnX">
                                <BarDropdown RightAligned>
                                    <BarDropdownToggle>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                            <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286m1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94" />
                                        </svg>
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Background="Background.Dark">
                                        <BarDropdownItem To="help" TextColor="TextColor.White">@_localizer["Help"]</BarDropdownItem>
                                        <BarDropdownItem To="about" TextColor="TextColor.White">@_localizer["About"]</BarDropdownItem>
                                        <BarDropdownItem To="https://preview-audiocuesheeteditor.netlify.app/" Target="Target.Blank" TextColor="TextColor.White">@_localizer["Preview environment"]</BarDropdownItem>
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </BarItem>
                        </BarEnd>
                    </Bar>
                </LayoutHeader>
                <Layout Sider="displayMenuBar">
                    @if (displayMenuBar)
                    {
                        <LayoutSider>
                            <LayoutSiderContent>
                                <Bar @ref="sidebar" Background="Background.Dark" ThemeContrast="ThemeContrast.Dark" Mode="BarMode.VerticalInline" Visible="sidebarVisible">
                                    <BarMenu>
                                        <BarStart>
                                            <BarItem Padding="Padding.Is1.OnY">
                                                <BarDropdown>
                                                    <BarDropdownToggle Class="btn btn-success" TextAlignment="TextAlignment.Start" Style="background-color:#198754!important;">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-menu-button" viewBox="0 0 16 16">
                                                            <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h8A1.5 1.5 0 0 1 11 1.5v2A1.5 1.5 0 0 1 9.5 5h-8A1.5 1.5 0 0 1 0 3.5zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5z" />
                                                            <path d="m7.823 2.823-.396-.396A.25.25 0 0 1 7.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0M0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5" />
                                                        </svg>
                                                        @_localizer["ViewMode"]
                                                    </BarDropdownToggle>
                                                    <BarDropdownMenu Background="Background.Dark">
                                                        @foreach (var name in Enum.GetNames(typeof(ViewMode)))
                                                        {
                                                            <BarDropdownItem>
                                                                <Button Color="Color.Secondary" Clicked="() => OnViewModeSelected((ViewMode)Enum.Parse(typeof(ViewMode), name))">@_localizer[name]</Button>
                                                            </BarDropdownItem>
                                                        }
                                                    </BarDropdownMenu>
                                                </BarDropdown>
                                            </BarItem>
                                            <BarItem Padding="Padding.Is1.OnY">
                                                <BarDropdown>
                                                    <BarDropdownToggle Class="btn btn-primary" TextAlignment="TextAlignment.Start" Style="background-color: #0b5ed7!important;">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-download" viewBox="0 0 16 16">
                                                            <path d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383" />
                                                            <path d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708z" />
                                                        </svg>
                                                        @_localizer["Export"]
                                                    </BarDropdownToggle>
                                                    <BarDropdownMenu Background="Background.Dark">
                                                        <BarDropdownItem>
                                                            <Tooltip Placement="TooltipPlacement.Right" Text="@IsCuesheetExportableTooltip">
                                                                <Button Color="Color.Primary" Clicked="() => OnDisplayExportDialogClicked()" Disabled="!IsCuesheetExportable">@_localizer["Download cuesheet"]</Button>
                                                            </Tooltip>
                                                        </BarDropdownItem>
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Primary" Clicked="() => ControlModalDialog(modalDownloadProjectfile, true)">@_localizer["Save project"]</Button>
                                                        </BarDropdownItem>
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Primary" Clicked="OnDisplayExportProfilesClicked">@_localizer["Open exportprofiles"]</Button>
                                                        </BarDropdownItem>
                                                    </BarDropdownMenu>
                                                </BarDropdown>
                                            </BarItem>
                                        </BarStart>
                                        <BarEnd>
                                            <BarItem Padding="Padding.Is1.OnY">
                                                <BarDropdown>
                                                    <BarDropdownToggle Class="btn btn-danger" TextAlignment="TextAlignment.Start" Style="background-color: #bb2d3b!important;">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">
                                                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z" />
                                                            <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466" />
                                                        </svg>
                                                        @_localizer["Reset"]
                                                    </BarDropdownToggle>
                                                    <BarDropdownMenu Background="Background.Dark">
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Danger" Clicked="OnDeleteAllTracksClicked">@_localizer["Delete all tracks"]</Button>
                                                        </BarDropdownItem>
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Danger" Clicked="RestartCuesheetClicked">@_localizer["Reset cuesheet"]</Button>
                                                        </BarDropdownItem>
                                                        <Divider />
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Danger" Clicked="OnRestartCompleteApplicationClicked">@_localizer["Restart complete application"]</Button>
                                                        </BarDropdownItem>
                                                        <BarDropdownItem>
                                                            <Button Color="Color.Danger" Clicked="OnResetCompleteApplicationClicked">@_localizer["Reset complete application"]</Button>
                                                        </BarDropdownItem>
                                                    </BarDropdownMenu>
                                                </BarDropdown>
                                            </BarItem>
                                            <BarItem Padding="Padding.Is1.OnY">
                                                <Button Color="Color.Light" Clicked="() => OpenOptionsDialog(optionsDialog)" Width="Width.Is100" TextAlignment="TextAlignment.Start">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                                                        <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                                                        <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                                                    </svg>
                                                    @_localizer["Options"]
                                                </Button>
                                            </BarItem>
                                        </BarEnd>
                                    </BarMenu>
                                </Bar>
                            </LayoutSiderContent>
                        </LayoutSider>
                    }
                    <Layout>
                        <LayoutContent>
                            @Body
                        </LayoutContent>
                    </Layout>
                </Layout>
            </Layout>
        </CascadingValue>
    </ChildContent>
    <ErrorContent>
        <Heading Size="HeadingSize.Is2" TextColor="TextColor.Danger">@_localizer["An error occured"]</Heading>
        <Paragraph>@((MarkupString)_localizer["An error has occured in this application. Please report this error with as much details as possible here: <a href=\"https://github.com/NeoCoderMatrix86/AudioCuesheetEditor/issues/new?assignees=&labels=bug&template=bug_report.md&title=\" target=\"_blank\">https://github.com/NeoCoderMatrix86/AudioCuesheetEditor/issues/new?assignees=&labels=unreviewed+bug&template=bug_report.md&title=</a>."])</Paragraph>
        <Heading Size="HeadingSize.Is4">@_localizer["Error details"]</Heading>
        <Paragraph>@context</Paragraph>
        <Button Color="Color.Primary" Clicked="ReloadApplication">@_localizer["Reload application"]</Button>
    </ErrorContent>
</ErrorBoundary>

<OptionsDialog @ref="optionsDialog" />
<ModalDialog @ref="modalDialog" />

@if (applicationOptions != null)
{
    <Modal @ref="modalDownloadProjectfile" VisibleChanged="ModalDownloadProjectfile_VisibleChanged">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>
                    @_localizer["Save project"]
                </ModalTitle>
                <CloseButton Clicked="() => ControlModalDialog(modalDownloadProjectfile, false)" />
            </ModalHeader>
            <ModalBody>
                <Validations>
                    <Validation AsyncValidator="(args, token) => ValidatorUtility<ApplicationOptions>.Validate(args, applicationOptions, x => x.ProjectFilename, _validationMessageLocalizer, token)">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit @bind-Text="applicationOptions.ProjectFilename" Immediate="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="DownloadProjectfileClicked">@_localizer["Download projectfile"]</Button>
                <Button Color="Color.Secondary" Clicked="() => ControlModalDialog(modalDownloadProjectfile, false)">@_localizer["Abort"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<ModalExportdialog @ref="modalExportdialogCuesheet" Title="@_localizer["Download cuesheet"]" ExportType="ExportType.Cuesheet" ApplicationOptions="applicationOptions" ExportOptions="exportOptions">
    <PrepareExportStepContent>
        @if (applicationOptions != null)
        {
            <Validation AsyncValidator="(args, token) => ValidatorUtility<ApplicationOptions>.Validate(args, applicationOptions, x => x.CuesheetFilename, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Text="@applicationOptions.CuesheetFilename" Immediate="false" TextChanged="OnApplicationOptionsCuesheetFilenameChanged">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
        }
    </PrepareExportStepContent>
</ModalExportdialog>

<ModalExportdialog @ref="modalExportdialogExportprofile" Title="@_localizer["Exportprofiles"]" ExportType="ExportType.Exportprofile" ApplicationOptions="applicationOptions" ExportOptions="exportOptions">
    <PrepareExportStepContent>
        @if (exportOptions != null)
        {
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Select exportprofile"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <SelectList TItem="Exportprofile" TValue="Guid?" Data="@exportOptions?.ExportProfiles" TextField="@((item) => item.Name)" ValueField="@((item)=>item.Id)" SelectedValue="exportOptions?.SelectedProfileId" SelectedValueChanged="SelectedExportProfileChanged" />
                </FieldBody>
            </Field>
            <Button Color="Color.Primary" Clicked="OnAddNewExportProfileClicked">@_localizer["Add new exportprofile"]</Button>
            <Button Color="Color.Danger" Clicked="OnDeleteExportProfileClicked">@_localizer["Delete selected exportprofile"]</Button>
            <Divider />
            <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, exportOptions?.SelectedExportProfile, x => x.Name, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Name"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@_localizer["Enter exportprofile name here"]" Text="@exportOptions?.SelectedExportProfile?.Name" TextChanged="OnSelectedProfileNameChanged" Disabled="exportOptions?.SelectedExportProfile == null">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, exportOptions?.SelectedExportProfile, x => x.Filename, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">@_localizer["Filename"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <TextEdit Placeholder="@_localizer["Enter exportprofile filename here"]" Text="@exportOptions?.SelectedExportProfile?.Filename" TextChanged="OnSelectedExportProfileFilenameChanged" Disabled="exportOptions?.SelectedExportProfile == null">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, exportOptions?.SelectedExportProfile, x => x.SchemeHead, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Text="@_localizer["Enter exportschemehead here tooltip"]" Placement="TooltipPlacement.TopEnd">
                            @_localizer["Exportprofilescheme head"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Placeholder="@_localizer["Enter exportscheme head here"]" Text="@exportOptions?.SelectedExportProfile?.SchemeHead" TextChanged="OnSelectedExportProfileSchemeHeadChanged" Disabled="exportOptions?.SelectedExportProfile == null">
                                    <Feedback>
                                        <ValidationError Tooltip />
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportprofile.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => DropDownItemSelected(nameof(Exportprofile.SchemeHead), availableScheme.Value)" Disabled="exportOptions?.SelectedExportProfile == null">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, exportOptions?.SelectedExportProfile, x => x.SchemeTracks, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Text="@_localizer["Enter exportscheme track here tooltip"]" Placement="TooltipPlacement.TopEnd">
                            @_localizer["Exportprofilescheme track"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Placeholder="@_localizer["Enter exportscheme track here"]" Text="@exportOptions?.SelectedExportProfile?.SchemeTracks" TextChanged="OnSelectedExportProfileSchemeTracksChanged" Disabled="exportOptions?.SelectedExportProfile == null">
                                    <Feedback>
                                        <ValidationError Tooltip />
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportprofile.AvailableTrackSchemes)
                                        {
                                            <DropdownItem Clicked="() => DropDownItemSelected(nameof(Exportprofile.SchemeTracks), availableScheme.Value)" Disabled="exportOptions?.SelectedExportProfile == null">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation AsyncValidator="(args, token) => ValidatorUtility<Exportprofile>.Validate(args, exportOptions?.SelectedExportProfile, x => x.SchemeFooter, _validationMessageLocalizer, token)">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is3">
                        <Tooltip Text="@_localizer["Enter exportscheme footer here tooltip"]" Placement="TooltipPlacement.TopStart">
                            @_localizer["Exportprofilescheme footer"]
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Placeholder="@_localizer["Enter exportscheme footer here"]" Text="@exportOptions?.SelectedExportProfile?.SchemeFooter" TextChanged="OnSelectedExportProfileSchemeFooterChanged" Disabled="exportOptions?.SelectedExportProfile == null">
                                    <Feedback>
                                        <ValidationError Tooltip />
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Dropdown>
                                    <DropdownToggle Color="Color.Secondary">
                                        @_localizer["Select placeholder"]
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        @foreach (var availableScheme in Exportprofile.AvailableCuesheetSchemes)
                                        {
                                            <DropdownItem Clicked="() => DropDownItemSelected(nameof(Exportprofile.SchemeFooter), availableScheme.Value)" Disabled="exportOptions?.SelectedExportProfile == null">@_localizer[availableScheme.Key]</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </Addon>
                        </Addons>
                    </FieldBody>
                </Field>
            </Validation>
        }
    </PrepareExportStepContent>
</ModalExportdialog>

@code {
    Bar? sidebar;
    Boolean displayMenuBar = false;
    HotKeysContext? hotKeysContext;
    ApplicationOptions? applicationOptions;
    Boolean modalDownloadProjectfileVisible = false;
    Boolean sidebarVisible = false;

    OptionsDialog? optionsDialog;
    ModalDialog? modalDialog;
    Modal? modalDownloadProjectfile;
    ModalExportdialog? modalExportdialogCuesheet;
    ModalExportdialog? modalExportdialogExportprofile;
    ExportOptions? exportOptions;

    String? IsCuesheetExportableTooltip
    {
        get
        {
            var generator = new ExportfileGenerator(ExportType.Cuesheet, _sessionStateContainer.Cuesheet, applicationOptions: applicationOptions);
            var validationResult = generator.Validate();
            if (validationResult.Status == Model.Entity.ValidationStatus.Error)
            {
                string? detailText = null;
                if (validationResult.ValidationMessages != null)
                {
                    foreach (var validationMessage in validationResult.ValidationMessages)
                    {
                        detailText += String.Format("{0}{1}", validationMessage.GetMessageLocalized(_validationMessageLocalizer), Environment.NewLine);
                    }
                }
                return _localizer["Please check processinghints for errors, otherwise the file is not exportable: {0}", detailText];
            }
            return null;
        }
    }

    Boolean IsCuesheetExportable => IsCuesheetExportableTooltip == null;

    protected override async Task OnInitializedAsync()
    {
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;
        _traceChangeManager.TracedObjectHistoryChanged += TraceChangeManager_TracedObjectHistoryChanged;
        _traceChangeManager.UndoDone += TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone += TraceChangeManager_RedoDone;
        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKey.Ctrl, Key.h, OnCtrlHKeyDown)
            .Add(ModKey.Ctrl, Key.e, OnCtrlEKeyDown)
            .Add(ModKey.Ctrl, Key.s, OnCtrlSKeyDown)
            .Add(Key.Enter, OnEnterKeyDown);

        applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        exportOptions = await _localStorageOptionsProvider.GetOptions<ExportOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;

        if (modalExportdialogExportprofile != null)
        {
            modalExportdialogExportprofile.GenerateExportfilesClicked += ModalExportdialogExportprofile_GenerateExportfilesClicked;
        }
        if (modalExportdialogCuesheet != null)
        {
            modalExportdialogCuesheet.GenerateExportfilesClicked += ModalExportdialogCuesheet_GenerateExportfilesClicked;
        }

        _sessionStateContainer.CurrentViewMode = applicationOptions.ViewMode;

        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
        _traceChangeManager.TracedObjectHistoryChanged -= TraceChangeManager_TracedObjectHistoryChanged;
        _traceChangeManager.UndoDone -= TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone -= TraceChangeManager_RedoDone;
        if (modalExportdialogExportprofile != null)
        {
            modalExportdialogExportprofile.GenerateExportfilesClicked -= ModalExportdialogExportprofile_GenerateExportfilesClicked;
        }
        if (modalExportdialogCuesheet != null)
        {
            modalExportdialogCuesheet.GenerateExportfilesClicked -= ModalExportdialogCuesheet_GenerateExportfilesClicked;
        }
        if (hotKeysContext != null)
        {
            await hotKeysContext.DisposeAsync();
        }
    }

    public void SetDisplayMenuBar(Boolean display)
    {
        if (displayMenuBar != display)
        {
            displayMenuBar = display;
            StateHasChanged();
        }
    }

    async Task OnDeleteAllTracksClicked()
    {
        _logger.LogInformation("OnDeleteAllTracksClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Do you really want to delete all tracks? This can not be reversed."];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            void deleteTracksDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("deleteTracksDelegate");
                _sessionStateContainer.Cuesheet.RemoveTracks(_sessionStateContainer.Cuesheet.Tracks);
                modalDialog.Confirmed -= deleteTracksDelegate;
                StateHasChanged();
            };
            modalDialog.Confirmed += deleteTracksDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task RestartCuesheetClicked()
    {
        _logger.LogInformation("RestartCuesheetClicked clicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Do you really want to reset the cuesheet? This can not be reversed."];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            void newCuesheetDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("newCuesheetDelegate");
                _sessionStateContainer.Cuesheet = new Cuesheet(_traceChangeManager);
                modalDialog.Confirmed -= newCuesheetDelegate;
                StateHasChanged();
            };
            modalDialog.Confirmed += newCuesheetDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task OnRestartCompleteApplicationClicked()
    {
        _logger.LogInformation("OnRestartCompleteApplicationClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Confirm restart of application. All unsaved changes are lost!"];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Mode = ModalDialog.DialogMode.Confirm;
            async void restartApplicationDelegate(object? sender, EventArgs args)
            {
                _logger.LogInformation("restartApplicationDelegate");
                modalDialog.Confirmed -= restartApplicationDelegate;
                await ReloadApplication();
            };
            modalDialog.Confirmed += restartApplicationDelegate;
            await modalDialog.ShowModal();
        }
    }

    async Task OnResetCompleteApplicationClicked()
    {
        _logger.LogInformation("OnResetCompleteApplicationClicked");
        //Display a confirm warning
        if (modalDialog != null)
        {
            modalDialog.Title = _localizer["Confirmation required"];
            modalDialog.Text = _localizer["Confirm reset of application. All unsaved changes are lost and the application is reloaded!"];
            modalDialog.ModalSize = ModalSize.Small;
            modalDialog.Confirmed += OnRestartApplicationConfirmed;
            await modalDialog.ShowModal();
        }
    }

    private async void OnRestartApplicationConfirmed(object? sender, EventArgs args)
    {
        _logger.LogInformation("OnRestartApplicationConfirmed");
        await _jsRuntime.InvokeVoidAsync("resetLocalStorage");
        await _jsRuntime.InvokeVoidAsync("removeBeforeunload");
        if (modalDialog != null)
        {
            modalDialog.Confirmed -= OnRestartApplicationConfirmed;
        }
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    async Task OnDisplayExportDialogClicked()
    {
        if (modalExportdialogCuesheet != null)
        {
            await modalExportdialogCuesheet.Show();
        }
    }

    async Task OnDisplayExportProfilesClicked()
    {
        if (modalExportdialogExportprofile != null)
        {
            await modalExportdialogExportprofile.Show();
        }
    }

    private async Task DownloadProjectfileClicked()
    {
        if (applicationOptions == null)
        {
            applicationOptions = await _localStorageOptionsProvider.GetOptions<ApplicationOptions>();
        }
        //Save ApplicationOptions with information from modal popup!
        await _localStorageOptionsProvider.SaveOptions(applicationOptions);
        var projectFile = new Projectfile(_sessionStateContainer.Cuesheet);
        var fileData = projectFile.GenerateFile();
        await _blazorDownloadFileService.DownloadFile(applicationOptions.ProjectFilename, fileData, "text/plain");
        if (modalDownloadProjectfile != null)
        {
            await modalDownloadProjectfile.Hide();
        }
    }

    async ValueTask OnEnterKeyDown()
    {
        if (modalDownloadProjectfileVisible)
        {
            await DownloadProjectfileClicked();
        }
    }

    ValueTask OnCtrlHKeyDown()
    {
        if (ShortCutsEnabled)
        {
            _navigationManager.NavigateTo("Help");
        }
        return ValueTask.CompletedTask;
    }

    async ValueTask OnCtrlEKeyDown()
    {
        if (ShortCutsEnabled)
        {
            await OnDisplayExportProfilesClicked();
        }
    }

    async ValueTask OnCtrlSKeyDown()
    {
        if ((ShortCutsEnabled) && (modalDownloadProjectfile != null))
        {
            await modalDownloadProjectfile.Show();
        }
    }

    private Task OnViewModeSelected(ViewMode selectedViewMode)
    {
        _sessionStateContainer.CurrentViewMode = selectedViewMode;
        return Task.CompletedTask;
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void TraceChangeManager_TracedObjectHistoryChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void TraceChangeManager_UndoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    void TraceChangeManager_RedoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void ModalDownloadProjectfile_VisibleChanged(Boolean visible)
    {
        modalDownloadProjectfileVisible = visible;
    }

    async Task ControlModalDialog(Modal? dialog, Boolean show)
    {
        if (dialog != null)
        {
            if (show)
            {
                await dialog.Show();
            }
            else
            {
                await dialog.Hide();
            }
        }
    }

    async Task OpenOptionsDialog(OptionsDialog? dialog)
    {
        if (dialog != null)
        {
            await dialog.Show();
        }
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions options)
    {
        if (options is ApplicationOptions)
        {
            applicationOptions = (ApplicationOptions)options;
        }
        if (options is ExportOptions)
        {
            exportOptions = (ExportOptions)options;
        }
    }

    void OnAddNewExportProfileClicked()
    {
        _logger.LogInformation("OnAddNewExportProfileClicked");
        if (exportOptions != null)
        {
            var newProfile = new Exportprofile();
            exportOptions.ExportProfiles.Add(newProfile);
            exportOptions.SelectedExportProfile = newProfile;
        }
        Task.Run(SaveExportOptions);
    }

    void OnDeleteExportProfileClicked()
    {
        _logger.LogInformation("OnDeleteExportProfileClicked");
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.ExportProfiles.Remove(exportOptions.SelectedExportProfile);
            exportOptions.SelectedExportProfile = exportOptions.ExportProfiles.LastOrDefault();
        }
        Task.Run(SaveExportOptions);
    }

    void SelectedExportProfileChanged(Guid? newValue)
    {
        _logger.LogInformation("SelectedExportProfileChanged with {0}", newValue);
        if (exportOptions != null)
        {
            var selectedProfile = exportOptions.ExportProfiles.First(x => x.Id == newValue);
            exportOptions.SelectedExportProfile = selectedProfile;
        }
        modalExportdialogExportprofile?.Validations?.ValidateAll().GetAwaiter().GetResult();
        modalExportdialogExportprofile?.Reset();
        Task.Run(SaveExportOptions);
        StateHasChanged();
    }

    async Task SaveExportOptions()
    {
        _logger.LogDebug("SaveExportOptions");
        if (exportOptions != null)
        {
            await _localStorageOptionsProvider.SaveOptions(exportOptions);
        }
    }

    async Task SaveApplicationOptions()
    {
        _logger.LogDebug("SaveApplicationOptions");
        if (applicationOptions != null)
        {
            await _localStorageOptionsProvider.SaveOptions(applicationOptions);
        }
    }

    void ModalExportdialogExportprofile_GenerateExportfilesClicked(object? sender, EventArgs args)
    {
        Task.Run(SaveExportOptions);
    }

    void ModalExportdialogCuesheet_GenerateExportfilesClicked(object? sender, EventArgs args)
    {
        Task.Run(SaveApplicationOptions);
    }

    Task OnApplicationOptionsCuesheetFilenameChanged(string value)
    {
        if (applicationOptions != null)
        {
            applicationOptions.CuesheetFilename = value;
        }
        if (modalExportdialogCuesheet != null)
        {
            modalExportdialogCuesheet.Reset();
        }
        return Task.CompletedTask;
    }

    async Task OnSelectedProfileNameChanged(string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.SelectedExportProfile.Name = value;
        }
        modalExportdialogExportprofile?.Reset();
        await SaveExportOptions();
    }

    async Task OnSelectedExportProfileFilenameChanged(string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.SelectedExportProfile.Filename = value;
        }
        modalExportdialogExportprofile?.Reset();
        await SaveExportOptions();
    }

    async Task OnSelectedExportProfileSchemeHeadChanged(string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.SelectedExportProfile.SchemeHead = value;
        }
        modalExportdialogExportprofile?.Reset();
        await SaveExportOptions();
    }

    async Task OnSelectedExportProfileSchemeTracksChanged(string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.SelectedExportProfile.SchemeTracks = value;
        }
        modalExportdialogExportprofile?.Reset();
        await SaveExportOptions();
    }

    async Task OnSelectedExportProfileSchemeFooterChanged(string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.SelectedExportProfile.SchemeFooter = value;
        }
        modalExportdialogExportprofile?.Reset();
        await SaveExportOptions();
    }

    async Task DropDownItemSelected(string schemeName, string value)
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            switch (schemeName)
            {
                case nameof(Exportprofile.SchemeHead):
                    await OnSelectedExportProfileSchemeHeadChanged(exportOptions.SelectedExportProfile.SchemeHead += value);
                    break;
                case nameof(Exportprofile.SchemeTracks):
                    await OnSelectedExportProfileSchemeTracksChanged(exportOptions.SelectedExportProfile.SchemeTracks += value);
                    break;
                case nameof(Exportprofile.SchemeFooter):
                    await OnSelectedExportProfileSchemeFooterChanged(exportOptions.SelectedExportProfile.SchemeFooter += value);
                    break;
            }

        }
    }

    async Task ReloadApplication()
    {
        await _jsRuntime.InvokeVoidAsync("removeBeforeunload");
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    Task SideBarToogleClicked()
    {
        sidebarVisible = !sidebarVisible;
        if (sidebar != null)
        {
            sidebar.OnBreakpoint(sidebarVisible);
        }
        return Task.CompletedTask;
    }

    Boolean ShortCutsEnabled
    {
        get
        {
            return !(_navigationManager.Uri.EndsWith("/help", StringComparison.InvariantCultureIgnoreCase)) && !(_navigationManager.Uri.EndsWith("/about", StringComparison.InvariantCultureIgnoreCase));
        }
    }
}