<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@page "/ErrorReport"
@inject IStringLocalizer<Localization> localizer
@inject IJSRuntime JSRuntime
@inject ILoggerProvider ILoggerProvider
<Layout>
    <LayoutContent Margin="Margin.Is2">
        <h5>@localizer["ExceptionOccuredPleaseFillErrorReport"]</h5>

        <form action="https://formspree.io/f/mwkwwokw" method="POST">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="yourEmailAddressLabel">@localizer["YourEmailAddress"]</span>
                </div>
                <input type="text" class="form-control" name="_replyto" aria-label="YourEmailAddress" aria-describedby="yourEmailAddressLabel">
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="errorReportLabel">@localizer["ErrorReport"]</span>
                </div>
                <textarea rows="10" class="form-control" name="errorReport" aria-label="ErrorReport" aria-describedby="errorReportLabel">@DescribeHowTheErrorOccured</textarea>
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="filesReportLabel">@localizer["Files"]</span>
                </div>
                <InputFile Class="form-control" multiple OnChange="OnFilesChanged"></InputFile>
                <textarea class="form-control disabled" hidden disabled aria-label="FilesBase64" aria-describedby="filesReportLabel" name="FilesBase64" @bind="filesAsBase64"></textarea>
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="exceptionLabel">@localizer["Exception"]</span>
                </div>
                <textarea rows="10" class="form-control disabled" disabled aria-label="Exception" aria-describedby="exceptionLabel" name="exception" @bind="Exception"></textarea>
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="optionsLabel">@localizer["Options"]</span>
                </div>
                <textarea rows="3" class="form-control disabled" disabled aria-label="Options" aria-describedby="optionsLabel" name="options" @bind="Options"></textarea>
            </div>

            @if (logEntries != null)
            {
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="logLabel">@localizer["Log"]</span>
                    </div>
                    <textarea rows="10" class="form-control disabled" disabled aria-label="Log" aria-describedby="logLabel" name="log">
                        @logEntries
                    </textarea>
                </div>
            }

            <p>@localizer["OnceYouSubmitTheErrorReport"]</p>

            <button class="btn btn-primary" type="submit">@localizer["Send"]</button>
        </form>
    </LayoutContent>
</Layout>
@code {
    public static String Exception { get; set; }
    public String Options { get; private set; }
    private String filesAsBase64;
    private String logEntries = null;

    protected override async Task OnInitializedAsync()
    {
        //Reset browser history
        await JSRuntime.InvokeVoidAsync("removeBrowserHistoryEntry", null);
        Options = await JSRuntime.InvokeAsync<String>("ApplicationOptions.get");
        if (ILoggerProvider is LoggerProvider LoggerProvider)
        {
            foreach (var line in LoggerProvider.GetLogMessages())
            {
                logEntries += String.Format("{0}{1}", line, Environment.NewLine);
            }
        }
    }

    public MarkupString DescribeHowTheErrorOccured
    {
        get
        {
            MarkupString describeHowTheErrorOccured = (MarkupString)(localizer["DescribeHowTheErrorOccured"].Value.Replace(Environment.NewLine, "<br/>"));
            return describeHowTheErrorOccured;
        }
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (files != null)
        {
            filesAsBase64 = null;
            foreach (var file in files)
            {
                var stream = file.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                stream.Close();
                filesAsBase64 += String.Format("{0}<br/>", Convert.ToBase64String(memoryStream.ToArray()));
            }
        }
    }
}
