<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<DropFileInput> _localizer

<MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="InputFilesChanged" Hidden="false" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
InputStyle="opacity:0" tabindex="-1" @ondrop="ClearDragClass" @ondragenter="SetDragClass" @ondragleave="ClearDragClass" @ondragend="ClearDragClass"
Accept="@Filter">
    <ActivatorContent>
        <MudPaper Height="300px" Outlined Class="@dragClass">
            <MudStack AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Outlined.FileUpload" Style="font-size: 8rem;" />
                <MudText Typo="Typo.h4" Align="Align.Center">
                    @_localizer["Drag and drop files here or click to choose files"]
                </MudText>
            </MudStack>
        </MudPaper>
    </ActivatorContent>
</MudFileUpload>

@code {
    //TODO: localize
    [Parameter]
    public String? Filter { get; set; }

    const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    string dragClass = DefaultDragClass;

    void SetDragClass() => dragClass = $"{DefaultDragClass} mud-border-primary";

    void ClearDragClass() => dragClass = DefaultDragClass;

    [Parameter]
    public EventCallback<IReadOnlyList<IBrowserFile>> OnFilesSelected { get; set; }

    void InputFilesChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        OnFilesSelected.InvokeAsync(files);
    }
}
