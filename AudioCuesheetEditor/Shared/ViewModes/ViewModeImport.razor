<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject ILogger<ViewModeImport> _logger
@inject IStringLocalizer<ViewModeImport> _localizer
@inject ISessionStateContainer _sessionStateContainer
@inject ImportManager _importManager

<MudOverlay Visible="isAnalyzing" DarkBackground="true" ZIndex="3000">
    <div style="display:flex;flex-direction:column;justify-content:center;align-items:center;height:100vh;">
        <MudProgressCircular Size="Size.Large" Indeterminate />
        <MudText Typo="Typo.h6" Class="mt-4">@_localizer["Analysing file, please wait..."]</MudText>
    </div>
</MudOverlay>

<MudStepper @ref="mudStepper" NonLinear OnPreviewInteraction="PreviewInteraction" @bind-ActiveIndex="activeStepIndex">
    <MudStep Title="@_localizer["Select inputfiles"]" Completed="selectFilesStepCompleted" HasError="selectFilesStepError">
        <SelectImportFiles FilesImported="FilesImported" InvalidFilesChanged="InvalidFilesDropped" />
    </MudStep>
    <MudStep Title="@_localizer["Validate"]" Disabled="!selectFilesStepCompleted" CompletedChanged="CompleteImportAsync">
        <MudExpansionPanels MultiExpansion>
            <MudExpansionPanel @bind-Expanded="fileContentExpanded">
                <TitleContent>
                    <MudText Typo="Typo.h5">@_localizer["Filecontent"]</MudText>
                </TitleContent>
                <ChildContent>
                    <ImportFileContent FileContentChanged="ImportFileContent_FileContentChanged" />
                    <Importprofiles ImportprofileChanged="AnalyseImportfile" />
                    @if (_sessionStateContainer.Importfile?.AnalyseException != null)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                            @_localizer["Error during textimport"] : @_sessionStateContainer.Importfile.AnalyseException.Message
                        </MudAlert>
                    }
                </ChildContent>
            </MudExpansionPanel>
            <MudExpansionPanel @bind-Expanded="cuesheetDataExpanded">
                <TitleContent>
                    <MudText Typo="Typo.h5">@_localizer["Common data"]</MudText>
                </TitleContent>
                <ChildContent>
                    <CuesheetData />
                </ChildContent>
            </MudExpansionPanel>
            <MudExpansionPanel @bind-Expanded="cuesheetTracksExpanded">
                <TitleContent>
                    <MudText Typo="Typo.h5">@_localizer["Tracks"]</MudText>
                </TitleContent>
                <ChildContent>
                    <TrackList />
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudStep>
</MudStepper>

@code {
    MudStepper? mudStepper;
    int activeStepIndex;
    Boolean fileContentExpanded = false, cuesheetDataExpanded = false, cuesheetTracksExpanded = false;
    Boolean selectFilesStepCompleted = false, selectFilesStepError = false;
    long? renderBegin;
    bool isAnalyzing;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (_sessionStateContainer.Importfile?.FileType == ImportFileType.Textfile)
        {
            await FilesImported();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (renderBegin.HasValue)
        {
            var renderDuration = System.Diagnostics.Stopwatch.GetElapsedTime(renderBegin.Value);
            _logger.LogDebug("ViewModeImport render duration: {renderDuration}", renderDuration);
        }
        base.OnAfterRender(firstRender);
    }

    async Task ImportFileContent_FileContentChanged(string newFileContent)
    {
        _sessionStateContainer.Importfile!.FileContent = newFileContent;
        await AnalyseImportfile();
    }

    async Task AnalyseImportfile()
    {
        await Task.Delay(5000);
        await _importManager.AnalyseImportfile();
        renderBegin = System.Diagnostics.Stopwatch.GetTimestamp();
    }

    async Task FilesImported()
    {
        isAnalyzing = true;
        StateHasChanged();
        try
        {
            await AnalyseImportfile();
        }
        finally
        {
            isAnalyzing = false;
        }
        fileContentExpanded = true;
        cuesheetDataExpanded = true;
        cuesheetTracksExpanded = true;
        activeStepIndex = 1;
        selectFilesStepCompleted = true;
        selectFilesStepError = false;
        //TODO: Zeit anpassen?
        renderBegin = System.Diagnostics.Stopwatch.GetTimestamp();
    }

    async Task CompleteImportAsync()
    {
        _importManager.ImportCuesheet();
        await ResetAsync();
        // Don't await since otherwise the rendering will stop and this view will not be reset
        _ = LocalStorageOptionsProvider.SaveOptionsValueAsync<ViewOptions>(x => x.ActiveTab, ViewMode.DetailView);
    }

    Task PreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.StepIndex == 0)
        {
            arg.Cancel = (selectFilesStepCompleted == false) || (selectFilesStepError == true);
        }
        return Task.CompletedTask;
    }

    void InvalidFilesDropped(List<string> files)
    {
        selectFilesStepError = files.Any();
    }

    async Task ResetAsync()
    {
        activeStepIndex = 0;
        selectFilesStepCompleted = false; 
        selectFilesStepError = false;
        if (mudStepper != null)
        {
            await mudStepper.ResetAsync(true);
        }
    }
}
