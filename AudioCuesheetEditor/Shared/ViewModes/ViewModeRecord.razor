<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<ViewModeRecord> _localizer
@inject IJSRuntime _jsRuntime
@inject SessionStateContainer _sessionStateContainer

<MudStepper OnPreviewInteraction="PreviewInteraction" ActiveIndexChanged="ActiveIndexChangedAsync">
    <MudStep Title="@_localizer["Setup recording"]">
        <MudTextField T="string" Label="@_localizer["Recorded audiofilename"]" Placeholder="@_localizer["Enter the filename used for the recorded audiofile"]" Text="@ApplicationOptions?.RecordedAudiofilename" Variant="Variant.Outlined" />
    </MudStep>
    <MudStep Title="@_localizer["Record"]">
        <ControlRecording />
        <br />
        <AddTrack />
        <br/>
        <MudExpansionPanels MultiExpansion>
            <MudExpansionPanel @bind-Expanded="tracksExpanded">
                <TitleContent>
                    <MudText Typo="Typo.h5">@_localizer["Tracks"]</MudText>
                </TitleContent>
                <ChildContent>
                    <TrackList />
                </ChildContent>
            </MudExpansionPanel>
            <MudExpansionPanel @bind-Expanded="cuesheetDataExpanded">
                <TitleContent>
                    <MudText Typo="Typo.h5">@_localizer["Common data"]</MudText>
                </TitleContent>
                <ChildContent>
                    <CuesheetData />
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudStep>
</MudStepper>

@code {
    //TODO: edit recording filename -> save to options
    //TODO: disable next button when cuesheet has tracks (display also an error to the user)
    //TODO: Setup recording -> RecordTimeSensitivity? Or should we just use an option for viewing how timespans will be displayed?
    //TODO: Setup recording -> Reset button
    //TODO: Localization
    //TODO: maybe customize a bit more (background color, etc.)
    //TODO: We need to find a way to make recording mobile friendly (ControlRecording and Track input)
    //TODO: Bug: Having the viewmoderecord open the first time and pressing record doesn't enable inputs for the track
    Boolean cuesheetDataExpanded = false, tracksExpanded = true;

    [JSInvokable()]
    public Task AudioRecordingFinished(String objectUrl)
    {
        var fileName = Audiofile.RecordingFileName;
        if (ApplicationOptions != null)
        {
            fileName = ApplicationOptions.RecordedAudiofilename;
        }
        var audiofile = new Audiofile(fileName, objectUrl, Audiofile.AudioCodecWEBM, true);
        //TODO: is audiofile.LoadContentStream() needed?
        _sessionStateContainer.Cuesheet.Audiofile = audiofile;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _jsRuntime.InvokeVoidAsync("closeAudioRecording");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var dotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("GLOBAL.SetViewModeRecordReference", dotNetReference);
    }

    Task PreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.StepIndex == 0)
        {
            var validationResult = ApplicationOptions?.Validate(nameof(ApplicationOptions.RecordedAudiofilename));
            arg.Cancel = validationResult?.Status == ValidationStatus.Error;
        }
        return Task.CompletedTask;
    }

    async Task ActiveIndexChangedAsync(int newIndex)
    {
        if (newIndex == 1)
        {
            await _jsRuntime.InvokeVoidAsync("setupAudioRecording");
        }
    }
}
