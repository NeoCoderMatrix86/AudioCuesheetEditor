<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject ITextLocalizer<ModalDialog> _localizer
@inject HotKeys _hotKeys
@inject ITextLocalizerService _localizationService

<Modal @ref="modalRef" VisibleChanged="ModalRef_VisibleChanged">
    <ModalContent Centered="true" Size="@modalSize">
        <ModalHeader Class="@ModalHeaderStyle">
            <ModalTitle>
                @switch (Mode)
                {
                    case DialogMode.Confirm:
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z" />
                        </svg>
                        break;
                    case DialogMode.Alert:
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z" />
                        </svg>
                        break;
                }
                @Title
            </ModalTitle>
            <CloseButton Clicked="HideModal" />
        </ModalHeader>
        <ModalBody>
            @Text
        </ModalBody>
        <ModalFooter>
            @switch (Mode)
            {
                case DialogMode.Confirm:
                    <Button Color="Color.Primary" Clicked="Confirm">@_localizer["Confirm"]</Button>
                    <Button Color="Color.Secondary" Clicked="HideModal">@_localizer["Decline"]</Button>
                    break;
                case DialogMode.Alert:
                    <Button Color="Color.Danger" Clicked="Confirm">@_localizer["Ok"]</Button>
                    break;
            }
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    public void Dispose()
    {
        hotKeysContext?.Dispose();
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
    }

    protected override Task OnInitializedAsync()
    {
        hotKeysContext = _hotKeys.CreateContext()
            .Add(ModKey.Alt, Key.O, ConfirmedKeyDown)
            .Add(Key.Escape, HideKeyDown);

        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;

        return base.OnInitializedAsync();
    }

    public enum DialogMode
    {
        Confirm,
        Alert
    }

    Modal? modalRef;
    ModalSize modalSize = ModalSize.Default;
    DialogMode mode = DialogMode.Confirm;
    HotKeysContext? hotKeysContext;
    Boolean modalRefVisible = false;

    public String Title = default!;
    public String Text = default!;

    public event EventHandler Confirmed = default!;

    public async Task ShowModal()
    {
        if (modalRef != null)
        {
            await modalRef.Show();
        }
    }

    public async Task HideModal()
    {
        if (modalRef != null)
        {
            await modalRef.Hide();
        }
        //Reset all confirmed handlers
        Confirmed = default!;
    }

    public ModalSize ModalSize
    {
        get { return modalSize; }
        set { modalSize = value; }
    }

    public DialogMode Mode
    {
        get { return mode; }
        set { mode = value; }
    }

    public Boolean Visible
    {
        get => modalRefVisible;
    }

    public async Task Confirm()
    {
        OnConfirmed(new EventArgs());
        await HideModal();
    }

    protected virtual void OnConfirmed(EventArgs args)
    {
        if (Confirmed != null)
        {
            Confirmed(this, args);
        }
    }

    async ValueTask ConfirmedKeyDown()
    {
        await Confirm();
    }

    async ValueTask HideKeyDown()
    {
        await HideModal();
    }

    private String? ModalHeaderStyle
    {
        get
        {
            String? headerStyle = null;
            switch (Mode)
            {
                case DialogMode.Alert:
                    headerStyle = "alert-danger";
                    break;
                case DialogMode.Confirm:
                    break;
            }
            return headerStyle;
        }
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void ModalRef_VisibleChanged(Boolean visible)
    {
        modalRefVisible = visible;
    }
}