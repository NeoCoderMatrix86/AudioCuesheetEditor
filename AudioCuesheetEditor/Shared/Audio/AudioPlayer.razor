<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inherits BaseLocalizedComponent

@inject IStringLocalizer<AudioPlayer> _localizer
@inject PlaybackService _playbackService

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@_localizer["Playback"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Style="display: grid !important; grid-template-columns: auto 1fr auto; gap: 8px;">
            @if (_playbackService.CurrentPosition.HasValue)
            {
                <MudText>@_playbackService.CurrentPosition.Value.ToString("hh\\:mm\\:ss")</MudText>
            }
            else
            {
                <MudText>@String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)</MudText>
            }
            <MudSlider T="double" Variant="Variant.Filled" Min="0" Max="100" Disabled="!_playbackService.PlaybackPossible" Value="sliderValue" ValueChanged="OnSliderValueChanged" />
            @if (_playbackService.TotalTime.HasValue)
            {
                @_playbackService.TotalTime.Value.ToString("hh\\:mm\\:ss")
            }
            else
            {
                <MudText>@String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)</MudText>
            }
        </MudStack>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudIconButton Icon="@(_playbackService.IsPlaying ? Icons.Material.Outlined.Pause : Icons.Material.Outlined.PlayArrow)" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_playbackService.PlaybackPossible" OnClick="OnPlayOrPauseClicked" />
            <MudButtonGroup OverrideStyles="false">
                <MudIconButton Icon="@Icons.Material.Outlined.SkipPrevious" Variant="Variant.Filled" Color="Color.Tertiary" Disabled="!_playbackService.PreviousPossible" OnClick="() => _playbackService.PlayPreviousTrackAsync()" />
                <MudIconButton Icon="@Icons.Material.Outlined.Stop" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _playbackService.StopAsync()" Disabled="!_playbackService.PlaybackPossible" />
                <MudIconButton Icon="@Icons.Material.Outlined.SkipNext" Variant="Variant.Filled" Color="Color.Tertiary" Disabled="!_playbackService.NextPossible" OnClick="() => _playbackService.PlayNextTrackAsync()" />
            </MudButtonGroup>
        </MudStack>
    </MudCardContent>
</MudCard>

@code {
    //TODO
    //TODO: Tooltips für play, next, stop, etc.
    //TODO: Localization
    //TODO: Slider should display the value in tooltip (like vlc does)
    //TODO: Media Keyboard mapping

    double sliderValue;

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _playbackService.CurrentPositionChanged -= PlaybackService_CurrentPositionChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _playbackService.CurrentPositionChanged += PlaybackService_CurrentPositionChanged;
    }

    async Task OnPlayOrPauseClicked()
    {
        await _playbackService.PlayOrPauseAsync();
    }

    async Task OnSliderValueChanged(double newValue)
    {
        if (_playbackService.TotalTime.HasValue)
        {
            var newPosition = newValue * _playbackService.TotalTime.Value / 100.0;
            await _playbackService.SeekAsync(newPosition);
        }
    }

    void PlaybackService_CurrentPositionChanged()
    {
        if ((_playbackService.CurrentPosition.HasValue) && (_playbackService.TotalTime.HasValue))
        {
            sliderValue = (_playbackService.CurrentPosition.Value / _playbackService.TotalTime.Value) * 100.0;
        }
        else
        {
            sliderValue = 0.0;
        }
        InvokeAsync(StateHasChanged);
    }
}
