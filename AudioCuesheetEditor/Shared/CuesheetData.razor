<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject ITextLocalizer<CuesheetData> _localizer
@inject SessionStateContainer _sessionStateContainer
@inject IJSRuntime _jsRuntime
@inject ILogger<CuesheetData> _logger
@inject HttpClient _httpClient
@inject ITextLocalizerService _localizationService
@inject TraceChangeManager _traceChangeManager
@inject ITextLocalizer<ValidationMessage> _validationMessageLocalizer

@if (Cuesheet != null)
{
    <Validations>
        <Validation AsyncValidator="(args, token) => ValidatorUtility<Cuesheet>.Validate(args, Cuesheet, x => x.Artist, _validationMessageLocalizer, token)">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD artist"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                    <TextEdit Placeholder="@_localizer["Enter cd artist here"]" @bind-Text="Cuesheet.Artist" Immediate="false">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation AsyncValidator="(args, token) => ValidatorUtility<Cuesheet>.Validate(args, Cuesheet, x => x.Title, _validationMessageLocalizer, token)">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD title"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                    <TextEdit Placeholder="@_localizer["Enter cd title here"]" @bind-Text="Cuesheet.Title" Immediate="false">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        @switch (_sessionStateContainer.CurrentViewMode)
        {
            case ViewMode.ViewModeRecord:
                @if (Cuesheet.Audiofile != null)
                {
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Audiofile"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            <Addons>
                                @if (Cuesheet.Audiofile.IsRecorded)
                                {
                                    <Addon AddonType="AddonType.Start">
                                        <Button Color="Color.Primary" Type="ButtonType.Link" To="@Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@Cuesheet.Audiofile.FileName">@_localizer["Download recorded audio"]</Button>
                                    </Addon>
                                }
                                <Addon AddonType="AddonType.Body">
                                    <TextEdit Disabled="true" Text="@Cuesheet.Audiofile.FileName" />
                                </Addon>
                            </Addons>
                        </FieldBody>
                    </Field>
                }
                break;
            case ViewMode.ViewModeFull:
            case ViewMode.ViewModeImport:
                <Validation @ref="audiofileValidation" AsyncValidator="(args, token) => ValidatorUtility<Cuesheet>.Validate(args, Cuesheet, x => x.Audiofile, _validationMessageLocalizer, token)">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Audiofile"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            @if (Cuesheet.Audiofile == null)
                            {
                                <FileEdit id="@fileEditAudiofileId" Filter="@String.Join(",", Audiofile.AudioCodecs.Select(x => x.MimeType))" Changed="OnAudioFileChanged" AutoReset="false">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </FileEdit>
                            }
                            else
                            {
                                <Addons>
                                    @if (Cuesheet.Audiofile.IsRecorded)
                                    {
                                        <Addon AddonType="AddonType.Start">
                                            <Button Color="Color.Primary" Type="ButtonType.Link" To="@Cuesheet.Audiofile.ObjectURL" Target="Target.Blank" Download="@Cuesheet.Audiofile.FileName">@_localizer["Download recorded audio"]</Button>
                                        </Addon>
                                    }
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit Disabled="true" Text="@Cuesheet.Audiofile.FileName">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeAudioFileClicked">@_localizer["Change"]</Button>
                                    </Addon>
                                </Addons>
                            }
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation AsyncValidator="(args, token) => ValidatorUtility<Cuesheet>.Validate(args, Cuesheet, x => x.CDTextfile, _validationMessageLocalizer, token)">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["CD textfile"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            @if (Cuesheet.CDTextfile == null)
                            {
                                <FileEdit id="@fileEditCDTextFileId" accept="@CDTextfile.FileExtension" Changed="OnCDTextfileChanged">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </FileEdit>
                            }
                            else
                            {
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit Disabled="true" Text="@Cuesheet.CDTextfile.FileName" />
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Button Color="Color.Secondary" Outline="true" Clicked="OnChangeCDTextfileClicked">@_localizer["Change"]</Button>
                                    </Addon>
                                </Addons>
                            }
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation AsyncValidator="(args, token) => ValidatorUtility<Cataloguenumber>.Validate(args, Cuesheet.Cataloguenumber, x => x.Value, _validationMessageLocalizer, token)">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is4.OnTablet.Is5.OnMobile">@_localizer["Cataloguenumber"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10.OnFullHD.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">
                            <TextEdit Placeholder="@_localizer["Enter cataloguenumber here"]" @bind-Text="Cuesheet.Cataloguenumber.Value" Immediate="false">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                break;
        }
    </Validations>
}
<ModalDialog @ref="modalDialog" />

@code {
    ModalDialog? modalDialog;
    Guid fileEditCDTextFileId = Guid.NewGuid();
    Guid fileEditAudiofileId = Guid.NewGuid();
    Validation? audiofileValidation;

    public Cuesheet? Cuesheet
    {
        get
        {
            Cuesheet? cuesheet;
            switch (_sessionStateContainer.CurrentViewMode)
            {
                case ViewMode.ViewModeImport:
                    cuesheet = _sessionStateContainer.ImportCuesheet;
                    break;
                default:
                    cuesheet = _sessionStateContainer.Cuesheet;
                    break;
            }
            return cuesheet;
        }
    }

    public void Dispose()
    {
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged -= SessionStateContainer_CuesheetChanged;
        _sessionStateContainer.ImportCuesheetChanged -= SessionStateContainer_ImportCuesheetChanged;
        _traceChangeManager.UndoDone -= TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone -= TraceChangeManager_RedoDone;
    }

    protected override Task OnInitializedAsync()
    {
        _logger.LogDebug("OnInitializedAsync");

        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;

        _sessionStateContainer.CuesheetChanged += SessionStateContainer_CuesheetChanged;
        _sessionStateContainer.ImportCuesheetChanged += SessionStateContainer_ImportCuesheetChanged;
        _traceChangeManager.UndoDone += TraceChangeManager_UndoDone;
        _traceChangeManager.RedoDone += TraceChangeManager_RedoDone;

        return base.OnInitializedAsync();
    }

    private async Task OnChangeAudioFileClicked()
    {
        _logger.LogInformation("OnChangeAudioFileClicked");
        if (Cuesheet != null)
        {
            Cuesheet.Audiofile = null;
            StateHasChanged();
            await Task.Delay(1);
            await _jsRuntime.InvokeVoidAsync("triggerClick", fileEditAudiofileId);
        }
    }

    async Task OnAudioFileChanged(FileChangedEventArgs e)
    {
        _logger.LogInformation("OnAudioFileChanged with {0}", e);
        if (e.Files.FirstOrDefault() != null)
        {
            if (Cuesheet != null)
            {
                var file = e.Files.First();
                if (IOUtility.CheckFileMimeType(file, Audiofile.AudioCodecs) == true)
                {
                    await SetAudioFile(file);
                }
                else
                {
                    if (modalDialog != null)
                    {
                        modalDialog.Title = _localizer["Error"];
                        modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], file.Name, _localizer["Audiofile"]);
                        modalDialog.ModalSize = ModalSize.Small;
                        modalDialog.Mode = ModalDialog.DialogMode.Alert;
                        await modalDialog.ShowModal();
                    }
                }
            }
        }
        if (audiofileValidation != null)
        {
            await audiofileValidation.ValidateAsync();
        }
    }

    private async Task SetAudioFile(IFileEntry file)
    {
        _logger.LogInformation("SetAudioFile with {0}", file);
        if (Cuesheet != null)
        {
            if ((Cuesheet.Audiofile != null) && (Cuesheet.Audiofile.IsRecorded))
            {
                await _jsRuntime.InvokeVoidAsync("URL.revokeObjectURL", Cuesheet.Audiofile.ObjectURL);
            }
            if (file != null)
            {
                var audioFileObjectURL = await _jsRuntime.InvokeAsync<String>("getObjectURL", fileEditAudiofileId);
                var codec = Audiofile.AudioCodecs.Single(x => x.MimeType.Equals(file.Type, StringComparison.OrdinalIgnoreCase));
                Cuesheet.Audiofile = new Audiofile(file.Name, audioFileObjectURL, codec, _httpClient);
            }
            else
            {
                Cuesheet.Audiofile = null;
            }
        }
    }

    private async Task OnChangeCDTextfileClicked()
    {
        _logger.LogInformation("OnChangeCDTextfileClicked");
        if (Cuesheet != null)
        {
            Cuesheet.CDTextfile = null;
            StateHasChanged();
            await Task.Delay(1);
            await _jsRuntime.InvokeVoidAsync("triggerClick", fileEditCDTextFileId);
        }
    }

    async Task OnCDTextfileChanged(FileChangedEventArgs e)
    {
        _logger.LogInformation("OnCDTextfileChanged with {0}", e);
        if (e.Files.FirstOrDefault() != null)
        {
            if (Cuesheet != null)
            {
                var file = e.Files.First();
                if (IOUtility.CheckFileMimeType(file, CDTextfile.MimeType, CDTextfile.FileExtension) == true)
                {
                    Cuesheet.CDTextfile = new CDTextfile(file.Name);
                }
                else
                {
                    if (modalDialog != null)
                    {
                        modalDialog.Title = _localizer["Error"];
                        modalDialog.Text = String.Format(_localizer["The file {0} can not be used for operation: {1}. The file is invalid, please use a valid file!"], file.Name, _localizer["CD textfile"]);
                        modalDialog.ModalSize = ModalSize.Small;
                        modalDialog.Mode = ModalDialog.DialogMode.Alert;
                        await modalDialog.ShowModal();
                    }
                }
            }
        }
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void SessionStateContainer_CuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void SessionStateContainer_ImportCuesheetChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void TraceChangeManager_UndoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void TraceChangeManager_RedoDone(object? sender, EventArgs args)
    {
        StateHasChanged();
    }
}
