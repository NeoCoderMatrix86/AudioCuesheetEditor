<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@implements IDisposable

@inject ITextLocalizer<ProcessingHints> _localizer
@inject IJSRuntime _jsRuntime
@inject ITextLocalizerService _localizationService
@inject SessionStateContainer _sessionStateContainer

<CardBody>
    <Paragraph>@Header</Paragraph>
    <Accordion>
        @if (GetValidationErrors(ValidationErrorFilterType.WarningOnly).Count() > 0)
        {
            <Collapse Visible="processingHintsWarningVisible">
                <CollapseHeader>
                    <Button Clicked="(() => processingHintsWarningVisible = !processingHintsWarningVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Warnings"]</Heading></Button>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.WarningOnly))
                    {
                        if (ActivateLinksToFields == true)
                        {
                            var functionName = "focusElement";
                            <Blazorise.Link Style="cursor:pointer">
                                <Alert Color="Color.Warning" Visible="true">
                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                    {
                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(_localizer) : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@_localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                    }
                                </Alert>
                            </Blazorise.Link>
                        }
                        else
                        {
                            <Alert Color="Color.Warning" Visible="true">
                                @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                {
                                    <Paragraph>@entityDisplayName.GetDisplayNameLocalized(_localizer) : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                }
                                else
                                {
                                    <Paragraph>@_localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                }
                            </Alert>
                        }
                    }
                </CollapseBody>
            </Collapse>
        }
        @if (GetValidationErrors(ValidationErrorFilterType.ErrorOnly).Count() > 0)
        {
            <Collapse Visible="processingHintsErrorVisible">
                <CollapseHeader>
                    <Button Clicked="(() => processingHintsErrorVisible = !processingHintsErrorVisible)"><Heading Size="HeadingSize.Is3">@_localizer["Errors"]</Heading></Button>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.ErrorOnly))
                    {
                        if (ActivateLinksToFields == true)
                        {
                            var functionName = "focusElement";
                            <Blazorise.Link Style="cursor:pointer">
                                <Alert Color="Color.Danger" Visible="true">
                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                    {
                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(_localizer) : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@_localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                    }
                                </Alert>
                            </Blazorise.Link>
                        }
                        else
                        {
                            <Alert Color="Color.Danger" Visible="true">
                                @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                {
                                    <Paragraph>@entityDisplayName.GetDisplayNameLocalized(_localizer) : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                }
                                else
                                {
                                    <Paragraph>@_localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(validationMessageLocalizer)</Paragraph>
                                }
                            </Alert>
                        }
                    }
                </CollapseBody>
            </Collapse>
        }
    </Accordion>
</CardBody>

@code {
    [Parameter]
    public String Header { get; set; } = default!;

    [Parameter]
    public Boolean ActivateLinksToFields { get; set; }

    Boolean processingHintsWarningVisible = true;
    Boolean processingHintsErrorVisible = true;
    ITextLocalizer<ValidationMessage> validationMessageLocalizer = default!;

    public void Dispose()
    {
        _localizationService.LocalizationChanged -= LocalizationService_LocalizationChanged;
        _sessionStateContainer.CuesheetChanged -= SessionStateContainer_CuesheetChanged;
        ConnectOrDisconnectValidationRefresh(true);
    }

    protected override Task OnInitializedAsync()
    {
        _localizationService.LocalizationChanged += LocalizationService_LocalizationChanged;

        validationMessageLocalizer = new TextLocalizer<ValidationMessage>(_localizationService);
        //When cuesheet is changed, we need to call statehaschanged!
        _sessionStateContainer.CuesheetChanged += SessionStateContainer_CuesheetChanged;
        ConnectOrDisconnectValidationRefresh();

        return base.OnInitializedAsync();
    }

    private IReadOnlyCollection<AudioCuesheetEditor.Model.Entity.ValidationError> GetValidationErrors(ValidationErrorFilterType validationErrorFilterType)
    {
        List<AudioCuesheetEditor.Model.Entity.ValidationError> validationErrors = _sessionStateContainer.Cuesheet.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType).ToList();
        foreach (var track in _sessionStateContainer.Cuesheet.Tracks)
        {
            validationErrors.AddRange(track.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType));
        }
        return validationErrors.AsReadOnly();
    }

    private void ConnectOrDisconnectValidationRefresh(Boolean disconnect = false)
    {
        if (disconnect == true)
        {
            _sessionStateContainer.Cuesheet.ValidateablePropertyChanged -= Cuesheet_ValidateablePropertyChanged;
            foreach (var track in _sessionStateContainer.Cuesheet.Tracks)
            {
                track.ValidateablePropertyChanged -= Track_ValidateablePropertyChanged;
            }
            _sessionStateContainer.Cuesheet.TrackAdded -= Cuesheet_TrackAdded;
            _sessionStateContainer.Cuesheet.TrackRemoved -= Cuesheet_TrackRemoved;
        }
        else
        {
            //When a validatable property has been changed we need to call statehaschanged!
            _sessionStateContainer.Cuesheet.ValidateablePropertyChanged += Cuesheet_ValidateablePropertyChanged;
            foreach (var track in _sessionStateContainer.Cuesheet.Tracks)
            {
                track.ValidateablePropertyChanged += Track_ValidateablePropertyChanged;
            }
            _sessionStateContainer.Cuesheet.TrackAdded += Cuesheet_TrackAdded;
            _sessionStateContainer.Cuesheet.TrackRemoved += Cuesheet_TrackRemoved;
        }
    }

    private void SessionStateContainer_CuesheetChanged(object? sender, EventArgs args)
    {
        ConnectOrDisconnectValidationRefresh(true);
        ConnectOrDisconnectValidationRefresh();
        StateHasChanged();
    }

    private void LocalizationService_LocalizationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void Cuesheet_ValidateablePropertyChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void Track_ValidateablePropertyChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void Cuesheet_TrackAdded(object? sender, TrackAddRemoveEventArgs args)
    {
        args.Track.ValidateablePropertyChanged += Track_ValidateablePropertyChanged;
    }

    private void Cuesheet_TrackRemoved(object? sender, TrackAddRemoveEventArgs args)
    {
        args.Track.ValidateablePropertyChanged -= Track_ValidateablePropertyChanged;
    }
}
