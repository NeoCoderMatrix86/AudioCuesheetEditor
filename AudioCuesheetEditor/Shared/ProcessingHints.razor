<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->

@inject ITextLocalizer<ProcessingHints> localizer
@inject IJSRuntime JSRuntime
@inject CuesheetController cuesheetController
@inject ITextLocalizerService LocalizationService

<CardBody>
    <Paragraph>@Header</Paragraph>
    <Accordion>
        @if (GetValidationErrors(ValidationErrorFilterType.WarningOnly).Count() > 0)
        {
            <Collapse Visible="processingHintsWarningVisible">
                <CollapseHeader>
                    <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsWarningVisible, ref chevronProcessingHintsWarning))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                        <Heading Size="HeadingSize.Is3">@localizer["Warnings"]</Heading>
                        <div>
                            @((MarkupString)chevronProcessingHintsWarning)
                        </div>
                    </Blazorise.Link>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.WarningOnly))
                    {
                        if (ActivateLinksToFields == true)
                        {
                            var functionName = "focusElement";
                            <Blazorise.Link Clicked="(() => JSRuntime.InvokeVoidAsync(functionName, cuesheetController.GetFieldIdentifier(validationError.FieldReference)))" Style="cursor:pointer">
                                <Alert Color="Color.Warning" Visible="true">
                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                    {
                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                    }
                                </Alert>
                            </Blazorise.Link>
                        }
                        else
                        {
                            <Alert Color="Color.Warning" Visible="true">
                                @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                {
                                    <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                }
                                else
                                {
                                    <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                }
                            </Alert>
                        }
                    }
                </CollapseBody>
            </Collapse>
        }
        @if (GetValidationErrors(ValidationErrorFilterType.ErrorOnly).Count() > 0)
        {
            <Collapse Visible="processingHintsErrorVisible">
                <CollapseHeader>
                    <Blazorise.Link Clicked="(() => HeaderClicked(ref processingHintsErrorVisible, ref chevronProcessingHintsError))" Style="justify-content: space-between;display: flex;-webkit-box-pack:justify;">
                        <Heading Size="HeadingSize.Is3">@localizer["Errors"]</Heading>
                        <div>
                            @((MarkupString)chevronProcessingHintsError)
                        </div>
                    </Blazorise.Link>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var validationError in GetValidationErrors(ValidationErrorFilterType.ErrorOnly))
                    {
                        if (ActivateLinksToFields == true)
                        {
                            var functionName = "focusElement";
                            <Blazorise.Link Clicked="(() => JSRuntime.InvokeVoidAsync(functionName, cuesheetController.GetFieldIdentifier(validationError.FieldReference)))" Style="cursor:pointer">
                                <Alert Color="Color.Danger" Visible="true">
                                    @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                    {
                                        <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                    }
                                    else
                                    {
                                        <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                    }
                                </Alert>
                            </Blazorise.Link>
                        }
                        else
                        {
                            <Alert Color="Color.Danger" Visible="true">
                                @if (validationError.FieldReference.Owner is IEntityDisplayName entityDisplayName)
                                {
                                    <Paragraph>@entityDisplayName.GetDisplayNameLocalized(localizer) : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                }
                                else
                                {
                                    <Paragraph>@localizer[validationError.FieldReference.Owner.GetType().Name] : @validationError.Message.GetMessageLocalized(ValidationMessageLocalizer)</Paragraph>
                                }
                            </Alert>
                        }
                    }
                </CollapseBody>
            </Collapse>
        }
    </Accordion>
</CardBody>

@code {
    [Parameter]
    public Cuesheet Cuesheet { get; set; }

    [Parameter]
    public String Header { get; set; }

    [Parameter]
    public Boolean ActivateLinksToFields { get; set; }

    [Parameter]
    public ITextLocalizer<ValidationMessage> ValidationMessageLocalizer { get; set; }

    protected override Task OnInitializedAsync()
    {
        LocalizationService.LocalizationChanged += delegate
        {
            StateHasChanged();
        };
        return base.OnInitializedAsync();
    }

    private Boolean processingHintsWarningVisible = true;
    private Boolean processingHintsErrorVisible = true;

    private String chevronProcessingHintsWarning = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
    private String chevronProcessingHintsError = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";

    private void HeaderClicked(ref Boolean visible, ref String chevron)
    {
        visible = !visible;
        SwitchChevron(visible, ref chevron);
    }

    private void SwitchChevron(Boolean chevronUp, ref String chevron)
    {
        if (chevronUp == true)
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/></svg>";
        }
        else
        {
            chevron = "<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\" /></svg>";
        }
    }

    private IReadOnlyCollection<AudioCuesheetEditor.Model.Entity.ValidationError> GetValidationErrors(ValidationErrorFilterType validationErrorFilterType)
    {
        List<AudioCuesheetEditor.Model.Entity.ValidationError> validationErrors = Cuesheet.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType).ToList();
        foreach (var track in Cuesheet.Tracks)
        {
            validationErrors.AddRange(track.GetValidationErrorsFiltered(validationErrorFilterType: validationErrorFilterType));
        }
        return validationErrors.AsReadOnly();
    }
}
