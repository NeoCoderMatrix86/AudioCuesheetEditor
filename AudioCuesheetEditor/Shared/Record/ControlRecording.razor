<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<ControlRecording> _localizer
@inject IJSRuntime _jsRuntime

<MudCard Outlined>
    <MudCardContent>
        <MudStack Row AlignItems="AlignItems.Baseline" Justify="Justify.SpaceBetween">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton StartIcon="@Icons.Material.Outlined.Mic" Disabled="StartRecordingDisabled" OnClick="StartRecordingAsync">@_localizer["Start recording"]</MudButton>
                <MudMenu Icon="@Icons.Material.Outlined.ArrowRight" Disabled="StartRecordingDisabled" AnchorOrigin="Origin.TopRight">
                    <MudMenuItem Disabled="StartRecordingDisabled">@_localizer["Enter countdown timer"]</MudMenuItem>
                </MudMenu>
            </MudButtonGroup>
            @if (Cuesheet?.RecordingTime.HasValue == true)
            {
                <MudText Typo="Typo.h5">@Cuesheet.RecordingTime.Value.Subtract(new TimeSpan(0, 0, 0, 0, Cuesheet.RecordingTime.Value.Milliseconds))</MudText>
            }
            else
            {
                <MudText Typo="Typo.h5">@String.Format("--{0}--{1}--", CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator, CultureInfo.CurrentCulture.DateTimeFormat.TimeSeparator)</MudText>
            }
            <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Stop" Disabled="Cuesheet?.IsRecording == false" OnClick="StopRecordingAsync">@_localizer["Stop recording"]</MudButton>
        </MudStack>
    </MudCardContent>
</MudCard>

@code {
    //TODO: localization
    //TODO: Countdown timer dialog and events
    Timer updateGUITimer = new(500);

    [CascadingParameter]
    public Cuesheet? Cuesheet { get; set; }

    public Boolean StartRecordingDisabled => Cuesheet?.IsRecording == true || Cuesheet?.Tracks.Count > 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        updateGUITimer.AutoReset = true;
        updateGUITimer.Elapsed += delegate
        {
            StateHasChanged();
            Boolean startRecordTimeEnabled = false;
            //TODO
            // if (startRecordTimer != null)
            // {
            //     startRecordTimeEnabled = startRecordTimer.Enabled;
            // }
            if ((startRecordTimeEnabled == false) && (Cuesheet?.IsRecording == false))
            {
                updateGUITimer.Stop();
            }
        };
    }

    async Task StartRecordingAsync()
    {
        Cuesheet?.StartRecording();
        updateGUITimer.Start();
        await _jsRuntime.InvokeVoidAsync("startAudioRecording");
        Cuesheet!.Audiofile = null;
    }

    async Task StopRecordingAsync() 
    {
        Cuesheet?.StopRecording();
        await _jsRuntime.InvokeVoidAsync("stopAudioRecording");
    }
}
