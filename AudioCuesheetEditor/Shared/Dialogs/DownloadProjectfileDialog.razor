<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<DownloadProjectfileDialog> _localizer
@inject ISessionStateContainer _sessionStateContainer
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject ValidationService _validationService

<MudDialog>
    <DialogContent>
        <MudTextField T="string" Label="@_localizer["Filename"]" Variant="Variant.Outlined" Text="@ApplicationOptions?.ProjectFilename" TextChanged="FilenameChanged" 
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage()) == false" ErrorText="@GetValidationErrorMessage()" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="DownloadProjectClick" Disabled="String.IsNullOrEmpty(GetValidationErrorMessage()) == false">@_localizer["Download project"]</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="(args) => MudDialog?.Cancel()">@_localizer["Cancel"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    async Task DownloadProjectClick() 
    {
        MudDialog?.Close();
        var projectFile = new Projectfile(_sessionStateContainer.Cuesheet);
        var fileData = projectFile.GenerateFile();
        await _blazorDownloadFileService.DownloadFile(ApplicationOptions?.ProjectFilename, fileData, "text/plain");
    }

    async Task FilenameChanged(string newFilename)
    {
        await LocalStorageOptionsProvider.SaveOptionsValue<ApplicationOptions>(x => x.ProjectFilename, newFilename);
    }

    String? GetValidationErrorMessage()
    {
        String? validationErrorMessage = null;
        if (ApplicationOptions != null)
        {
            var validationMessages = _validationService.Validate(ApplicationOptions, nameof(ApplicationOptions.ProjectFilename));
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }
}
