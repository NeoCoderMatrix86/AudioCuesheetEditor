<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<StartRecordCountdownDialog> _localizer
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

@if (ApplicationOptions != null)
{
    <MudDialog>
        <TitleContent>
            @_localizer["Start record countdown timer"]
        </TitleContent>
        <DialogContent>
            <MudNumericField T="uint?" Placeholder="@_localizer["Seconds till record starts"]" Label="@_localizer["Record countdown in sconds"]" Variant="Variant.Outlined" 
                             Value="options?.RecordCountdownTimer" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveOptionsValueAsync<RecordOptions>(x => x.RecordCountdownTimer, newValue)" />
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Timer" OnClick="() => MudDialog?.Close(DialogResult.Ok(options?.RecordCountdownTimer))">@_localizer["Start countdown"]</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => MudDialog?.Cancel()">@_localizer["Abort"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    RecordOptions? options;

    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        options = await _localStorageOptionsProvider.GetOptionsAsync<RecordOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is RecordOptions recordOptions)
        {
            options = recordOptions;
            StateHasChanged();
        }
    }
}
