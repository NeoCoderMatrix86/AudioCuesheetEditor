<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<EditMultipleTracksModal> _localizer
@inject ApplicationOptionsTimeSpanParser _applicationOptionsTimeSpanParser
@inject MusicBrainzDataProvider _musicBrainzDataProvider
@inject ValidationService _validationService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@_localizer["Edit tracks"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="EditedTrack">
            <MudGrid Class="align-baseline">
                <MudItem xs="2"><MudText>@_localizer["Change"]</MudText></MudItem>
                <MudItem xs="7"><MudText>@_localizer["Value"]</MudText></MudItem>
                <MudItem xs="3"><MudText>@_localizer["Calculate"]</MudText></MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackIsLinkedToPreviousTrack" Color="Color.Primary" /></MudItem>
                <MudItem xs="7"><MudSwitch @bind-Value="EditedTrack.IsLinkedToPreviousTrack" Label="@_localizer["Link to previous track"]" Color="Color.Primary" Disabled="!editTrackIsLinkedToPreviousTrack" /></MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackPosition" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField @bind-Value="EditedTrack.Position" Label="@_localizer["Position"]" Variant="Variant.Outlined" Disabled="!editTrackPosition" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackPosition, EditedTrack, nameof(Track.Position)))"
                    ErrorText="@GetValidationErrorMessage(editTrackPosition, EditedTrack, nameof(Track.Position))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackPosition" Disabled="!editTrackPosition">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackArtist" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudAutocomplete T="MusicBrainzArtist" Label="@_localizer["Artist"]" Variant="Variant.Outlined" SearchFunc="SearchArtist" ToStringFunc="(value) => value.Name"
                                     Text="@EditedTrack.Artist" ValueChanged="(value) => EditedTrack.Artist = value?.Name" ResetValueOnEmptyText Clearable
                                     SelectValueOnTab ShowProgressIndicator Disabled="!editTrackArtist" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackArtist, EditedTrack, nameof(Track.Artist)))"
                                     ErrorText="@GetValidationErrorMessage(editTrackArtist, EditedTrack, nameof(Track.Artist))">
                        <ItemTemplate Context="autocompleteContext">
                            @if (autocompleteContext.Disambiguation != null)
                            {
                                <MudText>@String.Format("{0} ({1})", autocompleteContext.Name, autocompleteContext.Disambiguation)</MudText>
                            }
                            else
                            {
                                <MudText>@autocompleteContext.Name</MudText>
                            }
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackTitle" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudAutocomplete T="MusicBrainzTrack" Label="@_localizer["Title"]" Variant="Variant.Outlined" SearchFunc="SearchTitle" ToStringFunc="(value) => value.Title"
                                     Value="new() { Artist = EditedTrack.Artist, Title = EditedTrack.Title }" ValueChanged="(value) => EditedTrack.Title = value?.Title" ResetValueOnEmptyText Clearable
                                     SelectValueOnTab ShowProgressIndicator Disabled="!editTrackTitle" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackTitle, EditedTrack, nameof(Track.Title)))"
                                     ErrorText="@GetValidationErrorMessage(editTrackTitle, EditedTrack, nameof(Track.Title))">
                        <ItemTemplate Context="autocompleteContext">
                            @if (autocompleteContext.Disambiguation != null)
                            {
                                <MudText>@String.Format("{0} ({1})", autocompleteContext.Title, autocompleteContext.Disambiguation)</MudText>
                            }
                            else
                            {
                                <MudText>@autocompleteContext.Title</MudText>
                            }
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackBegin" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField Label="@_localizer["Begin"]" Variant="Variant.Outlined" Value="@EditedTrack.Begin.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(EditedTrack, x => x.Begin, value)"
                                  Disabled="!editTrackBegin" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackBegin, EditedTrack, nameof(Track.Begin)))"
                                  ErrorText="@GetValidationErrorMessage(editTrackBegin, EditedTrack, nameof(Track.Begin))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackBegin" Disabled="!editTrackBegin">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackEnd" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField Label="@_localizer["End"]" Variant="Variant.Outlined" Value="@EditedTrack.End.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(EditedTrack, x => x.End, value)" 
                                  Disabled="!editTrackEnd" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackEnd, EditedTrack, nameof(Track.End)))"
                                  ErrorText="@GetValidationErrorMessage(editTrackEnd, EditedTrack, nameof(Track.End))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackEnd" Disabled="!editTrackEnd">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackLength" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField Label="@_localizer["Length"]" Variant="Variant.Outlined" Value="@EditedTrack.Length.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(EditedTrack, x => x.Length, value)" 
                                  Disabled="!editTrackLength" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackLength, EditedTrack, nameof(Track.Length)))"
                                  ErrorText="@GetValidationErrorMessage(editTrackLength, EditedTrack, nameof(Track.Length))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackLength" Disabled="!editTrackLength">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackFlags" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudField Label="@_localizer["Flags"]" Variant="Variant.Outlined">
                        <MudChipSet T="Flag" SelectedValues="EditedTrack.Flags.ToList().AsReadOnly()" SelectedValuesChanged="(newFlags) => EditedTrack.Flags = newFlags" CheckMark SelectionMode="SelectionMode.MultiSelection" Variant="Variant.Text" Color="Color.Info" Disabled="!editTrackFlags">
                            @foreach (var flag in Flag.AvailableFlags)
                            {
                                <MudChip Value="flag">@flag.Name</MudChip>
                            }
                        </MudChipSet>
                    </MudField>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackPregap" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField Label="@_localizer["PreGap"]" Variant="Variant.Outlined" Value="@EditedTrack.PreGap.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(EditedTrack, x => x.PreGap, value)" 
                                  Disabled="!editTrackPregap" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackPregap, EditedTrack, nameof(Track.PreGap)))"
                                  ErrorText="@GetValidationErrorMessage(editTrackPregap, EditedTrack, nameof(Track.PreGap))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackPregap" Disabled="!editTrackPregap">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudFlexBreak />
                <MudItem xs="2"><MudSwitch @bind-Value="editTrackPostgap" Color="Color.Primary" /></MudItem>
                <MudItem xs="7">
                    <MudTextField Label="@_localizer["PostGap"]" Variant="Variant.Outlined" Value="@EditedTrack.PostGap.ToString()" ValueChanged="(string value) => _applicationOptionsTimeSpanParser.TimespanTextChanged<Track, TimeSpan?>(EditedTrack, x => x.PostGap, value)" 
                                  Disabled="!editTrackPostgap" Error="!String.IsNullOrEmpty(GetValidationErrorMessage(editTrackPostgap, EditedTrack, nameof(Track.PostGap)))"
                                  ErrorText="@GetValidationErrorMessage(editTrackPostgap, EditedTrack, nameof(Track.PostGap))" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="editModeTrackPostgap" Disabled="!editTrackPostgap">
                        <MudSelectItem Value="DynamicEditValue.EnteredValueEquals">=</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueAdd">+</MudSelectItem>
                        <MudSelectItem Value="DynamicEditValue.EnteredValueSubstract">-</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="SaveClick">@_localizer["Save changes"]</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="(args) => MudDialog?.Cancel()">@_localizer["Abort"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter]
    [EditorRequired]
    public Track EditedTrack { get; set; } = null!;

    Boolean editTrackIsLinkedToPreviousTrack, editTrackPosition, editTrackArtist, editTrackTitle, editTrackBegin, editTrackEnd, editTrackLength, editTrackFlags, editTrackPregap, editTrackPostgap;
    DynamicEditValue editModeTrackPosition, editModeTrackBegin, editModeTrackEnd, editModeTrackLength, editModeTrackPregap, editModeTrackPostgap;

    async Task<IEnumerable<MusicBrainzArtist>?> SearchArtist(string? value, CancellationToken token)
    {
        IEnumerable<MusicBrainzArtist>? artists = null;
        if (!token.IsCancellationRequested)
        {
            artists = await _musicBrainzDataProvider.SearchArtistAsync(value, token);
            // Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (artists.Count(x => x.Name == value) == 0))
            {
                artists = artists.Prepend(new() { Name = value });
            }
        }
        return artists;
    }

    async Task<IEnumerable<MusicBrainzTrack>?> SearchTitle(string? value, CancellationToken token)
    {
        IEnumerable<MusicBrainzTrack>? tracks = null;
        if (!token.IsCancellationRequested)
        {
            tracks = await _musicBrainzDataProvider.SearchTitleAsync(value, EditedTrack.Artist, token);
            //Add an element that is exactly the entered value, as otherwise the user can not enter a value, that is not available on musicbrainz
            if ((String.IsNullOrEmpty(value) == false) && (tracks.Count(x => x.Title == value) == 0))
            {
                tracks = tracks.Prepend(new() { Artist = EditedTrack.Artist, Title = value });
            }
        }
        return tracks;
    }

    void SaveClick()
    {
        var result = new EditMultipleTracksModalResult(EditedTrack, editTrackIsLinkedToPreviousTrack, editTrackPosition, editTrackArtist, editTrackTitle, editTrackBegin, 
            editTrackEnd, editTrackLength, editTrackFlags, editTrackPregap, editTrackPostgap, editModeTrackPosition, editModeTrackBegin, editModeTrackEnd, editModeTrackLength, 
            editModeTrackPregap, editModeTrackPostgap);
        MudDialog?.Close(DialogResult.Ok(result));
    }

    String? GetValidationErrorMessage(Boolean changeActive, object model, string propertyName)
    {
        String? validationErrorMessage = null;
        if (changeActive)
        {
            var validationMessages = _validationService.Validate(model, propertyName);
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }
}
