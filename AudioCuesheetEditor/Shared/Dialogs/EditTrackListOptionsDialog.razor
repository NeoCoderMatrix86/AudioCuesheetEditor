<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<EditTrackListOptionsDialog> _localizer
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@_localizer["Track list options"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudSwitch T="Boolean?" Value="trackListOptions?.LinkTracks" ValueChanged="SaveLinkTracksAsync" Label="@_localizer["Automatically link tracks"]" Color="Color.Primary" />
    </DialogContent>
</MudDialog>

@code {
    //TODO: timespan format
    //TODO: localization

    TrackListOptions? trackListOptions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        trackListOptions = await _localStorageOptionsProvider.GetOptions<TrackListOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
        }
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions options)
    {
        if (options is TrackListOptions newTrackListOptions)
        {
            trackListOptions = newTrackListOptions;
        }
    }

    async Task SaveLinkTracksAsync(Boolean? newValue)
    {
        if (newValue.HasValue)
        {
            await _localStorageOptionsProvider.SaveOptionsValue<TrackListOptions>(x => x.LinkTracks, newValue.Value);
        }
    }
}
