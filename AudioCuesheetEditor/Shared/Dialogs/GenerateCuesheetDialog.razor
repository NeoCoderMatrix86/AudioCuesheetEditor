<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<GenerateCuesheetDialog> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject ValidationService _validationService
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject CuesheetExportService _cuesheetExportService
@inject ILocalStorageOptionsProvider _localStorageOptionsProvider

<MudDialog>
    <DialogContent>
        @if (String.IsNullOrEmpty(GetGenerationValidationMessages()) == false)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                @_localizer["Export is currently not possible:"]
                @((MarkupString)GetGenerationValidationMessages()!)
            </MudAlert>
        }
        <MudTextField T="string" Label="@_localizer["Filename"]" Variant="Variant.Outlined" Text="@options?.CuesheetFilename" TextChanged="CuesheetFilenameChanged"
                      Error="String.IsNullOrEmpty(GetValidationErrorMessage()) == false" ErrorText="@GetValidationErrorMessage()" />
        <br />
        <MudTable Items="exportfiles">
            <HeaderContent>
                <MudTh>@_localizer["Name"]</MudTh>
                <MudTh>@_localizer["Begin"]</MudTh>
                <MudTh>@_localizer["End"]</MudTh>
                <MudTh>@_localizer["Content"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@_localizer["Name"]">@context.Name</MudTd>
                <MudTd DataLabel="@_localizer["Begin"]">@context.Begin</MudTd>
                <MudTd DataLabel="@_localizer["End"]">@context.End</MudTd>
                <MudTd DataLabel="@_localizer["Content"]"><MudIconButton Color="Color.Success" Variant="Variant.Outlined" Icon="@Icons.Material.Outlined.FileDownload" OnClick='() => _blazorDownloadFileService.DownloadFile(context.Name, context.Content, "text/plain")' /></MudTd>
            </RowTemplate>
        </MudTable>
        <br />
    </DialogContent>
</MudDialog>

@code {
    IEnumerable<Exportfile> exportfiles = [];
    DownloadOptions? options;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        options = await _localStorageOptionsProvider.GetOptionsAsync<DownloadOptions>();
        _localStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
        exportfiles = _cuesheetExportService.GenerateExportfiles(options?.CuesheetFilename);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _localStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
    }

    String? GetValidationErrorMessage()
    {
        String? validationErrorMessage = null;
        if (options != null)
        {
            var validationMessages = _validationService.Validate(options, nameof(DownloadOptions.CuesheetFilename));
            if (validationMessages.Count() > 0)
            {
                validationErrorMessage = String.Join(Environment.NewLine, validationMessages);
            }
        }
        return validationErrorMessage;
    }

    String? GetGenerationValidationMessages()
    {
        String? validationErrorMessage = null;
        var messages = _cuesheetExportService.CanGenerateExportfiles(options?.CuesheetFilename);
        if (messages.Count() > 0)
        {
            validationErrorMessage = String.Join("<br />", messages.Select(x => x.GetMessageLocalized(_validationMessageLocalizer)));
        }
        return validationErrorMessage;
    }

    async Task CuesheetFilenameChanged(string newFilename)
    {
        await LocalStorageOptionsProvider.SaveOptionsValueAsync<DownloadOptions>(x => x.CuesheetFilename, newFilename);
        exportfiles = _cuesheetExportService.GenerateExportfiles(options?.CuesheetFilename);
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is DownloadOptions downloadOptions)
        {
            options = downloadOptions;
            StateHasChanged();
        }
    }
}
