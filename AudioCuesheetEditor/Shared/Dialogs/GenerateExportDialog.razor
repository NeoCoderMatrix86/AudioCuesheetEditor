<!--
This file is part of AudioCuesheetEditor.

AudioCuesheetEditor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AudioCuesheetEditor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see
<http: //www.gnu.org/licenses />.
-->
@inherits BaseLocalizedComponent

@inject IStringLocalizer<GenerateExportDialog> _localizer
@inject IStringLocalizer<ValidationMessage> _validationMessageLocalizer
@inject ValidationService _validationService
@inject ExportfileGenerator _exportfileGenerator
@inject IBlazorDownloadFileService _blazorDownloadFileService

@if (exportOptions != null)
{
    <MudDialog>
        <DialogContent>
            <MudStepper NonLinear OnPreviewInteraction="PreviewInteraction" ActiveIndexChanged="ActiveIndexChanged">
                <MudStep Title="@_localizer["Configure export"]" HasError="String.IsNullOrEmpty(GetGenerationValidationMessages()) == false" Completed="configureExportCompleted">
                    @if (String.IsNullOrEmpty(GetGenerationValidationMessages()) == false)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                            @_localizer["Export is currently not possible:"]
                            @((MarkupString)GetGenerationValidationMessages()!)
                        </MudAlert>
                    }
                    <MudSelect T="Exportprofile" Variant="Variant.Outlined" Label="@_localizer["Select export profile"]" Value="exportOptions.SelectedExportProfile" ValueChanged="(newSelectedProfile) => LocalStorageOptionsProvider.SaveOptionsValueAsync<ExportOptions>(x => x.SelectedExportProfile, newSelectedProfile)">
                        @foreach (var profile in exportOptions.ExportProfiles)
                        {
                            <MudSelectItem Value="profile">@profile.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButtonGroup OverrideStyles="false">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddClick">@_localizer["Add new export profile"]</MudButton>
                        <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="exportOptions.SelectedExportProfile == null" OnClick="DeleteClick">@_localizer["Delete selected export profile"]</MudButton>
                    </MudButtonGroup>
                    <br />
                    <MudDivider />
                    <MudTextField T="string" Value="exportOptions.SelectedExportProfile?.Name" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ExportOptions, Exportprofile?, String>(x => x.SelectedExportProfile, x => x!.Name, newValue)"
                                  Label="@_localizer["Name"]" Placeholder="@_localizer["Enter the name for this profile here"]" Variant="Variant.Outlined"
                                  Validation="(string? newValue) => _validationService.Validate(exportOptions.SelectedExportProfile, nameof(Exportprofile.Name))" />
                    <MudTextField T="string" Value="exportOptions.SelectedExportProfile?.Filename" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ExportOptions, Exportprofile?, String>(x => x.SelectedExportProfile, x => x!.Filename, newValue)" 
                                  Label="@_localizer["Filename"]" Placeholder="@_localizer["Enter the filename for this profile here"]" Variant="Variant.Outlined"
                                  Validation="(string? newValue) => _validationService.Validate(exportOptions.SelectedExportProfile, nameof(Exportprofile.Filename))" />
                    <MudTextField T="string" Value="exportOptions.SelectedExportProfile?.SchemeHead" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ExportOptions, Exportprofile?, String>(x => x.SelectedExportProfile, x => x!.SchemeHead, newValue)" 
                                  Label="@_localizer["Scheme head"]" Placeholder="@_localizer["Enter the header scheme for this profile here"]" Variant="Variant.Outlined" Clearable
                                  Validation="(string? newValue) => _validationService.Validate(exportOptions.SelectedExportProfile, nameof(Exportprofile.SchemeHead))"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.AddBox" OnAdornmentClick="(args) => AdornmentClickAsync(schemeHeadMenu, args)" />
                    <MudMenu @ref="schemeHeadMenu" PositionAtCursor>
                        @foreach (var placeholder in Exportprofile.AvailableCuesheetSchemes)
                        {
                            <MudMenuItem OnClick="() => 
                            {
                                if (exportOptions.SelectedExportProfile != null)
                                {
                                    exportOptions.SelectedExportProfile.SchemeHead += placeholder.Value;
                                }
                            }">
                                @_localizer[placeholder.Key]
                            </MudMenuItem>
                        }
                    </MudMenu>
                    <MudTextField T="string" Value="exportOptions.SelectedExportProfile?.SchemeTracks" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ExportOptions, Exportprofile?, String>(x => x.SelectedExportProfile, x => x!.SchemeTracks, newValue)" 
                                  Label="@_localizer["Scheme tracks"]" Placeholder="@_localizer["Enter the tracks scheme for this profile here"]" Variant="Variant.Outlined" Clearable
                                  Validation="(string? newValue) => _validationService.Validate(exportOptions.SelectedExportProfile, nameof(Exportprofile.SchemeTracks))"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.AddBox" OnAdornmentClick="(args) => AdornmentClickAsync(schemeTracksMenu, args)" />
                    <MudMenu @ref="schemeTracksMenu" PositionAtCursor>
                        @foreach (var placeholder in Exportprofile.AvailableTrackSchemes)
                        {
                            <MudMenuItem OnClick="() =>
                            {
                                if (exportOptions.SelectedExportProfile != null)
                                {
                                    exportOptions.SelectedExportProfile.SchemeTracks += placeholder.Value;
                                }
                            }">
                                @_localizer[placeholder.Key]
                            </MudMenuItem>
                        }
                    </MudMenu>
                    <MudTextField T="string" Value="exportOptions.SelectedExportProfile?.SchemeFooter" ValueChanged="(newValue) => LocalStorageOptionsProvider.SaveNestedOptionValueAsync<ExportOptions, Exportprofile?, String>(x => x.SelectedExportProfile, x => x!.SchemeFooter, newValue)" 
                                  Label="@_localizer["Scheme footer"]" Placeholder="@_localizer["Enter the footer scheme for this profile here"]" Variant="Variant.Outlined" Clearable
                                  Validation="(string? newValue) => _validationService.Validate(exportOptions.SelectedExportProfile, nameof(Exportprofile.SchemeFooter))"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.AddBox" OnAdornmentClick="(args) => AdornmentClickAsync(schemeFooterMenu, args)" />
                    <MudMenu @ref="schemeFooterMenu" PositionAtCursor>
                        @foreach (var placeholder in Exportprofile.AvailableCuesheetSchemes)
                        {
                            <MudMenuItem OnClick="() =>
                            {
                                if (exportOptions.SelectedExportProfile != null)
                                {
                                    exportOptions.SelectedExportProfile.SchemeFooter += placeholder.Value;
                                }
                            }">
                                @_localizer[placeholder.Key]
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudStep>
                <MudStep Title="@_localizer["Download export"]" Disabled="String.IsNullOrEmpty(GetGenerationValidationMessages()) == false">
                    <MudTable Items="exportFiles">
                        <HeaderContent>
                            <MudTh>@_localizer["Name"]</MudTh>
                            <MudTh>@_localizer["Begin"]</MudTh>
                            <MudTh>@_localizer["End"]</MudTh>
                            <MudTh>@_localizer["Content"]</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="@_localizer["Name"]">@context.Name</MudTd>
                            <MudTd DataLabel="@_localizer["Begin"]">@context.Begin</MudTd>
                            <MudTd DataLabel="@_localizer["End"]">@context.End</MudTd>
                            <MudTd DataLabel="@_localizer["Content"]"><MudIconButton Color="Color.Success" Variant="Variant.Outlined" Icon="@Icons.Material.Outlined.FileDownload" OnClick='() => _blazorDownloadFileService.DownloadFile(context.Name, context.Content, "text/plain")' /></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStep>
            </MudStepper>
        </DialogContent>
    </MudDialog>
}

@code {
    ExportOptions? exportOptions;
    IEnumerable<Exportfile> exportFiles = [];
    Boolean configureExportCompleted = false;
    MudMenu? schemeHeadMenu, schemeTracksMenu, schemeFooterMenu;

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        LocalStorageOptionsProvider.OptionSaved -= LocalStorageOptionsProvider_OptionSaved;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LocalStorageOptionsProvider.OptionSaved += LocalStorageOptionsProvider_OptionSaved;
        exportOptions = await LocalStorageOptionsProvider.GetOptionsAsync<ExportOptions>();
    }

    void LocalStorageOptionsProvider_OptionSaved(object? sender, IOptions option)
    {
        if (option is ExportOptions exportOption)
        {
            exportOptions = exportOption;
            StateHasChanged();
        }
    }

    async Task AddClick()
    {
        if (exportOptions != null)
        {
            var newProfile = new Exportprofile();
            exportOptions.ExportProfiles.Add(newProfile);
            exportOptions.SelectedExportProfile = newProfile;
            await LocalStorageOptionsProvider.SaveOptionsAsync(exportOptions);
        }
    }

    async Task DeleteClick()
    {
        if (exportOptions?.SelectedExportProfile != null)
        {
            exportOptions.ExportProfiles.Remove(exportOptions.SelectedExportProfile);
            exportOptions.SelectedExportProfile = exportOptions.ExportProfiles.LastOrDefault();
            await LocalStorageOptionsProvider.SaveOptionsAsync(exportOptions);
        }
    }

    String? GetGenerationValidationMessages()
    {
        String? validationErrorMessage = null;
        var messages = _exportfileGenerator.CanGenerateExportfiles(exportOptions?.SelectedExportProfile);
        if (messages.Count() > 0)
        {
            validationErrorMessage = String.Join("<br />", messages.Select(x => x.GetMessageLocalized(_validationMessageLocalizer)));
        }
        return validationErrorMessage;
    }

    Task PreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.StepIndex == 0)
        {
            arg.Cancel = String.IsNullOrEmpty(GetGenerationValidationMessages()) == false;
        }
        return Task.CompletedTask;
    }

    void ActiveIndexChanged(int newIndex)
    {
        if (newIndex == 1)
        {
            exportFiles = _exportfileGenerator.GenerateExportfiles(exportOptions?.SelectedExportProfile);
            configureExportCompleted = exportFiles.Any();
        }
    }

    async Task AdornmentClickAsync(MudMenu? menu, MouseEventArgs args)
    {
        if (menu != null)
        {
            await menu.OpenMenuAsync(args);
        }
    }
}
