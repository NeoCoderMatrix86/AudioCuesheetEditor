/*!
 *  howler.js v2.2.1
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
(function () { "use strict"; var u = function () { this.init() }, n, i, r; u.prototype = { init: function () { var t = this || n; return t._counter = 1e3, t._html5AudioPool = [], t.html5PoolSize = 10, t._codecs = {}, t._howls = [], t._muted = !1, t._volume = 1, t._canPlayEvent = "canplaythrough", t._navigator = typeof window != "undefined" && window.navigator ? window.navigator : null, t.masterGain = null, t.noAudio = !1, t.usingWebAudio = !0, t.autoSuspend = !0, t.ctx = null, t.autoUnlock = !0, t._setup(), t }, volume: function (t) { var i = this || n, r, o, e, u; if (t = parseFloat(t), i.ctx || f(), typeof t != "undefined" && t >= 0 && t <= 1) { if (i._volume = t, i._muted) return i; for (i.usingWebAudio && i.masterGain.gain.setValueAtTime(t, n.ctx.currentTime), r = 0; r < i._howls.length; r++)if (!i._howls[r]._webAudio) for (o = i._howls[r]._getSoundIds(), e = 0; e < o.length; e++)u = i._howls[r]._soundById(o[e]), u && u._node && (u._node.volume = u._volume * t); return i } return i._volume }, mute: function (t) { var i = this || n, r, o, e, u; for (i.ctx || f(), i._muted = t, i.usingWebAudio && i.masterGain.gain.setValueAtTime(t ? 0 : i._volume, n.ctx.currentTime), r = 0; r < i._howls.length; r++)if (!i._howls[r]._webAudio) for (o = i._howls[r]._getSoundIds(), e = 0; e < o.length; e++)u = i._howls[r]._soundById(o[e]), u && u._node && (u._node.muted = t ? !0 : u._muted); return i }, stop: function () { for (var t = this || n, i = 0; i < t._howls.length; i++)t._howls[i].stop(); return t }, unload: function () { for (var t = this || n, i = t._howls.length - 1; i >= 0; i--)t._howls[i].unload(); return t.usingWebAudio && t.ctx && typeof t.ctx.close != "undefined" && (t.ctx.close(), t.ctx = null, f()), t }, codecs: function (t) { return (this || n)._codecs[t.replace(/^x-/, "")] }, _setup: function () { var t = this || n, i; if (t.state = t.ctx ? t.ctx.state || "suspended" : "suspended", t._autoSuspend(), !t.usingWebAudio) if (typeof Audio != "undefined") try { i = new Audio; typeof i.oncanplaythrough == "undefined" && (t._canPlayEvent = "canplay") } catch (r) { t.noAudio = !0 } else t.noAudio = !0; try { i = new Audio; i.muted && (t.noAudio = !0) } catch (r) { } return t.noAudio || t._setupCodecs(), t }, _setupCodecs: function () { var i = this || n, t = null; try { t = typeof Audio != "undefined" ? new Audio : null } catch (e) { return i } if (!t || typeof t.canPlayType != "function") return i; var r = t.canPlayType("audio/mpeg;").replace(/^no$/, ""), u = i._navigator && i._navigator.userAgent.match(/OPR\/([0-6].)/g), f = u && parseInt(u[0].split("/")[1], 10) < 33; return i._codecs = { mp3: !!(!f && (r || t.canPlayType("audio/mp3;").replace(/^no$/, ""))), mpeg: !!r, opus: !!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""), ogg: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""), oga: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""), wav: !!(t.canPlayType('audio/wav; codecs="1"') || t.canPlayType("audio/wav")).replace(/^no$/, ""), aac: !!t.canPlayType("audio/aac;").replace(/^no$/, ""), caf: !!t.canPlayType("audio/x-caf;").replace(/^no$/, ""), m4a: !!(t.canPlayType("audio/x-m4a;") || t.canPlayType("audio/m4a;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""), m4b: !!(t.canPlayType("audio/x-m4b;") || t.canPlayType("audio/m4b;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""), mp4: !!(t.canPlayType("audio/x-mp4;") || t.canPlayType("audio/mp4;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""), weba: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""), webm: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""), dolby: !!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""), flac: !!(t.canPlayType("audio/x-flac;") || t.canPlayType("audio/flac;")).replace(/^no$/, "") }, i }, _unlockAudio: function () { var t = this || n, i; if (!t._audioUnlocked && t.ctx) return t._audioUnlocked = !1, t.autoUnlock = !1, t._mobileUnloaded || t.ctx.sampleRate === 44100 || (t._mobileUnloaded = !0, t.unload()), t._scratchBuffer = t.ctx.createBuffer(1, 1, 22050), i = function () { for (var e, r, o, f, u, n; t._html5AudioPool.length < t.html5PoolSize;)try { e = new Audio; e._unlocked = !0; t._releaseHtml5Audio(e) } catch (e) { t.noAudio = !0; break } for (r = 0; r < t._howls.length; r++)if (!t._howls[r]._webAudio) for (o = t._howls[r]._getSoundIds(), f = 0; f < o.length; f++)u = t._howls[r]._soundById(o[f]), u && u._node && !u._node._unlocked && (u._node._unlocked = !0, u._node.load()); t._autoResume(); n = t.ctx.createBufferSource(); n.buffer = t._scratchBuffer; n.connect(t.ctx.destination); typeof n.start == "undefined" ? n.noteOn(0) : n.start(0); typeof t.ctx.resume == "function" && t.ctx.resume(); n.onended = function () { n.disconnect(0); t._audioUnlocked = !0; document.removeEventListener("touchstart", i, !0); document.removeEventListener("touchend", i, !0); document.removeEventListener("click", i, !0); for (var r = 0; r < t._howls.length; r++)t._howls[r]._emit("unlock") } }, document.addEventListener("touchstart", i, !0), document.addEventListener("touchend", i, !0), document.addEventListener("click", i, !0), t }, _obtainHtml5Audio: function () { var i = this || n, t; return i._html5AudioPool.length ? i._html5AudioPool.pop() : (t = (new Audio).play(), t && typeof Promise != "undefined" && (t instanceof Promise || typeof t.then == "function") && t.catch(function () { console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.") }), new Audio) }, _releaseHtml5Audio: function (t) { var i = this || n; return t._unlocked && i._html5AudioPool.push(t), i }, _autoSuspend: function () { var t = this, i, r; if (t.autoSuspend && t.ctx && typeof t.ctx.suspend != "undefined" && n.usingWebAudio) { for (i = 0; i < t._howls.length; i++)if (t._howls[i]._webAudio) for (r = 0; r < t._howls[i]._sounds.length; r++)if (!t._howls[i]._sounds[r]._paused) return t; return t._suspendTimer && clearTimeout(t._suspendTimer), t._suspendTimer = setTimeout(function () { if (t.autoSuspend) { t._suspendTimer = null; t.state = "suspending"; var n = function () { t.state = "suspended"; t._resumeAfterSuspend && (delete t._resumeAfterSuspend, t._autoResume()) }; t.ctx.suspend().then(n, n) } }, 3e4), t } }, _autoResume: function () { var t = this; if (t.ctx && typeof t.ctx.resume != "undefined" && n.usingWebAudio) return t.state === "running" && t.ctx.state !== "interrupted" && t._suspendTimer ? (clearTimeout(t._suspendTimer), t._suspendTimer = null) : t.state === "suspended" || t.state === "running" && t.ctx.state === "interrupted" ? (t.ctx.resume().then(function () { t.state = "running"; for (var n = 0; n < t._howls.length; n++)t._howls[n]._emit("resume") }), t._suspendTimer && (clearTimeout(t._suspendTimer), t._suspendTimer = null)) : t.state === "suspending" && (t._resumeAfterSuspend = !0), t } }; n = new u; i = function (n) { var t = this; if (!n.src || n.src.length === 0) { console.error("An array of source files must be passed with any new Howl."); return } t.init(n) }; i.prototype = { init: function (t) { var i = this; return n.ctx || f(), i._autoplay = t.autoplay || !1, i._format = typeof t.format != "string" ? t.format : [t.format], i._html5 = t.html5 || !1, i._muted = t.mute || !1, i._loop = t.loop || !1, i._pool = t.pool || 5, i._preload = typeof t.preload == "boolean" || t.preload === "metadata" ? t.preload : !0, i._rate = t.rate || 1, i._sprite = t.sprite || {}, i._src = typeof t.src != "string" ? t.src : [t.src], i._volume = t.volume !== undefined ? t.volume : 1, i._xhr = { method: t.xhr && t.xhr.method ? t.xhr.method : "GET", headers: t.xhr && t.xhr.headers ? t.xhr.headers : null, withCredentials: t.xhr && t.xhr.withCredentials ? t.xhr.withCredentials : !1 }, i._duration = 0, i._state = "unloaded", i._sounds = [], i._endTimers = {}, i._queue = [], i._playLock = !1, i._onend = t.onend ? [{ fn: t.onend }] : [], i._onfade = t.onfade ? [{ fn: t.onfade }] : [], i._onload = t.onload ? [{ fn: t.onload }] : [], i._onloaderror = t.onloaderror ? [{ fn: t.onloaderror }] : [], i._onplayerror = t.onplayerror ? [{ fn: t.onplayerror }] : [], i._onpause = t.onpause ? [{ fn: t.onpause }] : [], i._onplay = t.onplay ? [{ fn: t.onplay }] : [], i._onstop = t.onstop ? [{ fn: t.onstop }] : [], i._onmute = t.onmute ? [{ fn: t.onmute }] : [], i._onvolume = t.onvolume ? [{ fn: t.onvolume }] : [], i._onrate = t.onrate ? [{ fn: t.onrate }] : [], i._onseek = t.onseek ? [{ fn: t.onseek }] : [], i._onunlock = t.onunlock ? [{ fn: t.onunlock }] : [], i._onresume = [], i._webAudio = n.usingWebAudio && !i._html5, typeof n.ctx != "undefined" && n.ctx && n.autoUnlock && n._unlockAudio(), n._howls.push(i), i._autoplay && i._queue.push({ event: "play", action: function () { i.play() } }), i._preload && i._preload !== "none" && i.load(), i }, load: function () { var t = this, f = null, u, i, e; if (n.noAudio) { t._emit("loaderror", null, "No audio support."); return } for (typeof t._src == "string" && (t._src = [t._src]), u = 0; u < t._src.length; u++) { if (t._format && t._format[u]) i = t._format[u]; else { if (e = t._src[u], typeof e != "string") { t._emit("loaderror", null, "Non-string found in selected audio sources - ignoring."); continue } i = /^data:audio\/([^;,]+);/i.exec(e); i || (i = /\.([^.]+)$/.exec(e.split("?", 1)[0])); i && (i = i[1].toLowerCase()) } if (i || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'), i && n.codecs(i)) { f = t._src[u]; break } } if (!f) { t._emit("loaderror", null, "No codec support for selected audio sources."); return } return t._src = f, t._state = "loading", window.location.protocol === "https:" && f.slice(0, 5) === "http:" && (t._html5 = !0, t._webAudio = !1), new r(t), t._webAudio && s(t), t }, play: function (t, i) { var r = this, o = null, c, s, u, l, h, f, y, p, k, w; if (typeof t == "number") o = t, t = null; else if (typeof t != "string" || r._state !== "loaded" || r._sprite[t]) { if (typeof t == "undefined" && (t = "__default", !r._playLock)) { for (c = 0, s = 0; s < r._sounds.length; s++)r._sounds[s]._paused && !r._sounds[s]._ended && (c++, o = r._sounds[s]._id); c === 1 ? t = null : o = null } } else return null; if (u = o ? r._soundById(o) : r._inactiveSound(), !u) return null; if (o && !t && (t = u._sprite || "__default"), r._state !== "loaded") return u._sprite = t, u._ended = !1, l = u._id, r._queue.push({ event: "play", action: function () { r.play(l) } }), l; if (o && !u._paused) return i || r._loadQueue("play"), u._id; r._webAudio && n._autoResume(); var e = Math.max(0, u._seek > 0 ? u._seek : r._sprite[t][0] / 1e3), a = Math.max(0, (r._sprite[t][0] + r._sprite[t][1]) / 1e3 - e), v = a * 1e3 / Math.abs(u._rate), d = r._sprite[t][0] / 1e3, b = (r._sprite[t][0] + r._sprite[t][1]) / 1e3; if (u._sprite = t, u._ended = !1, h = function () { u._paused = !1; u._seek = e; u._start = d; u._stop = b; u._loop = !!(u._loop || r._sprite[t][2]) }, e >= b) { r._ended(u); return } if (f = u._node, r._webAudio) if (y = function () { r._playLock = !1; h(); r._refreshBuffer(u); var t = u._muted || r._muted ? 0 : u._volume; f.gain.setValueAtTime(t, n.ctx.currentTime); u._playStart = n.ctx.currentTime; typeof f.bufferSource.start == "undefined" ? u._loop ? f.bufferSource.noteGrainOn(0, e, 86400) : f.bufferSource.noteGrainOn(0, e, a) : u._loop ? f.bufferSource.start(0, e, 86400) : f.bufferSource.start(0, e, a); v !== Infinity && (r._endTimers[u._id] = setTimeout(r._ended.bind(r, u), v)); i || setTimeout(function () { r._emit("play", u._id); r._loadQueue() }, 0) }, n.state === "running" && n.ctx.state !== "interrupted") y(); else { r._playLock = !0; r.once("resume", y); r._clearTimer(u._id) } else p = function () { f.currentTime = e; f.muted = u._muted || r._muted || n._muted || f.muted; f.volume = u._volume * n.volume(); f.playbackRate = u._rate; try { var o = f.play(); if (o && typeof Promise != "undefined" && (o instanceof Promise || typeof o.then == "function") ? (r._playLock = !0, h(), o.then(function () { r._playLock = !1; f._unlocked = !0; i || (r._emit("play", u._id), r._loadQueue()) }).catch(function () { r._playLock = !1; r._emit("playerror", u._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."); u._ended = !0; u._paused = !0 })) : i || (r._playLock = !1, h(), r._emit("play", u._id), r._loadQueue()), f.playbackRate = u._rate, f.paused) { r._emit("playerror", u._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."); return } t !== "__default" || u._loop ? r._endTimers[u._id] = setTimeout(r._ended.bind(r, u), v) : (r._endTimers[u._id] = function () { r._ended(u); f.removeEventListener("ended", r._endTimers[u._id], !1) }, f.addEventListener("ended", r._endTimers[u._id], !1)) } catch (s) { r._emit("playerror", u._id, s) } }, f.src === "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA" && (f.src = r._src, f.load()), k = window && window.ejecta || !f.readyState && n._navigator.isCocoonJS, f.readyState >= 3 || k ? p() : (r._playLock = !0, w = function () { p(); f.removeEventListener(n._canPlayEvent, w, !1) }, f.addEventListener(n._canPlayEvent, w, !1), r._clearTimer(u._id)); return u._id }, pause: function (n) { var i = this, u, r, t; if (i._state !== "loaded" || i._playLock) return i._queue.push({ event: "pause", action: function () { i.pause(n) } }), i; for (u = i._getSoundIds(n), r = 0; r < u.length; r++) { if (i._clearTimer(u[r]), t = i._soundById(u[r]), t && !t._paused && (t._seek = i.seek(u[r]), t._rateSeek = 0, t._paused = !0, i._stopFade(u[r]), t._node)) if (i._webAudio) { if (!t._node.bufferSource) continue; typeof t._node.bufferSource.stop == "undefined" ? t._node.bufferSource.noteOff(0) : t._node.bufferSource.stop(0); i._cleanBuffer(t._node) } else isNaN(t._node.duration) && t._node.duration !== Infinity || t._node.pause(); arguments[1] || i._emit("pause", t ? t._id : null) } return i }, stop: function (n, t) { var r = this, f, u, i; if (r._state !== "loaded" || r._playLock) return r._queue.push({ event: "stop", action: function () { r.stop(n) } }), r; for (f = r._getSoundIds(n), u = 0; u < f.length; u++)r._clearTimer(f[u]), i = r._soundById(f[u]), i && (i._seek = i._start || 0, i._rateSeek = 0, i._paused = !0, i._ended = !0, r._stopFade(f[u]), i._node && (r._webAudio ? i._node.bufferSource && (typeof i._node.bufferSource.stop == "undefined" ? i._node.bufferSource.noteOff(0) : i._node.bufferSource.stop(0), r._cleanBuffer(i._node)) : isNaN(i._node.duration) && i._node.duration !== Infinity || (i._node.currentTime = i._start || 0, i._node.pause(), i._node.duration === Infinity && r._clearSound(i._node))), t || r._emit("stop", i._id)); return r }, mute: function (t, i) { var r = this, e, f, u; if (r._state !== "loaded" || r._playLock) return r._queue.push({ event: "mute", action: function () { r.mute(t, i) } }), r; if (typeof i == "undefined") if (typeof t == "boolean") r._muted = t; else return r._muted; for (e = r._getSoundIds(i), f = 0; f < e.length; f++)u = r._soundById(e[f]), u && (u._muted = t, u._interval && r._stopFade(u._id), r._webAudio && u._node ? u._node.gain.setValueAtTime(t ? 0 : u._volume, n.ctx.currentTime) : u._node && (u._node.muted = n._muted ? !0 : t), r._emit("mute", u._id)); return r }, volume: function () { var t = this, r = arguments, f, u, o, s, i, e; if (r.length === 0) return t._volume; if (r.length === 1 || r.length === 2 && typeof r[1] == "undefined" ? (o = t._getSoundIds(), s = o.indexOf(r[0]), s >= 0 ? u = parseInt(r[0], 10) : f = parseFloat(r[0])) : r.length >= 2 && (f = parseFloat(r[0]), u = parseInt(r[1], 10)), typeof f != "undefined" && f >= 0 && f <= 1) { if (t._state !== "loaded" || t._playLock) return t._queue.push({ event: "volume", action: function () { t.volume.apply(t, r) } }), t; for (typeof u == "undefined" && (t._volume = f), u = t._getSoundIds(u), e = 0; e < u.length; e++)i = t._soundById(u[e]), i && (i._volume = f, r[2] || t._stopFade(u[e]), t._webAudio && i._node && !i._muted ? i._node.gain.setValueAtTime(f, n.ctx.currentTime) : i._node && !i._muted && (i._node.volume = f * n.volume()), t._emit("volume", i._id)) } else return i = u ? t._soundById(u) : t._sounds[0], i ? i._volume : 0; return t }, fade: function (t, i, r, u) { var f = this, s, o, e, h, c; if (f._state !== "loaded" || f._playLock) return f._queue.push({ event: "fade", action: function () { f.fade(t, i, r, u) } }), f; for (t = Math.min(Math.max(0, parseFloat(t)), 1), i = Math.min(Math.max(0, parseFloat(i)), 1), r = parseFloat(r), f.volume(t, u), s = f._getSoundIds(u), o = 0; o < s.length; o++)e = f._soundById(s[o]), e && (u || f._stopFade(s[o]), f._webAudio && !e._muted && (h = n.ctx.currentTime, c = h + r / 1e3, e._volume = t, e._node.gain.setValueAtTime(t, h), e._node.gain.linearRampToValueAtTime(i, c)), f._startFadeInterval(e, t, i, r, s[o], typeof u == "undefined")); return f }, _startFadeInterval: function (n, t, i, r, u, f) { var o = this, e = t, s = i - t, h = Math.abs(s / .01), l = Math.max(4, h > 0 ? r / h : r), c = Date.now(); n._fadeTo = i; n._interval = setInterval(function () { var u = (Date.now() - c) / r; c = Date.now(); e += s * u; e = Math.round(e * 100) / 100; e = s < 0 ? Math.max(i, e) : Math.min(i, e); o._webAudio ? n._volume = e : o.volume(e, n._id, !0); f && (o._volume = e); (i < t && e <= i || i > t && e >= i) && (clearInterval(n._interval), n._interval = null, n._fadeTo = null, o.volume(i, n._id), o._emit("fade", n._id)) }, l) }, _stopFade: function (t) { var r = this, i = r._soundById(t); return i && i._interval && (r._webAudio && i._node.gain.cancelScheduledValues(n.ctx.currentTime), clearInterval(i._interval), i._interval = null, r.volume(i._fadeTo, t), i._fadeTo = null, r._emit("fade", t)), r }, loop: function () { var i = this, t = arguments, r, e, n, f, u; if (t.length === 0) return i._loop; if (t.length === 1) if (typeof t[0] == "boolean") r = t[0], i._loop = r; else return n = i._soundById(parseInt(t[0], 10)), n ? n._loop : !1; else t.length === 2 && (r = t[0], e = parseInt(t[1], 10)); for (f = i._getSoundIds(e), u = 0; u < f.length; u++)n = i._soundById(f[u]), n && (n._loop = r, i._webAudio && n._node && n._node.bufferSource && (n._node.bufferSource.loop = r, r && (n._node.bufferSource.loopStart = n._start || 0, n._node.bufferSource.loopEnd = n._stop))); return i }, rate: function () { var t = this, f = arguments, e, r, o, s, i, u; if (f.length === 0 ? r = t._sounds[0]._id : f.length === 1 ? (o = t._getSoundIds(), s = o.indexOf(f[0]), s >= 0 ? r = parseInt(f[0], 10) : e = parseFloat(f[0])) : f.length === 2 && (e = parseFloat(f[0]), r = parseInt(f[1], 10)), typeof e == "number") { if (t._state !== "loaded" || t._playLock) return t._queue.push({ event: "rate", action: function () { t.rate.apply(t, f) } }), t; for (typeof r == "undefined" && (t._rate = e), r = t._getSoundIds(r), u = 0; u < r.length; u++)if (i = t._soundById(r[u]), i) { t.playing(r[u]) && (i._rateSeek = t.seek(r[u]), i._playStart = t._webAudio ? n.ctx.currentTime : i._playStart); i._rate = e; t._webAudio && i._node && i._node.bufferSource ? i._node.bufferSource.playbackRate.setValueAtTime(e, n.ctx.currentTime) : i._node && (i._node.playbackRate = e); var h = t.seek(r[u]), c = (t._sprite[i._sprite][0] + t._sprite[i._sprite][1]) / 1e3 - h, l = c * 1e3 / Math.abs(i._rate); (t._endTimers[r[u]] || !i._paused) && (t._clearTimer(r[u]), t._endTimers[r[u]] = setTimeout(t._ended.bind(t, i), l)); t._emit("rate", i._id) } } else return i = t._soundById(r), i ? i._rate : t._rate; return t }, seek: function () { var t = this, u = arguments, f, r, h, c, i, e, o, s, l, a; if (u.length === 0 ? r = t._sounds[0]._id : u.length === 1 ? (h = t._getSoundIds(), c = h.indexOf(u[0]), c >= 0 ? r = parseInt(u[0], 10) : t._sounds.length && (r = t._sounds[0]._id, f = parseFloat(u[0]))) : u.length === 2 && (f = parseFloat(u[0]), r = parseInt(u[1], 10)), typeof r == "undefined") return t; if (typeof f == "number" && (t._state !== "loaded" || t._playLock)) return t._queue.push({ event: "seek", action: function () { t.seek.apply(t, u) } }), t; if (i = t._soundById(r), i) if (typeof f == "number" && f >= 0) e = t.playing(r), e && t.pause(r, !0), i._seek = f, i._ended = !1, t._clearTimer(r), t._webAudio || !i._node || isNaN(i._node.duration) || (i._node.currentTime = f), o = function () { t._emit("seek", r); e && t.play(r, !0) }, e && !t._webAudio ? (s = function () { t._playLock ? setTimeout(s, 0) : o() }, setTimeout(s, 0)) : o(); else return t._webAudio ? (l = t.playing(r) ? n.ctx.currentTime - i._playStart : 0, a = i._rateSeek ? i._rateSeek - i._seek : 0, i._seek + (a + l * Math.abs(i._rate))) : i._node.currentTime; return t }, playing: function (n) { var i = this, r, t; if (typeof n == "number") return r = i._soundById(n), r ? !r._paused : !1; for (t = 0; t < i._sounds.length; t++)if (!i._sounds[t]._paused) return !0; return !1 }, duration: function (n) { var t = this, i = t._duration, r = t._soundById(n); return r && (i = t._sprite[r._sprite][1] / 1e3), i }, state: function () { return this._state }, unload: function () { for (var f, e, u = this, r = u._sounds, i = 0; i < r.length; i++)r[i]._paused || u.stop(r[i]._id), u._webAudio || (u._clearSound(r[i]._node), r[i]._node.removeEventListener("error", r[i]._errorFn, !1), r[i]._node.removeEventListener(n._canPlayEvent, r[i]._loadFn, !1), r[i]._node.removeEventListener("ended", r[i]._endFn, !1), n._releaseHtml5Audio(r[i]._node)), delete r[i]._node, u._clearTimer(r[i]._id); for (f = n._howls.indexOf(u), f >= 0 && n._howls.splice(f, 1), e = !0, i = 0; i < n._howls.length; i++)if (n._howls[i]._src === u._src || u._src.indexOf(n._howls[i]._src) >= 0) { e = !1; break } return t && e && delete t[u._src], n.noAudio = !1, u._state = "unloaded", u._sounds = [], u = null, null }, on: function (n, t, i, r) { var u = this, f = u["_on" + n]; return typeof t == "function" && f.push(r ? { id: i, fn: t, once: r } : { id: i, fn: t }), u }, off: function (n, t, i) { var u = this, e = u["_on" + n], r = 0, o, f; if (typeof t == "number" && (i = t, t = null), t || i) { for (r = 0; r < e.length; r++)if (o = i === e[r].id, t === e[r].fn && o || !t && o) { e.splice(r, 1); break } } else if (n) u["_on" + n] = []; else for (f = Object.keys(u), r = 0; r < f.length; r++)f[r].indexOf("_on") === 0 && Array.isArray(u[f[r]]) && (u[f[r]] = []); return u }, once: function (n, t, i) { var r = this; r.on(n, t, i, 1); return r }, _emit: function (n, t, i) { for (var f = this, u = f["_on" + n], r = u.length - 1; r >= 0; r--)u[r].id && u[r].id !== t && n !== "load" || (setTimeout(function (n) { n.call(this, t, i) }.bind(f, u[r].fn), 0), u[r].once && f.off(n, u[r].fn, u[r].id)); return f._loadQueue(n), f }, _loadQueue: function (n) { var t = this, i; return t._queue.length > 0 && (i = t._queue[0], i.event === n && (t._queue.shift(), t._loadQueue()), n || i.action()), t }, _ended: function (t) { var i = this, f = t._sprite, r, u; return !i._webAudio && t._node && !t._node.paused && !t._node.ended && t._node.currentTime < t._stop ? (setTimeout(i._ended.bind(i, t), 100), i) : (r = !!(t._loop || i._sprite[f][2]), i._emit("end", t._id), !i._webAudio && r && i.stop(t._id, !0).play(t._id), i._webAudio && r && (i._emit("play", t._id), t._seek = t._start || 0, t._rateSeek = 0, t._playStart = n.ctx.currentTime, u = (t._stop - t._start) * 1e3 / Math.abs(t._rate), i._endTimers[t._id] = setTimeout(i._ended.bind(i, t), u)), i._webAudio && !r && (t._paused = !0, t._ended = !0, t._seek = t._start || 0, t._rateSeek = 0, i._clearTimer(t._id), i._cleanBuffer(t._node), n._autoSuspend()), i._webAudio || r || i.stop(t._id, !0), i) }, _clearTimer: function (n) { var t = this, i; return t._endTimers[n] && (typeof t._endTimers[n] != "function" ? clearTimeout(t._endTimers[n]) : (i = t._soundById(n), i && i._node && i._node.removeEventListener("ended", t._endTimers[n], !1)), delete t._endTimers[n]), t }, _soundById: function (n) { for (var i = this, t = 0; t < i._sounds.length; t++)if (n === i._sounds[t]._id) return i._sounds[t]; return null }, _inactiveSound: function () { var n = this, t; for (n._drain(), t = 0; t < n._sounds.length; t++)if (n._sounds[t]._ended) return n._sounds[t].reset(); return new r(n) }, _drain: function () { var t = this, r = t._pool, i = 0, n = 0; if (!(t._sounds.length < r)) { for (n = 0; n < t._sounds.length; n++)t._sounds[n]._ended && i++; for (n = t._sounds.length - 1; n >= 0; n--) { if (i <= r) return; t._sounds[n]._ended && (t._webAudio && t._sounds[n]._node && t._sounds[n]._node.disconnect(0), t._sounds.splice(n, 1), i--) } } }, _getSoundIds: function (n) { var r = this, i, t; if (typeof n == "undefined") { for (i = [], t = 0; t < r._sounds.length; t++)i.push(r._sounds[t]._id); return i } return [n] }, _refreshBuffer: function (i) { var r = this; return i._node.bufferSource = n.ctx.createBufferSource(), i._node.bufferSource.buffer = t[r._src], i._panner ? i._node.bufferSource.connect(i._panner) : i._node.bufferSource.connect(i._node), i._node.bufferSource.loop = i._loop, i._loop && (i._node.bufferSource.loopStart = i._start || 0, i._node.bufferSource.loopEnd = i._stop || 0), i._node.bufferSource.playbackRate.setValueAtTime(i._rate, n.ctx.currentTime), r }, _cleanBuffer: function (t) { var i = this, r = n._navigator && n._navigator.vendor.indexOf("Apple") >= 0; if (n._scratchBuffer && t.bufferSource && (t.bufferSource.onended = null, t.bufferSource.disconnect(0), r)) try { t.bufferSource.buffer = n._scratchBuffer } catch (u) { } return t.bufferSource = null, i }, _clearSound: function (t) { var i = /MSIE |Trident\//.test(n._navigator && n._navigator.userAgent); i || (t.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA") } }; r = function (n) { this._parent = n; this.init() }; r.prototype = { init: function () { var t = this, i = t._parent; return t._muted = i._muted, t._loop = i._loop, t._volume = i._volume, t._rate = i._rate, t._seek = 0, t._paused = !0, t._ended = !0, t._sprite = "__default", t._id = ++n._counter, i._sounds.push(t), t.create(), t }, create: function () { var t = this, i = t._parent, r = n._muted || t._muted || t._parent._muted ? 0 : t._volume; return i._webAudio ? (t._node = typeof n.ctx.createGain == "undefined" ? n.ctx.createGainNode() : n.ctx.createGain(), t._node.gain.setValueAtTime(r, n.ctx.currentTime), t._node.paused = !0, t._node.connect(n.masterGain)) : n.noAudio || (t._node = n._obtainHtml5Audio(), t._errorFn = t._errorListener.bind(t), t._node.addEventListener("error", t._errorFn, !1), t._loadFn = t._loadListener.bind(t), t._node.addEventListener(n._canPlayEvent, t._loadFn, !1), t._endFn = t._endListener.bind(t), t._node.addEventListener("ended", t._endFn, !1), t._node.src = i._src, t._node.preload = i._preload === !0 ? "auto" : i._preload, t._node.volume = r * n.volume(), t._node.load()), t }, reset: function () { var t = this, i = t._parent; return t._muted = i._muted, t._loop = i._loop, t._volume = i._volume, t._rate = i._rate, t._seek = 0, t._rateSeek = 0, t._paused = !0, t._ended = !0, t._sprite = "__default", t._id = ++n._counter, t }, _errorListener: function () { var n = this; n._parent._emit("loaderror", n._id, n._node.error ? n._node.error.code : 0); n._node.removeEventListener("error", n._errorFn, !1) }, _loadListener: function () { var i = this, t = i._parent; t._duration = Math.ceil(i._node.duration * 10) / 10; Object.keys(t._sprite).length === 0 && (t._sprite = { __default: [0, t._duration * 1e3] }); t._state !== "loaded" && (t._state = "loaded", t._emit("load"), t._loadQueue()); i._node.removeEventListener(n._canPlayEvent, i._loadFn, !1) }, _endListener: function () { var t = this, n = t._parent; n._duration === Infinity && (n._duration = Math.ceil(t._node.duration * 10) / 10, n._sprite.__default[1] === Infinity && (n._sprite.__default[1] = n._duration * 1e3), n._ended(t)); t._node.removeEventListener("ended", t._endFn, !1) } }; var t = {}, s = function (n) { var r = n._src, f, s, u, i; if (t[r]) { n._duration = t[r].duration; o(n); return } if (/^data:[^;]+;base64,/.test(r)) { for (f = atob(r.split(",")[1]), s = new Uint8Array(f.length), u = 0; u < f.length; ++u)s[u] = f.charCodeAt(u); e(s.buffer, n) } else i = new XMLHttpRequest, i.open(n._xhr.method, r, !0), i.withCredentials = n._xhr.withCredentials, i.responseType = "arraybuffer", n._xhr.headers && Object.keys(n._xhr.headers).forEach(function (t) { i.setRequestHeader(t, n._xhr.headers[t]) }), i.onload = function () { var t = (i.status + "")[0]; if (t !== "0" && t !== "2" && t !== "3") { n._emit("loaderror", null, "Failed loading audio file with status: " + i.status + "."); return } e(i.response, n) }, i.onerror = function () { n._webAudio && (n._html5 = !0, n._webAudio = !1, n._sounds = [], delete t[r], n.load()) }, h(i) }, h = function (n) { try { n.send() } catch (t) { n.onerror() } }, e = function (i, r) { var u = function () { r._emit("loaderror", null, "Decoding audio data failed.") }, f = function (n) { n && r._sounds.length > 0 ? (t[r._src] = n, o(r, n)) : u() }; typeof Promise != "undefined" && n.ctx.decodeAudioData.length === 1 ? n.ctx.decodeAudioData(i).then(f).catch(u) : n.ctx.decodeAudioData(i, f, u) }, o = function (n, t) { t && !n._duration && (n._duration = t.duration); Object.keys(n._sprite).length === 0 && (n._sprite = { __default: [0, n._duration * 1e3] }); n._state !== "loaded" && (n._state = "loaded", n._emit("load"), n._loadQueue()) }, f = function () { var r; if (n.usingWebAudio) { try { typeof AudioContext != "undefined" ? n.ctx = new AudioContext : typeof webkitAudioContext != "undefined" ? n.ctx = new webkitAudioContext : n.usingWebAudio = !1 } catch (f) { n.usingWebAudio = !1 } n.ctx || (n.usingWebAudio = !1); var u = /iP(hone|od|ad)/.test(n._navigator && n._navigator.platform), t = n._navigator && n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/), i = t ? parseInt(t[1], 10) : null; u && i && i < 9 && (r = /safari/.test(n._navigator && n._navigator.userAgent.toLowerCase()), n._navigator && !r && (n.usingWebAudio = !1)); n.usingWebAudio && (n.masterGain = typeof n.ctx.createGain == "undefined" ? n.ctx.createGainNode() : n.ctx.createGain(), n.masterGain.gain.setValueAtTime(n._muted ? 0 : n._volume, n.ctx.currentTime), n.masterGain.connect(n.ctx.destination)); n._setup() } }; typeof define == "function" && define.amd && define([], function () { return { Howler: n, Howl: i } }); typeof exports != "undefined" && (exports.Howler = n, exports.Howl = i); typeof global != "undefined" ? (global.HowlerGlobal = u, global.Howler = n, global.Howl = i, global.Sound = r) : typeof window != "undefined" && (window.HowlerGlobal = u, window.Howler = n, window.Howl = i, window.Sound = r) })();